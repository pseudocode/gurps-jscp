/*  Assumptions
    This is a supplemental rules library.  It assumes that main library objects
    (Traits, Skills, Spells, Groups, Prerequisites, Adjustments, Modifiers)
    are already defined in a 'main' library file (basic3e_library.js, for instance).
    Add-on libraries like this one add new entries to these existing objects.
*/

// Spells.SpellName.classes = { reg: true, area: true, riq: true, rpe: true, rsp: true, rst: true, rht: true, rdx: true, info: true, block: true, spcl: true, msl: true, melee: true, ench: true };
// Spells.SpellName.stats = { duration: 'instant', castcost: '&mdash;', maintaincost: '&mdash;', time: 1, notes: '' };    // these are the defaults in loadCharacter

var newLibrary = "GURPS Magic, 2nd edition";   // this gets processed like NewEquipment, etc. in processNewLibraryItems(), not when this file gets loaded
/* This library is compatible with GURPS Basic Set, 3rd edition */
var libAbrv = 'M2E';     // This should correspond to one found in the list is at http://www.sjgames.com/gurps/abbrevs.html (also in gurps.js:titleForAbbreviation)

addColleges('Air','Earth','Fire','Water','Animal','BodyControl','CommunicationEmpathy','Enchantment',
    'Food','Healing','IllusionCreation','Knowledge','LightDarkness','MakingBreaking','Meta',
    'MindControl','Movement','Necromantic','Plant','ProtectionWarning','Sound');
// college names, if different from labels above
collegeNames.BodyControl = 'Body Control';
collegeNames.CommunicationEmpathy = 'Comm & Empathy';
collegeNames.IllusionCreation = 'Illusion & Creation';
collegeNames.LightDarkness = 'Light & Darkness';
collegeNames.MakingBreaking = 'Making & Breaking';
collegeNames.MindControl = 'Mind Control';
collegeNames.ProtectionWarning = 'Protection & Warning';


addToGroup("AirSpells",
['PurifyAir','CreateAir','ShapeAir','AirJet','NoSmell','BodyofAir','PredictWeather','DestroyAir','BreatheWater','WalkonAirSpell',
'Clouds','Rain','EarthtoAir','Stench','Odor','Windstorm','Whirlwind','Lightning',
'ControlAirElemental','CreateAirElemental','SummonAirElemental']);
NewSpells.AirJet = new Skill( "Air Jet", 'IQ', 2, libAbrv+31 );
NewSpells.AirJet.classes = { reg: true };
NewSpells.AirJet.stats = { castcost: '1 to 3', maintaincost: 'same', duration: 1, notes: 'Does 2d damage (usually knockback only) per FP.  Range = # of dice.' };
NewPrerequisites.AirJet_requires_ShapeAir = { target: 'AirJet', prereq: 'ShapeAir' };
NewSpells.BodyofAir = new Skill( "Body of Air", 'IQ', 2, libAbrv+31 );
NewSpells.BodyofAir.classes = { reg: true, rht: true };
NewSpells.BodyofAir.stats = { duration: '1 min', castcost: 4, maintaincost: 1, time: 5 };
NewPrerequisites.BodyofAir_requires_ShapeAir = { target: 'BodyofAir', prereq: 'ShapeAir' };
NewSpells.BreatheWater = new Skill( "Breathe Water", 'IQ', 2, libAbrv+31 );
NewSpells.BreatheWater.classes = { reg: true };
NewSpells.BreatheWater.stats = { duration: '1 min', castcost: 4, maintaincost: 2 };
NewPrerequisites.BreatheWater_requires_CreateAir    = { target: 'BreatheWater', prereq: 'CreateAir' };
NewPrerequisites.BreatheWater_requires_DestroyWater = { target: 'BreatheWater', prereq: 'DestroyWater' };
NewSpells.Clouds = new Skill( "Clouds", 'IQ', 2, libAbrv+31 );
NewSpells.Clouds.classes = { area: true };
NewSpells.Clouds.stats = { duration: '10 min', castcost: 1/20, maintaincost: 'same', time: 10 };
NewPrerequisites.Clouds_requires_4Water = { target: 'Clouds', number: 4, prereq: 'Water' };
NewPrerequisites.Clouds_requires_4Air   = { target: 'Clouds', number: 4, prereq: 'Air' };
NewSpells.ControlAirElemental = new Skill( "Control Air Elemental", 'IQ', 2, libAbrv+32 );
NewSpells.ControlAirElemental.classes = { reg: true, rst: true, riq: true };
NewSpells.ControlAirElemental.stats = { duration: '1 min', castcost: '¼ attribute total', maintaincost: 'half', time: 2 };
NewPrerequisites.ControlAirElemental_requires_SummonAirElemental = { target: 'ControlAirElemental', prereq: 'SummonAirElemental' };
NewSpells.CreateAir = new Skill( "Create Air", 'IQ', 2, libAbrv+30 );
NewSpells.CreateAir.classes = { area: true };
NewSpells.CreateAir.stats = { castcost: 1, duration: '5 turns' };
NewPrerequisites.CreateAir_requires_PurifyAir = { target: 'CreateAir', prereq: 'PurifyAir' };
NewSpells.CreateAirElemental = new Skill( "Create Air Elemental", 'IQ', 2, libAbrv+32 );
NewSpells.CreateAirElemental.classes = { spcl: true };
NewSpells.CreateAirElemental.stats = { castcost: '¼ attribute total', time: 'attribute-total seconds' };
NewPrerequisites.CreateAirElemental_requires_Magery2             = { target: 'CreateAirElemental', prereq: 'Magery', level: 2, category: 'ADS' };
NewPrerequisites.CreateAirElemental_requires_ControlAirElemental = { target: 'CreateAirElemental', prereq: 'ControlAirElemental' };
NewSpells.DestroyAir = new Skill( "Destroy Air", 'IQ', 2, libAbrv+31 );
NewSpells.DestroyAir.classes = { area: true };
NewSpells.DestroyAir.stats = { castcost: 2 };
NewPrerequisites.DestroyAir_requires_CreateAir = { target: 'DestroyAir', prereq: 'CreateAir' };
NewSpells.Lightning = new Skill( "Lightning", 'IQ', 2, libAbrv+32 );
NewSpells.Lightning.classes = { msl: true };
NewSpells.Lightning.stats = { castcost: '1/1d-1 damage, max 3d-3', time: '1 to 3' };  // castcost: '&le; Magery/sec, &le; 3 secs'
NewPrerequisites.Lightning_requires_6Air = { target: 'Lightning', number: 6, prereq: 'Air' };
NewSpells.NoSmell = new Skill( "No-Smell", 'IQ', 2, libAbrv+31 );
NewSpells.NoSmell.classes = { reg: true };
NewSpells.NoSmell.stats = { castcost: 2, maintaincost: 2, duration: '1 hr' };
NewPrerequisites.NoSmell_requires_PurifyAir = { target: 'NoSmell', prereq: 'PurifyAir' };
NewSpells.Odor = new Skill( "Odor", 'IQ', 2, libAbrv+32 );
NewSpells.Odor.classes = { area: true };
NewSpells.Odor.stats = { castcost: 1, duration: '1 hr', notes: 'cannot be maintained' };
NewPrerequisites.Odor_requires_NoSmell = { target: 'Odor', prereq: 'NoSmell' };
NewSpells.PredictWeather = new Skill( "Predict Weather", 'IQ', 2, libAbrv+31 );
NewSpells.PredictWeather.classes = { info: true };
NewSpells.PredictWeather.stats = { castcost: '2× days', time: '5 sec/day' };
NewPrerequisites.PredictWeather_requires_4Air = { target: 'PredictWeather', prereq: 'Air', number: 4 };
NewSpells.PurifyAir = new Skill( "Purify Air", 'IQ', 2, libAbrv+30 );
NewSpells.PurifyAir.classes = { area: true };
NewSpells.PurifyAir.stats = { castcost: 1 };
NewSpells.Rain = new Skill( "Rain", 'IQ', 2, libAbrv+31 );
NewSpells.Rain.classes = { area: true };
NewSpells.Rain.stats = { duration: '1 hr', castcost: 1/10, maintaincost: 'same', time: 10 };
NewPrerequisites.Rain_requires_Clouds = { target: 'Rain', prereq: 'Clouds' };
NewSpells.ShapeAir = new Skill( "Shape Air", 'IQ', 2, libAbrv+30 );
NewSpells.ShapeAir.classes = { reg: true };
NewSpells.ShapeAir.stats = { castcost: '1 to 10', duration: '1 min' };
NewPrerequisites.ShapeAir_requires_CreateAir = { target: 'ShapeAir', prereq: 'CreateAir' };
NewSpells.Stench = new Skill( "Stench", 'IQ', 2, libAbrv+32 );
NewSpells.Stench.classes = { area: true };
NewSpells.Stench.stats = { duration: '5 min', castcost: 1 };
NewPrerequisites.Stench_requires_PurifyAir = { target: 'Stench', prereq: 'PurifyAir' };
NewSpells.SummonAirElemental = new Skill( "Summon Air Elemental", 'IQ', 2, libAbrv+32 );
NewSpells.SummonAirElemental.classes = { spcl: true };
NewSpells.SummonAirElemental.stats = { duration: '1 hr', castcost: 4, time: 30, notes: 'GM rolls 2d for minutes to appear.  Cannot be maintained.' };
NewPrerequisites.SummonAirElemental_requires_Magery1                      = { target: 'SummonAirElemental', prereq: 'Magery', level: 1, category: 'ADS' };
NewPrerequisites.SummonAirElemental_requires_4Air                         = { target: 'SummonAirElemental', prereq: 'Air', number: 4 };
NewPrerequisites.SummonAirElemental_requires_8Air_pgroup1                 = { target: 'SummonAirElemental', prereq: 'Air', number: 8,       pgroup: 1 };
NewPrerequisites.SummonAirElemental_requires_SummonEarthElemental_pgroup1 = { target: 'SummonAirElemental', prereq: 'SummonEarthElemental', pgroup: 1 };
NewPrerequisites.SummonAirElemental_requires_SummonFireElemental_pgroup1  = { target: 'SummonAirElemental', prereq: 'SummonFireElemental',  pgroup: 1 };
NewPrerequisites.SummonAirElemental_requires_SummonWaterElemental_pgroup1 = { target: 'SummonAirElemental', prereq: 'SummonWaterElemental', pgroup: 1 };
NewSpells.WalkonAirSpell = new Skill( "Walk on Air", 'IQ', 2, libAbrv+31 );
NewSpells.WalkonAirSpell.classes = { reg: true };
NewSpells.WalkonAirSpell.stats = { duration: '1 min', castcost: 3, maintaincost: 2 };
NewPrerequisites.WalkonAirSpell_requires_ShapeAir = { target: 'WalkonAirSpell', prereq: 'ShapeAir' };
NewSpells.Whirlwind = new Skill( "Whirlwind", 'IQ', 2, libAbrv+32 );
NewSpells.Whirlwind.classes = { area: true };
NewSpells.Whirlwind.stats = { duration: '1 minute after reaching full strength', castcost: 4, maintaincost: 'half', time: "The storm starts immediately, but the caster must concentrate for a number of seconds equal to the storm's radius in hexes to bring the storm to full strength." };
NewPrerequisites.Whirlwind_requires_Windstorm = { target: 'Whirlwind', prereq: 'Windstorm' };
NewSpells.Windstorm = new Skill( "Windstorm", 'IQ', 2, libAbrv+32 );
NewSpells.Windstorm.classes = { area: true };
NewSpells.Windstorm.stats = { duration: '1 minute after reaching full strength', castcost: 2, maintaincost: 'half', time: "The storm starts immediately, but the caster must concentrate for a number of seconds equal to the storm's radius in hexes to bring the storm to full strength." };
NewPrerequisites.Windstorm_requires_ShapeAir = { target: 'Windstorm', prereq: 'ShapeAir' };

addToGroup("EarthSpells",
['SeekEarth','ShapeEarth','SandJet','ShapeStone','WalkThroughEarth','EarthtoStone','StonetoEarth','CreateEarth',
'FleshtoStone','StonetoFlesh','BodyofStone','StoneMissile','EarthtoAir','EarthVision','Entombment',
'Earthquake','Volcano','SummonEarthElemental','ControlEarthElemental','CreateEarthElemental']);
NewSpells.BodyofStone = new Skill( "Body of Stone", 'IQ', 3, libAbrv+32 );
NewSpells.BodyofStone.classes = { reg: true, rht: true };
NewSpells.BodyofStone.stats = { duration: '1 min', castcost: 10, maintaincost: 5, time: 5 };
NewPrerequisites.BodyofStone_requires_StonetoFlesh = { target: 'BodyofStone', prereq: 'StonetoFlesh' };
NewSpells.ControlEarthElemental = new Skill( "Control Earth Elemental", 'IQ', 2, libAbrv+33 );
NewSpells.ControlEarthElemental.classes = { reg: true, rst: true, riq: true };
NewSpells.ControlEarthElemental.stats = { duration: '1 min', castcost: '¼ attribute total', maintaincost: 'half', time: 2 };
NewPrerequisites.ControlEarthElemental_requires_SummonEarthElemental = { target: 'ControlEarthElemental', prereq: 'SummonEarthElemental' };
NewSpells.CreateEarth = new Skill( "Create Earth", 'IQ', 2, libAbrv+32 );
NewSpells.CreateEarth.classes = { reg: true };
NewSpells.CreateEarth.stats = { duration: 'permanent', castcost: '4/hex create, 2/hex solidify' };
NewPrerequisites.CreateEarth_requires_EarthtoStone = { target: 'CreateEarth', prereq: 'EarthtoStone' };
NewSpells.CreateEarthElemental = new Skill( "Create Earth Elemental", 'IQ', 2, libAbrv+33 );
NewSpells.CreateEarthElemental.classes = { spcl: true };
NewSpells.CreateEarthElemental.stats = { castcost: '¼ attribute total', time: 'attribute-total seconds' };
NewPrerequisites.CreateEarthElemental_requires_Magery2               = { target: 'CreateEarthElemental', prereq: 'Magery', level: 2, category: 'ADS' };
NewPrerequisites.CreateEarthElemental_requires_ControlEarthElemental = { target: 'CreateEarthElemental', prereq: 'ControlEarthElemental' };
NewSpells.EarthtoAir = new Skill( "Earth to Air", 'IQ', 2, libAbrv+32 );
NewSpells.EarthtoAir.classes = { reg: true };
NewSpells.EarthtoAir.stats = { duration: 'permanent', castcost: '1/ft³, 8/hex' };
NewPrerequisites.EarthtoAir_requires_CreateAir  = { target: 'EarthtoAir', prereq: 'CreateAir' };
NewPrerequisites.EarthtoAir_requires_ShapeEarth = { target: 'EarthtoAir', prereq: 'ShapeEarth' };
NewSpells.EarthtoStone = new Skill( "Earth to Stone", 'IQ', 2, libAbrv+32 );
NewSpells.EarthtoStone.classes = { reg: true };
NewSpells.EarthtoStone.stats = { duration: 'permanent', castcost: '3 up to 20#, or 5/hex' };
NewPrerequisites.EarthtoStone_requires_Magery1    = { target: 'EarthtoStone', prereq: 'Magery', level: 1, category: 'ADS' };
NewPrerequisites.EarthtoStone_requires_ShapeEarth = { target: 'EarthtoStone', prereq: 'ShapeEarth' };
NewSpells.EarthVision = new Skill( "Earth Vision", 'IQ', 2, libAbrv+32 );
NewSpells.EarthVision.classes = { reg: true };
NewSpells.EarthVision.stats = { duration: 30, castcost: '2/10yd depth', maintaincost: 'same' };
NewPrerequisites.EarthVision_requires_ShapeEarth = { target: 'EarthVision', prereq: 'ShapeEarth' };
NewSpells.Earthquake = new Skill( "Earthquake", 'IQ', 2, libAbrv+33 );
NewSpells.Earthquake.classes = { area: true };
NewSpells.Earthquake.stats = { duration: '1 min', castcost: "2, 4, or 8", maintaincost: "same", time: 30, notes: "effects by base cost: tiny, mild, or severe (see M2E33)" };
NewPrerequisites.Earthquake_requires_Magery2     = { target: 'Earthquake', prereq: 'Magery', level: 2, category: 'ADS' };
NewPrerequisites.Earthquake_requires_6Earth      = { target: 'Earthquake', prereq: 'Earth', number: 6 };
NewPrerequisites.Earthquake_requires_EarthVision = { target: 'Earthquake', prereq: 'EarthVision' };
NewSpells.Entombment = new Skill( "Entombment", 'IQ', 2, libAbrv+32 );
NewSpells.Entombment.classes = { reg: true, rht: true };
NewSpells.Entombment.stats = { duration: 'permanent, unless reversed by this spell', castcost: '10; 6 to reverse', time: 3 };
NewPrerequisites.Entombment_requires_Magery2 = { target: 'Entombment', prereq: 'Magery', level: 2, category: 'ADS' };
NewPrerequisites.Entombment_requires_5Earth  = { target: 'Entombment', prereq: 'Earth', number: 5 };
NewSpells.FleshtoStone = new Skill( "Flesh to Stone", 'IQ', 2, libAbrv+32 );
NewSpells.FleshtoStone.classes = { reg: true, rht: true };
NewSpells.FleshtoStone.stats = { duration: 'permanent, unless reversed by another spell', castcost: '10/hex of creature size', time: 2 };
NewPrerequisites.FleshtoStone_requires_EarthtoStone = { target: 'FleshtoStone', prereq: 'EarthtoStone' };
NewSpells.SandJet = new Skill( "Sand Jet", 'IQ', 2, libAbrv+31 );
NewSpells.SandJet.classes = { reg: true };
NewSpells.SandJet.stats = { duration: 1, castcost: '1-3', maintaincost: 'same', notes: "The jet has a hex of range for each energy point spent in casting it." };
NewPrerequisites.SandJet_requires_CreateEarth = { target: 'SandJet', prereq: 'CreateEarth' };
NewPrerequisites.SandJet_requires_ShapeEarth  = { target: 'SandJet', prereq: 'ShapeEarth' };
NewSpells.SeekEarth = new Skill( "Seek Earth", 'IQ', 2, libAbrv+31 );
NewSpells.SeekEarth.classes = { info: true };
NewSpells.SeekEarth.stats = { castcost: 3, time: 10 };
NewSpells.ShapeEarth = new Skill( "Shape Earth", 'IQ', 2, libAbrv+31 );
NewSpells.ShapeEarth.classes = { reg: true };
NewSpells.ShapeEarth.stats = { duration: '1 min', castcost: '2/hex', maintaincost: '1/hex' };
NewPrerequisites.ShapeEarth_requires_SeekEarth = { target: 'ShapeEarth', prereq: 'SeekEarth' };
NewSpells.ShapeStone = new Skill( "Shape Stone", 'IQ', 2, libAbrv+31 );
NewSpells.ShapeStone.classes = { reg: true };
NewSpells.ShapeStone.stats = { duration: '1 min', castcost: '4/hex', maintaincost: '2/hex', notes: "&times;3 for worked stone" };
NewPrerequisites.ShapeStone_requires_ShapeEarth = { target: 'ShapeStone', prereq: 'ShapeEarth' };
NewPrerequisites.ShapeStone_requires_3Earth = { target: 'ShapeStone', number: 3, prereq: 'Earth' };
NewSpells.StoneMissile = new Skill( "Stone Missile", 'IQ', 2, libAbrv+32 );
NewSpells.StoneMissile.classes = { msl: true };
NewSpells.StoneMissile.stats = { castcost: '1-3', time: '1-3', notes: "SS 13, Acc +2, ½D 40, Max 80. The missile does 1d+1 damage per point of energy." };
NewPrerequisites.StoneMissile_requires_CreateEarth = { target: 'StoneMissile', prereq: 'CreateEarth' };
NewSpells.StonetoFlesh = new Skill( "Stone to Flesh", 'IQ', 2, libAbrv+32 );
NewSpells.StonetoFlesh.classes = { reg: true };
NewSpells.StonetoFlesh.stats = { duration: 'permanent', castcost: '10/hex of creature size', time: 5 };
NewPrerequisites.StonetoFlesh_requires_Magery2 = { target: 'StonetoFlesh', level: 2, category: 'ADS', prereq: 'Magery' };
NewPrerequisites.StonetoFlesh_requires_StonetoEarth = { target: 'StonetoFlesh', prereq: 'StonetoEarth' };
NewPrerequisites.StonetoFlesh_requires_FleshtoStone = { target: 'StonetoFlesh', prereq: 'FleshtoStone' };
NewSpells.StonetoEarth = new Skill( "Stone to Earth", 'IQ', 2, libAbrv+32 );
NewSpells.StonetoEarth.classes = { reg: true };
NewSpells.StonetoEarth.stats = { duration: 'permanent', castcost: '6 up to 20#, or 10/hex' };
NewPrerequisites.StonetoEarth_requires_EarthtoStone_pgroup1 = { target: 'StonetoEarth', prereq: 'EarthtoStone',     pgroup: 1 };
NewPrerequisites.StonetoEarth_requires_4Earth_pgroup1       = { target: 'StonetoEarth', prereq: 'Earth', number: 4, pgroup: 1 };
NewSpells.SummonEarthElemental = new Skill( "Summon Earth Elemental", 'IQ', 2, libAbrv+33 );
NewSpells.SummonEarthElemental.classes = { spcl: true };
NewSpells.SummonEarthElemental.stats = { duration: '1 hr', castcost: 4, time: 30, notes: 'GM rolls 2d for minutes to appear.  Cannot be maintained.' };
NewPrerequisites.SummonEarthElemental_requires_Magery1                      = { target: 'SummonEarthElemental', prereq: 'Magery', level: 1, category: 'ADS' };
NewPrerequisites.SummonEarthElemental_requires_4Earth                       = { target: 'SummonEarthElemental', prereq: 'Earth', number: 4 };
NewPrerequisites.SummonEarthElemental_requires_8Earth_pgroup1               = { target: 'SummonEarthElemental', prereq: 'Earth', number: 8,     pgroup: 1 };
NewPrerequisites.SummonEarthElemental_requires_SummonAirElemental_pgroup1   = { target: 'SummonEarthElemental', prereq: 'SummonAirElemental',   pgroup: 1 };
NewPrerequisites.SummonEarthElemental_requires_SummonFireElemental_pgroup1  = { target: 'SummonEarthElemental', prereq: 'SummonFireElemental',  pgroup: 1 };
NewPrerequisites.SummonEarthElemental_requires_SummonWaterElemental_pgroup1 = { target: 'SummonEarthElemental', prereq: 'SummonWaterElemental', pgroup: 1 };
NewSpells.Volcano = new Skill( "Volcano", 'IQ', 2, libAbrv+33 );
NewSpells.Volcano.classes = { reg: true };
NewSpells.Volcano.stats = { castcost: 15, maintaincost: 10, time: '1 hr', notes: 'One hour until the first effects are visible. Continued concentration for 8 hours each day is necessary to keep the volcano growing.' };
NewPrerequisites.Volcano_requires_Earthquake = { target: 'Volcano', prereq: 'Earthquake' };
NewPrerequisites.Volcano_requires_6Fire = { target: 'Volcano', number: 6, prereq: 'Fire' };
NewSpells.WalkThroughEarth = new Skill( "Walk Through Earth", 'IQ', 2, libAbrv+31 );
NewSpells.WalkThroughEarth.classes = { reg: true };
NewSpells.WalkThroughEarth.stats = { duration: 1, castcost: 4, maintaincost: 3, notes: '&times;2 to pass through stone, &times;3 for metal' };
NewPrerequisites.WalkThroughEarth_requires_ShapeStone = { target: 'WalkThroughEarth', prereq: 'ShapeStone' };

addToGroup("FireSpells",
['IgniteFire','CreateFire','ShapeFire','ExtinguishFire','Fireproof','Heat','Cold','ResistCold','ResistFire',
'Fireball','ExplosiveFireball','FlameJet','BreatheFire','PhantomFlame','FlamingWeapon','EssentialFlame','FlamingMissiles',
'SummonFireElemental','ControlFireElemental','CreateFireElemental']);
NewSpells.BreatheFire = new Skill( "Breathe Fire", 'IQ', 3, libAbrv+34 );
NewSpells.BreatheFire.classes = { reg: true };
NewSpells.BreatheFire.stats = { castcost: '1 - 4', time: 2, notes: "Breath does 1+1d damage, and has a hex of range, for each energy point spent in casting it.  Cannot be maintained." };
NewPrerequisites.BreatheFire_requires_Magery1 = { target: 'BreatheFire', category: 'ADS', prereq: 'Magery', level: 1 };
NewPrerequisites.BreatheFire_requires_FlameJet   = { target: 'BreatheFire', prereq: 'FlameJet' };
NewPrerequisites.BreatheFire_requires_ResistFire = { target: 'BreatheFire', prereq: 'ResistFire' };
NewSpells.Cold = new Skill( "Cold", 'IQ', 2, libAbrv+32 );
NewSpells.Cold.classes = { reg: true };
NewSpells.Cold.stats = { duration: '1 min', castcost: 'see notes', maintaincost: 'same', time: '1 min', notes: "1 for an object up to the size of a fist, 2 for up to a ft&sup3;, 3/hex for larger objects. Each minute lowers the target's temperature by 20&deg;. Time can be halved by doubling the energy spent, and so on, but one cannot use less energy per minute for a slower cooling." };
NewPrerequisites.Cold_requires_Heat = { target: 'Cold', prereq: 'Heat' };
NewSpells.ControlFireElemental = new Skill( "Control Fire Elemental", 'IQ', 2, libAbrv+34 );
NewSpells.ControlFireElemental.classes = { reg: true, rst: true, riq: true };
NewSpells.ControlFireElemental.stats = { duration: '1 min', castcost: '¼ attribute total', maintaincost: 'half', time: 2 };
NewPrerequisites.ControlFireElemental_requires_SummonFireElemental = { target: 'ControlFireElemental', prereq: 'SummonFireElemental' };
NewSpells.CreateFire = new Skill( "Create Fire", 'IQ', 2, libAbrv+33 );
NewSpells.CreateFire.classes = { area: true };
NewSpells.CreateFire.stats = { duration: '1 min', castcost: 2, maintaincost: 'half' };
NewPrerequisites.CreateFire_requires_IgniteFire = { target: 'CreateFire', prereq: 'IgniteFire' };
NewSpells.CreateFireElemental = new Skill( "Create Fire Elemental", 'IQ', 2, libAbrv+34 );
NewSpells.CreateFireElemental.classes = { spcl: true };
NewSpells.CreateFireElemental.stats = { castcost: '¼ attribute total', time: 'attribute-total seconds' };
NewPrerequisites.CreateFireElemental_requires_Magery2              = { target: 'CreateFireElemental', level: 2, category: 'ADS', prereq: 'Magery' };
NewPrerequisites.CreateFireElemental_requires_ControlFireElemental = { target: 'CreateFireElemental', prereq: 'ControlFireElemental' };
NewSpells.EssentialFlame = new Skill( "Essential Flame", 'IQ', 2, libAbrv+34 );
NewSpells.EssentialFlame.classes = { area: true };
NewSpells.EssentialFlame.stats = { duration: '1 min', castcost: 3, maintaincost: 2, time: 3 };
NewPrerequisites.EssentialFlame_requires_6Fire = { target: 'EssentialFlame', prereq: 'Fire', number: 6 };
NewSpells.ExplosiveFireball = new Skill( "Explosive Fireball", 'IQ', 2, libAbrv+34 );
NewSpells.ExplosiveFireball.classes = { msl: true };
NewSpells.ExplosiveFireball.stats = { castcost: '2 - 6', time: '1 - 3', notes: "The fireball does 1 die damage for each 2 energy points spent in casting it, but also damages things in nearby hexes." };
NewPrerequisites.ExplosiveFireball_requires_Fireball = { target: 'ExplosiveFireball', prereq: 'Fireball' };
NewSpells.ExtinguishFire = new Skill( "Extinguish Fire", 'IQ', 2, libAbrv+32 );
NewSpells.ExtinguishFire.classes = { reg: true };
NewSpells.ExtinguishFire.stats = { duration: 'Once out, a fire stays out.', castcost: '3/hex' };
NewPrerequisites.ExtinguishFire_requires_IgniteFire = { target: 'ExtinguishFire', prereq: 'IgniteFire' };
NewSpells.Fireball = new Skill( "Fireball", 'IQ', 2, libAbrv+34 );
NewSpells.Fireball.classes = { msl: true };
NewSpells.Fireball.stats = { castcost: '1 - 3', time: '1 - 3', notes: "The fireball does 1 die damage for each energy point spent in casting it." };
NewPrerequisites.Fireball_requires_Magery1    = { target: 'Fireball', prereq: 'Magery', level: 1, category: 'ADS' };
NewPrerequisites.Fireball_requires_CreateFire = { target: 'Fireball', prereq: 'CreateFire' };
NewPrerequisites.Fireball_requires_ShapeFire  = { target: 'Fireball', prereq: 'ShapeFire' };
NewSpells.Fireproof = new Skill( "Fireproof", 'IQ', 2, libAbrv+32 );
NewSpells.Fireproof.classes = { area: true };
NewSpells.Fireproof.stats = { duration: '1 day', castcost: 3, maintaincost: 'half', notes: "Can increase effect for cost×2." };
NewPrerequisites.Fireproof_requires_ExtinguishFire = { target: 'Fireproof', prereq: 'ExtinguishFire' };
NewSpells.FlameJet = new Skill( "Flame Jet", 'IQ', 2, libAbrv+34 );
NewSpells.FlameJet.classes = { reg: true };
NewSpells.FlameJet.stats = { castcost: '1 - 3', notes: "The jet does 1 die damage, and has a hex of range, for each energy point spent in casting it." };
NewPrerequisites.FlameJet_requires_CreateFire = { target: 'FlameJet', prereq: 'CreateFire' };
NewPrerequisites.FlameJet_requires_ShapeFire  = { target: 'FlameJet', prereq: 'ShapeFire' };
NewSpells.FlamingMissiles = new Skill( "Flaming Missiles", 'IQ', 2, libAbrv+34 );
NewSpells.FlamingMissiles.classes = { reg: true };
NewSpells.FlamingMissiles.stats = { duration: '1 min', castcost: 4, maintaincost: 2, time: 3 };
NewPrerequisites.FlamingMissiles_requires_FlamingWeapon = { target: 'FlamingMissiles', prereq: 'FlamingWeapon' };
NewSpells.FlamingWeapon = new Skill( "Flaming Weapon", 'IQ', 2, libAbrv+34 );
NewSpells.FlamingWeapon.classes = { reg: true };
NewSpells.FlamingWeapon.stats = { duration: '1 min', castcost: 4, maintaincost: 1, time: 2 };
NewPrerequisites.FlamingWeapon_requires_Magery2 = { target: 'FlamingWeapon', prereq: 'Magery', level: 2, category: 'ADS' };
NewPrerequisites.FlamingWeapon_requires_Heat    = { target: 'FlamingWeapon', prereq: 'Heat' };
NewSpells.Heat = new Skill( "Heat", 'IQ', 2, libAbrv+32 );
NewSpells.Heat.classes = { reg: true };
NewSpells.Heat.stats = { duration: '1 min', castcost: 'see notes', maintaincost: 'same', time: '1 min', notes: "1 for an object up to the size of a fist, 2 for up to a ft&sup3;, 3/hex for larger objects. Each minute raises the target's temperature by 20&deg;. Time can be halved by doubling the energy spent, and so on, but one cannot use less energy per minute for a slower heating." };
NewPrerequisites.Heat_requires_CreateFire = { target: 'Heat', prereq: 'CreateFire' };
NewPrerequisites.Heat_requires_ShapeFire  = { target: 'Heat', prereq: 'ShapeFire' };
NewSpells.IgniteFire = new Skill( "Ignite Fire", 'IQ', 2, libAbrv+32 );
NewSpells.IgniteFire.classes = { reg: true };
NewSpells.IgniteFire.stats = { castcost: '1-4', maintaincost: 'same' };
NewSpells.PhantomFlame = new Skill( "Phantom Flame", 'IQ', 2, libAbrv+34 );
NewSpells.PhantomFlame.classes = { area: true };
NewSpells.PhantomFlame.stats = { duration: '1 min', castcost: 1, maintaincost: 1 };
NewPrerequisites.PhantomFlame_requires_ShapeFire_pgroup1      = { target: 'PhantomFlame', prereq: 'ShapeFire',      pgroup: 1 };
NewPrerequisites.PhantomFlame_requires_SimpleIllusion_pgroup1 = { target: 'PhantomFlame', prereq: 'SimpleIllusion', pgroup: 1 };
NewSpells.ResistCold = new Skill( "Resist Cold", 'IQ', 2, libAbrv+32 );
NewSpells.ResistCold.classes = { reg: true };
NewSpells.ResistCold.stats = { duration: '1 min', castcost: '2/person or hex', maintaincost: '1/person or hex', notes: 'Cost doubles if subject must resist cold of 40° below zero or more; cost triples if subject must resist the cold of absolute zero. Only the first level of protection is necessary against combat-type Fire NewSpells.' };
NewPrerequisites.ResistCold_requires_CreateFire = { target: 'ResistCold', prereq: 'CreateFire' };
NewPrerequisites.ResistCold_requires_Heat = { target: 'ResistCold', prereq: 'Heat' };
NewSpells.ResistFire = new Skill( "Resist Fire", 'IQ', 2, libAbrv+32 );
NewSpells.ResistFire.classes = { reg: true };
NewSpells.ResistFire.stats = { duration: '1 min', castcost: '2/person or hex', maintaincost: '1/person or hex', notes: 'Cost doubles if subject must resist a blast furnace or volcano; cost triples if subject must resist the heat of a star, nuclear bomb, etc. Only the first level of protection is necessary against combat-type Fire NewSpells.' };
NewPrerequisites.ResistFire_requires_ExtinguishFire = { target: 'ResistFire', prereq: 'ExtinguishFire' };
NewPrerequisites.ResistFire_requires_Cold           = { target: 'ResistFire', prereq: 'Cold' };
NewSpells.ShapeFire = new Skill( "Shape Fire", 'IQ', 2, libAbrv+32 );
NewSpells.ShapeFire.classes = { area: true };
NewSpells.ShapeFire.stats = { duration: '1 min', castcost: 2, maintaincost: 'half' };
NewPrerequisites.ShapeFire_requires_IgniteFire = { target: 'ShapeFire', prereq: 'IgniteFire' };
NewSpells.SummonFireElemental = new Skill( "Summon Fire Elemental", 'IQ', 2, libAbrv+34 );
NewSpells.SummonFireElemental.classes = { spcl: true };
NewSpells.SummonFireElemental.stats = { duration: '1 hr', castcost: 4, time: 30, notes: 'GM rolls 2d for minutes to appear.  Cannot be maintained.' };
NewPrerequisites.SummonFireElemental_requires_Magery1                      = { target: 'SummonFireElemental', prereq: 'Magery', level: 1, category: 'ADS' };
NewPrerequisites.SummonFireElemental_requires_4Fire                        = { target: 'SummonFireElemental', prereq: 'Fire', number: 4 };
NewPrerequisites.SummonFireElemental_requires_8Fire_pgroup1                = { target: 'SummonFireElemental', prereq: 'Fire', number: 8,      pgroup: 1 };
NewPrerequisites.SummonFireElemental_requires_SummonAirElemental_pgroup1   = { target: 'SummonFireElemental', prereq: 'SummonAirElemental',   pgroup: 1 };
NewPrerequisites.SummonFireElemental_requires_SummonEarthElemental_pgroup1 = { target: 'SummonFireElemental', prereq: 'SummonEarthElemental', pgroup: 1 };
NewPrerequisites.SummonFireElemental_requires_SummonWaterElemental_pgroup1 = { target: 'SummonFireElemental', prereq: 'SummonWaterElemental', pgroup: 1 };

addToGroup("WaterSpells",
['SeekWater','PurifyWater','CreateWater','DestroyWater','Dehydrate','BreatheAir','BreatheWater','ShapeWater','Swim',
'EssentialWater','WalkonWater','Fog','WaterVision','Umbrella','BodyofWater','WaterJet','IcyWeapon','IceSphere','IceDagger',
'Rain','Frost','IceSlick','Freeze','MeltIce','IceVision','SnowShoes','Snow','Hail','Frostbite','Geyser',
'SummonWaterElemental','ControlWaterElemental','CreateWaterElemental']);
NewSpells.BodyofWater = new Skill( "Body of Water", 'IQ', 2, libAbrv+40 );
NewSpells.BodyofWater.classes = { reg: true, rht: true };
NewSpells.BodyofWater.stats = { duration: "1 min", castcost: 5, maintaincost: 2, time: 5 };
NewPrerequisites.BodyofWater_requires_ShapeWater = { target: 'BodyofWater', prereq: 'ShapeWater' };
NewSpells.BreatheAir = new Skill( "Breathe Air", 'IQ', 2, libAbrv+39 );
NewSpells.BreatheAir.classes = { reg: true };
NewSpells.BreatheAir.stats   = { duration: '1 min', castcost: 4, maintaincost: 2 };
NewPrerequisites.BreatheAir_requires_CreateWater = { target: 'BreatheAir', prereq: 'CreateWater' };
NewPrerequisites.BreatheAir_requires_DestroyAir  = { target: 'BreatheAir', prereq: 'DestroyAir' };
// Breathe Water under Air spells
NewSpells.ControlWaterElemental = new Skill( "Control Water Elemental", 'IQ', 2, libAbrv+42 );
NewSpells.ControlWaterElemental.classes = { reg: true, rst: true, riq: true };
NewSpells.ControlWaterElemental.stats = { duration: '1 min', castcost: '¼ attribute total', maintaincost: 'half', time: 2 };
NewPrerequisites.ControlWaterElemental_requires_SummonWaterElemental = { target: 'ControlWaterElemental', prereq: 'SummonWaterElemental' };
NewSpells.CreateWater = new Skill( "Create Water", 'IQ', 2, libAbrv+39 );
NewSpells.CreateWater.classes = { reg: true };
NewSpells.CreateWater.stats = { castcost: '2/gal', duration: 'The created water is permanent.' };
NewPrerequisites.CreateWater_requires_PurifyWater = { target: 'CreateWater', prereq: 'PurifyWater' };
NewSpells.CreateWaterElemental = new Skill( "Create Water Elemental", 'IQ', 2, libAbrv+42 );
NewSpells.CreateWaterElemental.classes = { spcl: true };
NewSpells.CreateWaterElemental.stats = { castcost: '¼ attribute total', time: 'attribute-total seconds' };
NewPrerequisites.CreateWaterElemental_requires_Magery2 = { target: 'CreateWaterElemental', level: 2, category: 'ADS', prereq: 'Magery' };
NewPrerequisites.CreateWaterElemental_requires_ControlWaterElemental = { target: 'CreateWaterElemental', prereq: 'ControlWaterElemental' };
NewSpells.Dehydrate = new Skill( "Dehydrate", 'IQ', 2, libAbrv+39 );
NewSpells.Dehydrate.classes = { reg: true, rht: true };
NewSpells.Dehydrate.stats = { duration: "permanent", castcost: "1/1d-1 damage; max 3", time: 2 };
NewPrerequisites.Dehydrate_requires_5Water = { target: 'Dehydrate', number: 5, prereq: 'Water' };
NewPrerequisites.Dehydrate_requires_DestroyWater = { target: 'Dehydrate', prereq: 'DestroyWater' };
NewSpells.DestroyWater = new Skill( "Destroy Water", 'IQ', 2, libAbrv+39 );
NewSpells.DestroyWater.classes = { area: true };
NewSpells.DestroyWater.stats = { castcost: 3, duration: 'permanent', notes: 'In deep water, a hex is only 2 yards deep.' };
NewPrerequisites.DestroyWater_requires_CreateWater = { target: 'DestroyWater', prereq: 'CreateWater' };
NewSpells.EssentialWater = new Skill( "Essential Water", 'IQ', 2, libAbrv+39 );
NewSpells.EssentialWater.classes = { reg: true };
NewSpells.EssentialWater.stats = { duration: "permanent", castcost: "3/gal" };
NewPrerequisites.EssentialWater_requires_6Water = { target: 'EssentialWater', number: 6, prereq: 'Water' };
NewSpells.Fog = new Skill( "Fog", 'IQ', 2, libAbrv+40 );
NewSpells.Fog.classes = { area: true };
NewSpells.Fog.stats = { duration: '1 min', castcost: 2, maintaincost: 1 };
NewPrerequisites.Fog_requires_ShapeWater = { target: 'Fog', prereq: 'ShapeWater' };
NewSpells.Freeze = new Skill( "Freeze", 'IQ', 2, libAbrv+41 );
NewSpells.Freeze.classes = { reg: true };
NewSpells.Freeze.stats = { duration: "10 minutes, or until it melts", castcost: "2-6, +3/hex", maintaincost: 'same', time: 10, notes: "2 for an object up to the size of a fist, 4 for up to a cubic foot, 6 for 1-hex object" };
NewPrerequisites.Freeze_requires_ShapeWater = { target: 'Freeze', prereq: 'ShapeWater' };
NewSpells.Frost = new Skill( "Frost", 'IQ', 2, libAbrv+41 );
NewSpells.Frost.classes = { area: true };
NewSpells.Frost.stats   = { duration: "until it melts", castcost: 1 };
NewPrerequisites.Frost_requires_CreateWater_pgroup1 = { target: 'Frost', prereq: 'CreateWater', pgroup: 1 };
NewPrerequisites.Frost_requires_Cold_pgroup1        = { target: 'Frost', prereq: 'Cold',        pgroup: 1 };
NewSpells.Frostbite = new Skill( "Frostbite", 'IQ', 2, libAbrv+42 );
NewSpells.Frostbite.classes = { reg: true, rht: true };
NewSpells.Frostbite.stats = { duration: "permanent", castcost: "1/1d damage; max 3", time: 3 };
NewPrerequisites.Frostbite_requires_5Water = { target: 'Frostbite', prereq: 'Water', number: 5 };
NewPrerequisites.Frostbite_requires_Frost  = { target: 'Frostbite', prereq: 'Frost' };
NewPrerequisites.Frostbite_requires_Freeze = { target: 'Frostbite', prereq: 'Freeze' };
NewSpells.Geyser = new Skill( "Geyser", 'IQ', 3, libAbrv+42 );
NewSpells.Geyser.classes = { area: true };
NewSpells.Geyser.stats = { duration: "1 sec", castcost: 5, maintaincost: 2, time: 5 };
NewPrerequisites.Geyser_requires_6Water         = { target: 'Geyser', number: 6, prereq: 'Water' };
NewPrerequisites.Geyser_requires_4Earth_pgroup1 = { target: 'Geyser', number: 4, prereq: 'Earth', pgroup: 1 };
NewPrerequisites.Geyser_requires_4Fire_pgroup1  = { target: 'Geyser', number: 4, prereq: 'Fire',  pgroup: 1 };
NewSpells.Hail = new Skill( "Hail", 'IQ', 2, libAbrv+42 );
NewSpells.Hail.classes = { area: true };
NewSpells.Hail.stats   = { duration: '1 hr', castcost: 1/5, maintaincost: 'same', notes: "For 5 times the cost, the GM may allow really <i>big</i> hailstones, doing 1d-2 crushing damage per second." };
NewPrerequisites.Hail_requires_Snow = { target: 'Hail', prereq: 'Snow' };
NewSpells.IceSlick = new Skill( "Ice Slick", 'IQ', 2, libAbrv+41 );
NewSpells.IceSlick.classes = { area: true };
NewSpells.IceSlick.stats = { duration: "until it melts", castcost: 3, time: "2 sec/yd radius" };
NewPrerequisites.IceSlick_requires_Frost = { target: 'IceSlick', prereq: 'Frost' };
NewSpells.IceSphere = new Skill( "Ice Sphere", 'IQ', 2, libAbrv+41 );
NewSpells.IceSphere.classes = { msl: true };
NewSpells.IceSphere.stats = { castcost: '1-3', time: '1-3', notes: "SS 13, Acc +2, ½D 40, Max 80. The sphere does 1 die damage per point of energy; double damage to creatures of fire." };
NewPrerequisites.IceSphere_requires_ShapeWater = { target: 'IceSphere', prereq: 'ShapeWater' };
NewSpells.IceVision = new Skill( "Ice Vision", 'IQ', 2, libAbrv+41 );
NewSpells.IceVision.classes = { reg: true };
NewSpells.IceVision.stats = { duration: "30 sec", castcost: "2/10 yds of depth", maintaincost: "same" };
NewPrerequisites.IceVision_requires_ShapeWater = { target: 'IceVision', prereq: 'ShapeWater' };
NewSpells.IceDagger = new Skill( "Ice Dagger", 'IQ', 2, libAbrv+41 );
NewSpells.IceDagger.classes = { msl: true };
NewSpells.IceDagger.stats = { castcost: "1-3", time: "1-3", notes: "SS 13, Acc +3, ½D 30, Max 60. 1d-1 imp damage per energy spent" };
NewPrerequisites.IceDagger_requires_IceSphere_pgroup1 = { target: 'IceDagger', prereq: 'IceSphere', pgroup: 1 };
NewPrerequisites.IceDagger_requires_WaterJet_pgroup1  = { target: 'IceDagger', prereq: 'WaterJet',  pgroup: 1 };
NewSpells.IcyWeapon = new Skill( "Icy Weapon", 'IQ', 2, libAbrv+40 );
NewSpells.IcyWeapon.classes = { reg: true };
NewSpells.IcyWeapon.stats = { duration: "1 min", castcost: 3, maintaincost: 1, time: 3 };
NewPrerequisites.IcyWeapon_requires_CreateWater = { target: 'IcyWeapon', prereq: 'CreateWater' };
NewSpells.MeltIce = new Skill( "Melt Ice", 'IQ', 2, libAbrv+41 );
NewSpells.MeltIce.classes = { area: true };
NewSpells.MeltIce.stats = { duration: "10 min if below freezing", castcost: "1, min 2", maintaincost: "same", time: 10 };
NewPrerequisites.MeltIce_requires_Heat_pgroup1   = { target: 'MeltIce', prereq: 'Heat',   pgroup: 1 };
NewPrerequisites.MeltIce_requires_Freeze_pgroup1 = { target: 'MeltIce', prereq: 'Freeze', pgroup: 1 };
NewSpells.PurifyWater = new Skill( "Purify Water", 'IQ', 2, libAbrv+39 );
NewSpells.PurifyWater.classes = { spcl: true };
NewSpells.PurifyWater.stats = { time: 'see notes', castcost: '1/gal', duration: 'Purified water stays pure unless re-contaminated.', notes: 'Usually 5 to 10 seconds per gallon, unless a large container and ring are used.' };
NewPrerequisites.PurifyWater_requires_SeekWater = { target: 'PurifyWater', prereq: 'SeekWater' };
// Rain under Air
NewSpells.SeekWater = new Skill( "Seek Water", 'IQ', 2, libAbrv+39 );
NewSpells.SeekWater.classes = { info: true };
NewSpells.SeekWater.stats = { castcost: 2 };
NewSpells.ShapeWater = new Skill( "Shape Water", 'IQ', 2, libAbrv+39 );
NewSpells.ShapeWater.classes = { reg: true };
NewSpells.ShapeWater.stats = { duration: "1 min", castcost: "1/20 gal", maintaincost: 1, time: 2 };
NewPrerequisites.ShapeWater_requires_CreateWater = { target: 'ShapeWater', prereq: 'CreateWater' };
NewSpells.Snow = new Skill( "Snow", 'IQ', 2, libAbrv+42 );
NewSpells.Snow.classes = { area: true };
NewSpells.Snow.stats   = { duration: '1 hr', castcost: 1/15, maintaincost: 'same', notes: "Each additional 1/15 energy per yard radius increases the amount of snow by 1 inch per hour." };
NewPrerequisites.Snow_requires_Clouds = { target: 'Snow', prereq: 'Clouds' };
NewPrerequisites.Snow_requires_Frost  = { target: 'Snow', prereq: 'Frost' };
NewSpells.SnowShoes = new Skill( "Snow Shoes", 'IQ', 2, libAbrv+41 );
NewSpells.SnowShoes.classes = { reg: true };
NewSpells.SnowShoes.stats = { duration: "1 min", castcost: 2, maintaincost: 1, time: 2 };
NewPrerequisites.SnowShoes_requires_ShapeWater = { target: 'SnowShoes', prereq: 'ShapeWater' };
NewSpells.SummonWaterElemental = new Skill( "Summon Water Elemental", 'IQ', 2, libAbrv+42 );
NewSpells.SummonWaterElemental.classes = { spcl: true };
NewSpells.SummonWaterElemental.stats = { duration: '1 hr', castcost: 4, time: 30, notes: 'GM rolls 2d for minutes to appear.  Cannot be maintained.' };
NewPrerequisites.SummonWaterElemental_requires_Magery1                      = { target: 'SummonWaterElemental', prereq: 'Magery', level: 1, category: 'ADS' };
NewPrerequisites.SummonWaterElemental_requires_4Water                       = { target: 'SummonWaterElemental', prereq: 'Water', number: 4 };
NewPrerequisites.SummonWaterElemental_requires_8Water_pgroup1               = { target: 'SummonWaterElemental', prereq: 'Water', number: 8,     pgroup: 1 };
NewPrerequisites.SummonWaterElemental_requires_SummonAirElemental_pgroup1   = { target: 'SummonWaterElemental', prereq: 'SummonAirElemental',   pgroup: 1 };
NewPrerequisites.SummonWaterElemental_requires_SummonEarthElemental_pgroup1 = { target: 'SummonWaterElemental', prereq: 'SummonEarthElemental', pgroup: 1 };
NewPrerequisites.SummonWaterElemental_requires_SummonFireElemental_pgroup1  = { target: 'SummonWaterElemental', prereq: 'SummonFireElemental',  pgroup: 1 };
// Swim under Movement
NewSpells.Umbrella = new Skill( "Umbrella", 'IQ', 2, libAbrv+40 );
NewSpells.Umbrella.classes = { reg: true };
NewSpells.Umbrella.stats = { duration: "10 min", castcost: 1, maintaincost: 1, time: 2 };
NewPrerequisites.Umbrella_requires_ShapeWater_pgroup1  = { target: 'Umbrella', prereq: 'ShapeWater',  pgroup: 1 };
NewPrerequisites.Umbrella_requires_ShieldSpell_pgroup1 = { target: 'Umbrella', prereq: 'ShieldSpell', pgroup: 1 };
NewSpells.WalkonWater = new Skill( "Walk on Water", 'IQ', 2, libAbrv+40 );
NewSpells.WalkonWater.classes = { reg: true };
NewSpells.WalkonWater.stats = { duration: "1 min", castcost: 3, maintaincost: 2, time: 4 };
NewPrerequisites.WalkonWater_requires_ShapeWater = { target: 'WalkonWater', prereq: 'ShapeWater' };
NewSpells.WaterVision = new Skill( "Water Vision", 'IQ', 2, libAbrv+40 );
NewSpells.WaterVision.classes = { info: true };
NewSpells.WaterVision.stats = { duration: "30 sec", castcost: "1/20 yds of depth (max 200 yds)", maintaincost: "same" };
NewPrerequisites.WaterVision_requires_ShapeWater = { target: 'WaterVision', prereq: 'ShapeWater' };
NewSpells.WaterJet = new Skill( "Water Jet", 'IQ', 2, libAbrv+40 );
NewSpells.WaterJet.classes = { reg: true };
NewSpells.WaterJet.stats = { duration: "1 sec", castcost: '1-3', notes: "The jet does 1 die damage per point of energy. The jet has range equal to energy spent." };
NewPrerequisites.WaterJet_requires_ShapeWater = { target: 'WaterJet', prereq: 'ShapeWater' };

addToGroup("AnimalSpells",
['BeastSoother','Master','BeastSummoning','BeastSeeker','BeastLink',
'InsectControl','FishControl','MolluskControl','ReptileControl','BirdControl','MammalControl',
'Rider','RiderWithin','BeastPossession','BeastSpeech','Shapeshifting','ShapeshiftOthers']);
NewSpells.BeastLink = new Skill( "Beast Link", 'IQ', 2, libAbrv+23 );
NewSpells.BeastLink.classes = { reg: true };
NewSpells.BeastLink.stats = { duration: 'until called', castcost: 3, time: 5 };
NewPrerequisites.BeastLink_requires_BeastSummoning = { target: 'BeastLink', prereq: 'BeastSummoning' };
NewSpells.BeastPossession = new Skill( "Beast Possession", 'IQ', 2, libAbrv+24 );
NewSpells.BeastPossession.classes = { reg: true, riq: true };
NewSpells.BeastPossession.stats = { duration: '1 min', castcost: 6, maintaincost: 2, time: 5 };
NewPrerequisites.BeastPossession_requires_RiderWithin_pgroup1 = { target: 'BeastPossession', prereq: 'RiderWithin', pgroup: 1 };
NewPrerequisites.BeastPossession_requires_Possession_pgroup1  = { target: 'BeastPossession', prereq: 'Possession',  pgroup: 1 };
NewSpells.BeastSeeker = new Skill( "Beast Seeker", 'IQ', 2, libAbrv+23 );
NewSpells.BeastSeeker.classes = { info: true };
NewSpells.BeastSeeker.stats = { castcost: 3 };
NewPrerequisites.BeastSeeker_requires_BeastSummoning_pgroup1 = { target: 'BeastSeeker', prereq: 'BeastSummoning', pgroup: 1 };
NewPrerequisites.BeastSeeker_requires_Seeker_pgroup1         = { target: 'BeastSeeker', prereq: 'Seeker',         pgroup: 1 };
NewPrerequisites.BeastSeeker_requires_2SeekSpells_pgroup2 = { target: 'BeastSeeker', prereq: 'SeekSpells', number: 2, pgroup: 2 };
NewPrerequisites.BeastSeeker_requires_Seeker_pgroup2      = { target: 'BeastSeeker', prereq: 'Seeker',                pgroup: 2 };
NewSpells.BeastSpeech = new Skill( "Beast Speech", 'IQ', 2, libAbrv+25 );
NewSpells.BeastSpeech.classes = { reg: true };
NewSpells.BeastSpeech.stats = { duration: '1 min', castcost: 4, maintaincost: 2 };
NewPrerequisites.BeastSpeech_requires_BeastSummoning = { target: 'BeastSpeech', prereq: 'BeastSummoning' };
NewSpells.BeastSummoning = new Skill( "Beast Summoning", 'IQ', 2, libAbrv+23 );
NewSpells.BeastSummoning.classes = { reg: true };
NewSpells.BeastSummoning.stats = { duration: '1 min', castcost: 3, maintaincost: 2 };
NewPrerequisites.BeastSummoning_requires_BeastSoother = { target: 'BeastSummoning', prereq: 'BeastSoother' };
NewSpells.BeastSoother = new Skill( "Beast-Soother", 'IQ', 2, libAbrv+23 );
NewSpells.BeastSoother.classes = { reg: true };
NewSpells.BeastSoother.stats = { castcost: '1 to 3', notes: "To call <i>many</i> animals, double the cost of the spell. All creatures within a certain area (usually about a 10-mile radius; more for a very successful casting) will be drawn." };
NewPrerequisites.BeastSoother_requires_Persuasion_pgroup1    = { target: 'BeastSoother', prereq: 'Persuasion',    pgroup: 1 };
NewPrerequisites.BeastSoother_requires_AnimalEmpathy_pgroup1 = { target: 'BeastSoother', prereq: 'AnimalEmpathy', pgroup: 1, category: 'ADS' };
NewSpells.BirdControl = new Skill( "Bird Control", 'IQ', 2, libAbrv+24 );
NewSpells.BirdControl.classes = { reg: true, riq: true };
NewSpells.BirdControl.stats = { duration: '1 min', castcost: 4, maintaincost: 2 };
NewPrerequisites.BirdControl_requires_BeastSoother = { target: 'BirdControl', prereq: 'BeastSoother' };
NewSpells.FishControl = new Skill( "Fish Control", 'IQ', 2, libAbrv+24 );
NewSpells.FishControl.classes = { reg: true, riq: true };
NewSpells.FishControl.stats = { duration: '1 min', castcost: 3, maintaincost: 2 };
NewPrerequisites.FishControl_requires_BeastSoother = { target: 'FishControl', prereq: 'BeastSoother' };
NewSpells.InsectControl = new Skill( "Insect Control", 'IQ', 2, libAbrv+24 );
NewSpells.InsectControl.classes = { reg: true, riq: true };
NewSpells.InsectControl.stats = { duration: '1 min', castcost: 3, maintaincost: 2 };
NewPrerequisites.InsectControl_requires_BeastSoother = { target: 'InsectControl', prereq: 'BeastSoother' };
NewSpells.MammalControl = new Skill( "Mammal Control", 'IQ', 2, libAbrv+24 );
NewSpells.MammalControl.classes = { reg: true, riq: true };
NewSpells.MammalControl.stats = { duration: '1 min', castcost: 5, maintaincost: 2 };
NewPrerequisites.MammalControl_requires_BeastSoother_pgroup1 = { target: 'MammalControl', prereq: 'BeastSoother', pgroup: 1 };
NewPrerequisites.MammalControl_requires_Charm_pgroup1        = { target: 'MammalControl', prereq: 'Charm',        pgroup: 1 };
NewSpells.Master = new Skill( "Master", 'IQ', 2, libAbrv+23 );
NewSpells.Master.classes = { reg: true, block: true, riq: true };
NewSpells.Master.stats = { castcost: 2 };
NewPrerequisites.Master_requires_BeastSoother = { target: 'Master', prereq: 'BeastSoother' };
NewSpells.MolluskControl = new Skill( "Mollusk Control", 'IQ', 2, libAbrv+24 );
NewSpells.MolluskControl.classes = { reg: true, riq: true };
NewSpells.MolluskControl.stats = { duration: '1 min', castcost: 3, maintaincost: 2 };
NewPrerequisites.MolluskControl_requires_BeastSoother = { target: 'MolluskControl', prereq: 'BeastSoother' };
NewSpells.ReptileControl = new Skill( "Reptile Control", 'IQ', 2, libAbrv+24 );
NewSpells.ReptileControl.classes = { reg: true, riq: true };
NewSpells.ReptileControl.stats = { duration: '1 min', castcost: 4, maintaincost: 2 };
NewPrerequisites.ReptileControl_requires_BeastSoother = { target: 'ReptileControl', prereq: 'BeastSoother' };
NewSpells.Rider = new Skill( "Rider", 'IQ', 2, libAbrv+24 );
NewSpells.Rider.classes = { reg: true };
NewSpells.Rider.stats = { duration: '5 min', castcost: 2, maintaincost: 1 };
NewPrerequisites.Rider_requires_1AnimalControl = { target: 'Rider', prereq: 'AnimalControl', number: 1 };
NewSpells.RiderWithin = new Skill( "Rider Within", 'IQ', 2, libAbrv+24 );
NewSpells.RiderWithin.classes = { reg: true };
NewSpells.RiderWithin.stats = { duration: '1 min', castcost: 4, maintaincost: 1, time: 3 };
NewPrerequisites.RiderWithin_requires_2AnimalControl = { target: 'RiderWithin', prereq: 'AnimalControl', number: 2 };
NewSpells.Shapeshifting = new Skill( "Shapeshifting", 'IQ', 3, libAbrv+25 );
NewSpells.Shapeshifting.classes = { spcl: true };
NewSpells.Shapeshifting.stats = { duration: '1 hr', castcost: 6, maintaincost: 2, time: 3 };
NewSpells.Shapeshifting.specRequiredList = ['wolf', 'bear', 'boar', 'giant eagle', 'tiger', 'giant snake'];
NewPrerequisites.Shapeshifting_requires_Magery1 = { target: 'Shapeshifting', category: 'ADS', prereq: 'Magery', level: 1 };
NewPrerequisites.Shapeshifting_requires_6Spells = { target: 'Shapeshifting', number: 6, prereq: 'Spells' };
NewSpells.ShapeshiftOthers = new Skill( "Shapeshift Others", 'IQ', 3, libAbrv+25 );
NewSpells.ShapeshiftOthers.classes = { spcl: true, riq: true };
NewSpells.ShapeshiftOthers.stats = { duration: '1 hr', castcost: 6, maintaincost: 2, time: 30 };
NewPrerequisites.ShapeshiftOthers_requires_Magery2 = { target: 'ShapeshiftOthers', level: 2, category: 'ADS', prereq: 'Magery' };
NewPrerequisites.ShapeshiftOthers_requires_Shapeshifting = { target: 'ShapeshiftOthers', prereq: 'Shapeshifting' };
addToGroup("AnimalControl",
['InsectControl','FishControl','MolluskControl','ReptileControl','BirdControl','MammalControl']);

addToGroup("BodyControlSpells",
['Itch','Spasm','Pain','Stun','Clumsiness','Dexterity','Might','Vigor','ClimbingSpell','StrikeBlind','StrikeDeaf','StrikeDumb',
'CurseMissile','ParalyzeLimb','TotalParalysis','WitherLimb','Deathtouch','Sickness','Fatigue','Hinder','RootedFeet',
'Tanglefoot','Roundabout','ResistPain','AlterVisage','AlterBody']);
NewSpells.AlterVisage = new Skill( "Alter Visage", 'IQ', 2, libAbrv+28 );
NewSpells.AlterVisage.classes = { reg: true, rht: true };
NewSpells.AlterVisage.stats = { duration: '1 hr', castcost: 4, maintaincost: 3, time: '1 min' };
NewPrerequisites.AlterVisage_requires_8BC = { target: 'AlterVisage', number: 8, prereq: 'BC'};
NewPrerequisites.AlterVisage_requires_Shapeshifting_pgroup1   = { target: 'AlterVisage', prereq: 'Shapeshifting',   pgroup: 1 };
NewPrerequisites.AlterVisage_requires_PerfectIllusion_pgroup1 = { target: 'AlterVisage', prereq: 'PerfectIllusion', pgroup: 1 };
NewSpells.AlterBody = new Skill( "Alter Body", 'IQ', 2, libAbrv+28 );
NewSpells.AlterBody.classes = { reg: true, rht: true };
NewSpells.AlterBody.stats = { duration: '1 hr', castcost: 8, maintaincost: 6, time: '2 min' };
NewPrerequisites.AlterBody_requires_AlterVisage = { target: 'AlterBody', prereq: 'AlterVisage' };
NewSpells.ClimbingSpell = new Skill( "Climbing", 'IQ', 2, libAbrv+26 );
NewSpells.ClimbingSpell.classes = { reg: true };
NewSpells.ClimbingSpell.stats = { duration: '1 min', castcost: '1/Climbing+2, max +6', maintaincost: 'same' };
NewSpells.Clumsiness = new Skill( "Clumsiness", 'IQ', 2, libAbrv+26 );
NewSpells.Clumsiness.classes = { reg: true, riq: true };
NewSpells.Clumsiness.stats = { duration: '1 min', castcost: '1/DX-, max -5', maintaincost: 'half' };
NewPrerequisites.Clumsiness_requires_Spasm = { target: 'Clumsiness', prereq: 'Spasm' };
NewSpells.CurseMissile = new Skill( "Curse-Missile", 'IQ', 2, libAbrv+27 );
NewSpells.CurseMissile.classes = { msl: true };
NewSpells.CurseMissile.stats = { castcost: 2 };
NewPrerequisites.CurseMissile_requires_Magery2 = { target: 'CurseMissile', level: 2, category: 'ADS', prereq: 'Magery' };
NewSpells.Deathtouch = new Skill( "Deathtouch", 'IQ', 2, libAbrv+27 );
NewSpells.Deathtouch.classes = { reg: true };
NewSpells.Deathtouch.stats = { castcost: '1/die damage, max 3d' };
NewPrerequisites.Deathtouch_requires_WitherLimb = { target: 'Deathtouch', prereq: 'WitherLimb' };
NewSpells.Dexterity = new Skill( "Dexterity", 'IQ', 2, libAbrv+26 );
NewSpells.Dexterity.classes = { reg: true };
NewSpells.Dexterity.stats = { duration: '1 min', castcost: '2/DX+, max +5', maintaincost: 'same' };
NewPrerequisites.Dexterity_requires_Clumsiness = { target: 'Dexterity', prereq: 'Clumsiness' };
NewSpells.Fatigue = new Skill( "Fatigue", 'IQ', 2, libAbrv+27 );
NewSpells.Fatigue.classes = { reg: true, rht: true };
NewSpells.Fatigue.stats = { duration: '1 min', castcost: '1/ST-, max -5', maintaincost: 'half' };
NewSpells.Hinder = new Skill( "Hinder", 'IQ', 2, libAbrv+27 );
NewSpells.Hinder.classes = { reg: true };
NewSpells.Hinder.stats = { duration: '1 min', castcost: '1/Move-, max -4', maintaincost: 'same' };
NewPrerequisites.Hinder_requires_Haste_pgroup1      = { target: 'Hinder', prereq: 'Haste', pgroup: 1 };
NewPrerequisites.Hinder_requires_Clumsiness_pgroup1 = { target: 'Hinder', prereq: 'Clumsiness', pgroup: 1 };
NewSpells.Itch = new Skill( "Itch", 'IQ', 2, libAbrv+25 );
NewSpells.Itch.classes = { reg: true, rht: true };
NewSpells.Itch.stats = { duration: 'until scratched', castcost: 2 };
NewSpells.Might = new Skill( "Might", 'IQ', 2, libAbrv+26 );
NewSpells.Might.classes = { reg: true };
NewSpells.Might.stats = { duration: '1 min', castcost: '2/ST+, max +5', maintaincost: 'same' };
NewPrerequisites.Might_requires_LendStrength = { target: 'Might', prereq: 'LendStrength' };
NewSpells.Pain = new Skill( "Pain", 'IQ', 2, libAbrv+26 );
NewSpells.Pain.classes = { reg: true, rht: true };
NewSpells.Pain.stats = { duration: '1 sec', castcost: 2 , time: 2 };
NewPrerequisites.Pain_requires_Spasm = { target: 'Pain', prereq: 'Spasm' };
NewSpells.ParalyzeLimb = new Skill( "Paralyze Limb", 'IQ', 2, libAbrv+27 );
NewSpells.ParalyzeLimb.classes = { reg: true, rht: true };
NewSpells.ParalyzeLimb.stats = { duration: '1 min', castcost: 3 };
NewPrerequisites.ParalyzeLimb_requires_Magery1 = { target: 'ParalyzeLimb', category: 'ADS', prereq: 'Magery', level: 1 };
NewPrerequisites.ParalyzeLimb_requires_5BC = { target: 'ParalyzeLimb', number: 5, prereq: 'BC' };
NewPrerequisites.ParalyzeLimb_requires_Pain = { target: 'ParalyzeLimb', prereq: 'Pain' };
NewSpells.ResistPain = new Skill( "Resist Pain", 'IQ', 2, libAbrv+28 );
NewSpells.ResistPain.classes = { reg: true };
NewSpells.ResistPain.stats = { duration: '1 min', castcost: 4, maintaincost: 2 };
NewPrerequisites.ResistPain_requires_Magery2 = { target: 'ResistPain', level: 2, category: 'ADS', prereq: 'Magery' };
NewPrerequisites.ResistPain_requires_Pain = { target: 'ResistPain', prereq: 'Pain' };
NewSpells.RootedFeet = new Skill( "Rooted Feet", 'IQ', 2, libAbrv+27 );
NewSpells.RootedFeet.classes = { reg: true, rst: true };
NewSpells.RootedFeet.stats = { duration: '1 min, or until broken', castcost: 3 };
NewPrerequisites.RootedFeet_requires_Hinder = { target: 'RootedFeet', prereq: 'Hinder' };
NewSpells.Roundabout = new Skill( "Roundabout", 'IQ', 2, libAbrv+27 );
NewSpells.Roundabout.classes = { reg: true, rht: true };
NewSpells.Roundabout.stats = { castcost: 3 };
NewPrerequisites.Roundabout_requires_Tanglefoot = { target: 'Roundabout', prereq: 'Tanglefoot' };
// Sickness under Mind Control spells
NewSpells.Spasm = new Skill( "Spasm", 'IQ', 2, libAbrv+25 );
NewSpells.Spasm.classes = { reg: true, rht: true };
NewSpells.Spasm.stats = { castcost: 2 };
NewPrerequisites.Spasm_requires_Itch = { target: 'Spasm', prereq: 'Itch' };
NewSpells.StrikeBlind = new Skill( "Strike Blind", 'IQ', 2, libAbrv+26 );
NewSpells.StrikeBlind.classes = { reg: true, rht: true };
NewSpells.StrikeBlind.stats = { duration: '10 sec', castcost: 4, maintaincost: 2 };
NewPrerequisites.StrikeBlind_requires_Spasm = { target: 'StrikeBlind', prereq: 'Spasm' };
NewPrerequisites.StrikeBlind_requires_2LD = { target: 'StrikeBlind', number: 2, prereq: 'LD' };
NewSpells.StrikeDeaf = new Skill( "Strike Deaf", 'IQ', 2, libAbrv+26 );
NewSpells.StrikeDeaf.classes = { reg: true, rht: true };
NewSpells.StrikeDeaf.stats = { duration: '10 sec', castcost: 3, maintaincost: 1 };
NewPrerequisites.StrikeDeaf_requires_Spasm = { target: 'StrikeDeaf', prereq: 'Spasm' };
NewPrerequisites.StrikeDeaf_requires_2Sound = { target: 'StrikeDeaf', number: 2, prereq: 'Sound' };
NewSpells.StrikeDumb = new Skill( "Strike Dumb", 'IQ', 2, libAbrv+26 );
NewSpells.StrikeDumb.classes = { reg: true, rht: true };
NewSpells.StrikeDumb.stats = { duration: '10 sec', castcost: 3, maintaincost: 1 };
NewPrerequisites.StrikeDumb_requires_Spasm = { target: 'StrikeDumb', prereq: 'Spasm' };
NewSpells.Stun = new Skill( "Stun", 'IQ', 2, libAbrv+26 );
NewSpells.Stun.classes = { reg: true, rht: true };
NewSpells.Stun.stats = { castcost: 2 };
NewPrerequisites.Stun_requires_Pain = { target: 'Stun', prereq: 'Pain' };
NewSpells.Tanglefoot = new Skill( "Tanglefoot", 'IQ', 2, libAbrv+27 );
NewSpells.Tanglefoot.classes = { reg: true, rdx: true };
NewSpells.Tanglefoot.stats = { castcost: 3 };
NewPrerequisites.Tanglefoot_requires_Clumsiness = { target: 'Tanglefoot', prereq: 'Clumsiness' };
NewSpells.TotalParalysis = new Skill( "Total Paralysis", 'IQ', 2, libAbrv+27 );
NewSpells.TotalParalysis.classes = { reg: true, rht: true };
NewSpells.TotalParalysis.stats = { duration: '1 min', castcost: 5 };
NewPrerequisites.TotalParalysis_requires_ParalyzeLimb = { target: 'TotalParalysis', prereq: 'ParalyzeLimb' };
NewSpells.Vigor = new Skill( "Vigor", 'IQ', 2, libAbrv+26 );
NewSpells.Vigor.classes = { reg: true };
NewSpells.Vigor.stats = { duration: '1 min', castcost: '2/HT+, max +5', maintaincost: 'same' };
NewPrerequisites.Vigor_requires_LendHealth = { target: 'Vigor', prereq: 'LendHealth' };
NewSpells.WitherLimb = new Skill( "Wither Limb", 'IQ', 2, libAbrv+27 );
NewSpells.WitherLimb.classes = { reg: true, rht: true };
NewSpells.WitherLimb.stats = { duration: 'permanent', castcost: 5 };
NewPrerequisites.WitherLimb_requires_Magery2 = { target: 'WitherLimb', level: 2, category: 'ADS', prereq: 'Magery' };
NewPrerequisites.WitherLimb_requires_ParalyzeLimb = { target: 'WitherLimb', prereq: 'ParalyzeLimb' };

addToGroup("CommunicationEmpathySpells",
['SenseLife','SenseFoes','SenseEmotion','Truthsayer','CompelTruth','MindReadingSpell','HideThoughts','SoulRider',
'MindSearch','MindSending','TelepathySpell','Persuasion','ControlPerson','Possession','PermanentPossession',
'ExchangeBodies','Exorcism','LendLanguage','BorrowLanguage','LendSkill','BorrowSkill','GiftofTongues','GiftofLetters']);
NewSpells.BorrowLanguage = new Skill( "Borrow Language", 'IQ', 2, libAbrv+30 );
NewSpells.BorrowLanguage.classes = { reg: true };
NewSpells.BorrowLanguage.stats = { duration: '1 min', castcost: 3, maintaincost: 1, time: 3 };
NewPrerequisites.BorrowLanguage_requires_LendLanguage = { target: 'BorrowLanguage', prereq: 'LendLanguage' };
NewSpells.BorrowSkill = new Skill( "Borrow Skill", 'IQ', 2, libAbrv+30 );
NewSpells.BorrowSkill.classes = { reg: true };
NewSpells.BorrowSkill.stats = { duration: '1 min', castcost: 4, maintaincost: 3, time: 3 };
NewPrerequisites.BorrowSkill_requires_LendSkill = { target: 'BorrowSkill', prereq: 'LendSkill' };
NewSpells.CompelTruth = new Skill( "Compel Truth", 'IQ', 2, libAbrv+28 );
NewSpells.CompelTruth.classes = { info: true, riq: true };
NewSpells.CompelTruth.stats = { duration: '5 min', castcost: 4, maintaincost: 2 };
NewPrerequisites.CompelTruth_requires_Magery2 = { target: 'CompelTruth', level: 2, category: 'ADS', prereq: 'Magery' };
NewPrerequisites.CompelTruth_requires_Truthsayer = { target: 'CompelTruth', prereq: 'Truthsayer' };
NewSpells.ControlPerson = new Skill( "Control Person", 'IQ', 2, libAbrv+29 );
NewSpells.ControlPerson.classes = { reg: true, riq: true };
NewSpells.ControlPerson.stats = { duration: '1 min', castcost: 6, maintaincost: 3, time: 10 };
NewPrerequisites.ControlPerson_requires_SoulRider_pgroup1 = { target: 'ControlPerson', prereq: 'SoulRider', pgroup: 1 };
NewPrerequisites.ControlPerson_requires_TelepathySpell_pgroup1 = { target: 'ControlPerson', prereq: 'TelepathySpell', pgroup: 1 };
NewSpells.ExchangeBodies = new Skill( "Exchange Bodies", 'IQ', 3, libAbrv+30 );
NewSpells.ExchangeBodies.classes = { reg: true, riq: true };
NewSpells.ExchangeBodies.stats = { duration: 'permanent', castcost: 120, time: '1 hr' };
NewPrerequisites.ExchangeBodies_requires_PermanentPossession = { target: 'ExchangeBodies', prereq: 'PermanentPossession' };
NewPrerequisites.ExchangeBodies_requires_SoulJar = { target: 'ExchangeBodies', prereq: 'SoulJar' };
NewSpells.Exorcism = new Skill( "Exorcism", 'IQ', 2, libAbrv+30 );
NewSpells.Exorcism.classes = { reg: true, spcl: true };
NewSpells.Exorcism.stats = { castcost: 10, time: 10 };
NewPrerequisites.Exorcism_requires_SoulRider_pgroup1  = { target: 'Exorcism', prereq: 'SoulRider',  pgroup: 1 };
NewPrerequisites.Exorcism_requires_Possession_pgroup1 = { target: 'Exorcism', prereq: 'Possession', pgroup: 1 };
NewPrerequisites.Exorcism_requires_Holystatus_pgroup1 = { target: 'Exorcism', prereq: 'Holystatus', pgroup: 1, category: 'ADS' };   // unusable; would handle by exempting from prereqs when spell is taken
NewSpells.GiftofLetters = new Skill( "Gift of Letters", 'IQ', 3, libAbrv+30 );
NewSpells.GiftofLetters.classes = { reg: true };
NewSpells.GiftofLetters.stats = { duration: '1 min', castcost: 4, maintaincost: 2 };
NewPrerequisites.GiftofLetters_requires_BorrowLanguage = { target: 'GiftofLetters', prereq: 'BorrowLanguage' };
NewPrerequisites.GiftofLetters_requires_3Languagesat10 = { target: 'GiftofLetters', number: 3, prereq: 'Languages', level: 10 };
NewSpells.GiftofTongues = new Skill( "Gift of Tongues", 'IQ', 3, libAbrv+30 );
NewSpells.GiftofTongues.classes = { reg: true };
NewSpells.GiftofTongues.stats = { duration: '1 min', castcost: 4, maintaincost: 2 };
NewPrerequisites.GiftofTongues_requires_BorrowLanguage = { target: 'GiftofTongues', prereq: 'BorrowLanguage' };
NewPrerequisites.GiftofTongues_requires_3Languagesat10 = { target: 'GiftofTongues', number: 3, prereq: 'Languages', level: 10 };
NewSpells.HideThoughts = new Skill( "Hide Thoughts", 'IQ', 2, libAbrv+29 );
NewSpells.HideThoughts.classes = { reg: true };
NewSpells.HideThoughts.stats = { duration: '10 min', castcost: 3, maintaincost: 1 };
NewPrerequisites.HideThoughts_requires_Truthsayer = { target: 'HideThoughts', prereq: 'Truthsayer' };
NewSpells.LendLanguage = new Skill( "Lend Language", 'IQ', 2, libAbrv+30 );
NewSpells.LendLanguage.classes = { reg: true };
NewSpells.LendLanguage.stats = { duration: '1 min', castcost: 3, maintaincost: 1, time: 3 };
NewPrerequisites.LendLanguage_requires_MindSending = { target: 'LendLanguage', prereq: 'MindSending' };
NewSpells.LendSkill = new Skill( "Lend Skill", 'IQ', 2, libAbrv+30 );
NewSpells.LendSkill.classes = { reg: true };
NewSpells.LendSkill.stats = { duration: '1 min', castcost: 3, maintaincost: 2, time: 3 };
NewPrerequisites.LendSkill_requires_MindSending = { target: 'LendSkill', prereq: 'MindSending' };
NewPrerequisites.LendSkill_requires_IQ12 = { target: 'LendSkill', category: 'stat', level: 12, prereq: 'IQ' };
NewSpells.MindReadingSpell = new Skill( "Mind-Reading", 'IQ', 2, libAbrv+28 );
NewSpells.MindReadingSpell.classes = { reg: true, riq: true };
NewSpells.MindReadingSpell.stats = { duration: '1 min', castcost: 4, maintaincost: 2, time: 10 };
NewPrerequisites.MindReadingSpell_requires_Truthsayer = { target: 'MindReadingSpell', prereq: 'Truthsayer' };
NewSpells.MindSearch = new Skill( "Mind-Search", 'IQ', 3, libAbrv+29 );
NewSpells.MindSearch.classes = { reg: true, riq: true };
NewSpells.MindSearch.stats = { duration: '1 min', castcost: 6, maintaincost: 3, time: '1 min' };
NewPrerequisites.MindSearch_requires_MindReadingSpell = { target: 'MindSearch', prereq: 'MindReadingSpell' };
NewSpells.MindSending = new Skill( "Mind-Sending", 'IQ', 2, libAbrv+29 );
NewSpells.MindSending.classes = { reg: true };
NewSpells.MindSending.stats = { duration: '1 min', castcost: 4, maintaincost: 4, time: 4 };
NewPrerequisites.MindSending_requires_MindReadingSpell = { target: 'MindSending', prereq: 'MindReadingSpell' };
NewSpells.PermanentPossession = new Skill( "Permanent Possession", 'IQ', 3, libAbrv+30 );
NewSpells.PermanentPossession.classes = { reg: true, riq: true };
NewSpells.PermanentPossession.stats = { duration: 'indefinite', castcost: 30, time: '5 min' };
NewPrerequisites.PermanentPossession_requires_Magery3 = { target: 'PermanentPossession', level: 3, category: 'ADS', prereq: 'Magery' };
NewPrerequisites.PermanentPossession_requires_Possession = { target: 'PermanentPossession', prereq: 'Possession' };
NewSpells.Persuasion = new Skill( "Persuasion", 'IQ', 2, libAbrv+29 );
NewSpells.Persuasion.classes = { reg: true, riq: true };
NewSpells.Persuasion.stats = { duration: '1 min', castcost: '2× Rxn+' };
NewPrerequisites.Persuasion_requires_SenseEmotion = { target: 'Persuasion', prereq: 'SenseEmotion' };
NewSpells.Possession = new Skill( "Possession", 'IQ', 3, libAbrv+30 );
NewSpells.Possession.classes = { reg: true, riq: true };
NewSpells.Possession.stats = { duration: '1 min', castcost: 10, maintaincost: 4, time: '1 min' };
NewPrerequisites.Possession_requires_Magery1 = { target: 'Possession', category: 'ADS', prereq: 'Magery', level: 1 };
NewPrerequisites.Possession_requires_ControlPerson_pgroup1   = { target: 'Possession', prereq: 'ControlPerson',   pgroup: 1 };
NewPrerequisites.Possession_requires_BeastPossession_pgroup1 = { target: 'Possession', prereq: 'BeastPossession', pgroup: 1 };
NewSpells.SenseEmotion = new Skill( "Sense Emotion", 'IQ', 2, libAbrv+28 );
NewSpells.SenseEmotion.classes = { reg: true };
NewSpells.SenseEmotion.stats = { castcost: 2 };
NewPrerequisites.SenseEmotion_requires_SenseFoes = { target: 'SenseEmotion', prereq: 'SenseFoes' };
NewSpells.SenseFoes = new Skill( "Sense Foes", 'IQ', 2, libAbrv+28 );
NewSpells.SenseFoes.classes = { info: true, area: true };
NewSpells.SenseFoes.stats = { castcost: 1 };
NewSpells.SenseLife = new Skill( "Sense Life", 'IQ', 2, libAbrv+28 );
NewSpells.SenseLife.classes = { info: true, area: true };
NewSpells.SenseLife.stats = { castcost: 0.5 };
NewSpells.SoulRider = new Skill( "Soul Rider", 'IQ', 2, libAbrv+29 );
NewSpells.SoulRider.classes = { reg: true, riq: true };
NewSpells.SoulRider.stats = { duration: '1 min', castcost: 5, maintaincost: 2, time: 3 };
NewPrerequisites.SoulRider_requires_MindReadingSpell = { target: 'SoulRider', prereq: 'MindReadingSpell' };
NewSpells.TelepathySpell = new Skill( "Telepathy", 'IQ', 3, libAbrv+29 );
NewSpells.TelepathySpell.classes = { reg: true };
NewSpells.TelepathySpell.stats = { duration: '1 min', castcost: 4, maintaincost: 4, time: 4 };
NewPrerequisites.TelepathySpell_requires_MindSending = { target: 'TelepathySpell', prereq: 'MindSending' };
NewSpells.Truthsayer = new Skill( "Truthsayer", 'IQ', 2, libAbrv+28 );
NewSpells.Truthsayer.classes = { info: true, riq: true };
NewSpells.Truthsayer.stats = { castcost: 2 };
NewPrerequisites.Truthsayer_requires_SenseEmotion = { target: 'Truthsayer', prereq: 'SenseEmotion' };

addToGroup("EnchantmentSpells",
['Enchant','Scroll','RemoveEnchantment','SuspendEnchantment','Power','Speed','Hex','LesserWish','Wish','GreatWish',
'Golem','Hideaway','Accuracy','Puissance','QuickDraw','DancingWeapon','LoyalSword','Cornucopia','Bane',
'Fortify','Deflect','Lighten','Name','Password','Limit','Link','StaffSpell','Powerstone','CrystalBall']);
NewSpells.Accuracy = new Skill( "Accuracy", 'IQ', 2, libAbrv+44 );
NewSpells.Accuracy.classes = { ench: true };
NewSpells.Accuracy.stats = { duration: 'permanent', time: '&mdash;', notes: 'See <i>Accuracy</i> (Magic 44).' };
NewPrerequisites.Accuracy_requires_5Air = { target: 'Accuracy', number: 5, prereq: 'Air' };
NewPrerequisites.Accuracy_requires_Enchant = { target: 'Accuracy', prereq: 'Enchant' };
NewSpells.Bane = new Skill( "Bane", 'IQ', 2, libAbrv+45 );
NewSpells.Bane.classes = { ench: true };
NewSpells.Bane.stats = { castcost: 100, notes: 'The caster must also possess some item or relic pertaining to the person, creature, race, etc. involved.' };
NewPrerequisites.Bane_requires_Enchant = { target: 'Bane', prereq: 'Enchant' };
NewSpells.Cornucopia = new Skill( "Cornucopia", 'IQ', 2, libAbrv+45 );
NewSpells.Cornucopia.classes = { ench: true };
NewSpells.Cornucopia.stats = { castcost: '50× $ value of missile' };
NewPrerequisites.Cornucopia_requires_Magery2 = { target: 'Cornucopia', level: 2, category: 'ADS', prereq: 'Magery' };
NewPrerequisites.Cornucopia_requires_2WeaponEnchantment = { target: 'Cornucopia', number: 2, prereq: 'WeaponEnchantment' };
NewSpells.CrystalBall = new Skill( "Crystal Ball", 'IQ', 2, libAbrv+47 );
NewSpells.CrystalBall.classes = { ench: true };
NewSpells.CrystalBall.stats = { castcost: 1000 };
NewPrerequisites.CrystalBall_requires_Divination = { target: 'CrystalBall', prereq: 'Divination' };
NewSpells.DancingWeapon = new Skill( "Dancing Weapon", 'IQ', 2, libAbrv+45 );
NewSpells.DancingWeapon.classes = { ench: true };
NewSpells.DancingWeapon.stats = { castcost: '1000/lb', notes: 'Double the cost to get a weapon with a Basic Speed of 6, or with skill of 18. Multiply cost by 4 to get a weapon with both advantages.' };
NewPrerequisites.DancingWeapon_requires_AirGolem = { target: 'DancingWeapon', prereq: 'AirGolem' };
NewSpells.Deflect = new Skill( "Deflect", 'IQ', 2, libAbrv+46 );
NewSpells.Deflect.classes = { ench: true };
NewSpells.Deflect.stats = { duration: 'permanent', castcost: 'See <i>Deflect</i> cost table (Magic p46).' };
NewPrerequisites.Deflect_requires_Enchant = { target: 'Deflect', prereq: 'Enchant' };
NewSpells.Enchant = new Skill( "Enchant", 'IQ', 3, libAbrv+42 );
NewSpells.Enchant.classes = { ench: true };
NewSpells.Enchant.stats = { duration: 'permanent', time: '&mdash;', notes: 'See <i>Enchant</i> (Magic p42).' };
NewPrerequisites.Enchant_requires_Magery2 = { target: 'Enchant', level: 2, category: 'ADS', prereq: 'Magery' };
NewPrerequisites.Enchant_requires_10othercolleges = { target: 'Enchant', number: 10, prereq: 'MagicColleges', meta: true };
NewSpells.Fortify = new Skill( "Fortify", 'IQ', 2, libAbrv+46 );
NewSpells.Fortify.classes = { ench: true };
NewSpells.Fortify.stats = { duration: 'permanent', castcost: 'See <i>Fortify</i> cost table (Magic p46).' };
NewPrerequisites.Fortify_requires_Enchant = { target: 'Fortify', prereq: 'Enchant' };
NewSpells.Golem = new Skill( "Golem", 'IQ', 3, libAbrv+44 );
NewSpells.Golem.classes = { ench: true };
NewSpells.Golem.stats = { castcost: 'See '+libAbrv+116, time: 'See '+libAbrv+116, notes: 'Unusual golem materials may require different prerequisite spells. See '+libAbrv+116 };
NewPrerequisites.Golem_requires_ShapeEarth = { target: 'Golem', prereq: 'ShapeEarth' };
NewPrerequisites.Golem_requires_Animation = { target: 'Golem', prereq: 'Animation' };
NewSpells.GreatWish = new Skill( "Great Wish", 'IQ', 3, libAbrv+44 );
NewSpells.GreatWish.classes = { ench: true };
NewSpells.GreatWish.stats = { castcost: 2000, notes: 'Requires combined DX and IQ of 30+ to cast.' };
NewPrerequisites.GreatWish_requires_Magery3 = { target: 'GreatWish', level: 3, category: 'ADS', prereq: 'Magery' };
NewPrerequisites.GreatWish_requires_Wish = { target: 'GreatWish', prereq: 'Wish' };
//NewPrerequisites.GreatWish_requires_DX+IQ30 = { target: 'GreatWish', category: 'stat', level: 30, prereq: 'DX+IQ' };
NewSpells.Hex = new Skill( "Hex", 'IQ', 2, libAbrv+43 );
NewSpells.Hex.classes = { ench: true };
NewSpells.Hex.stats = { castcost: 200 };
NewPrerequisites.Hex_requires_Enchant = { target: 'Hex', prereq: 'Enchant' };
NewSpells.Hideaway = new Skill( "Hideaway", 'IQ', 2, libAbrv+44 );
NewSpells.Hideaway.classes = { ench: true };
NewSpells.Hideaway.stats = { castcost: '50/lb capacity; 100 if does not count as encumbrance' };
NewPrerequisites.Hideaway_requires_CreateObject = { target: 'Hideaway', prereq: 'CreateObject' };
NewPrerequisites.Hideaway_requires_Lighten = { target: 'Hideaway', prereq: 'Lighten' };
NewSpells.LesserWish = new Skill( "Lesser Wish", 'IQ', 3, libAbrv+43 );
NewSpells.LesserWish.classes = { ench: true };
NewSpells.LesserWish.stats = { castcost: 180 };
NewPrerequisites.LesserWish_requires_Enchant = { target: 'LesserWish', prereq: 'Enchant' };
NewPrerequisites.LesserWish_requires_10colleges = { target: 'LesserWish', number: 10, prereq: 'MagicColleges', meta: true };    // redundant!
NewSpells.Lighten = new Skill( "Lighten", 'IQ', 2, libAbrv+46 );
NewSpells.Lighten.classes = { ench: true };
NewSpells.Lighten.stats = { duration: 'permanent', castcost: '100 to cut the item&rsquo;s weight by 25%; 500 to cut its weight in half.' };
NewPrerequisites.Lighten_requires_Enchant = { target: 'Lighten', prereq: 'Enchant' };
NewSpells.Limit = new Skill( "Limit", 'IQ', 2, libAbrv+46 );
NewSpells.Limit.classes = { ench: true };
NewSpells.Limit.stats = { castcost: 200 };
NewPrerequisites.Limit_requires_Enchant = { target: 'Limit', prereq: 'Enchant' };
// Link under Meta-Spells
NewSpells.Link = new Skill( "Link", 'IQ', 2, libAbrv+46 );
NewSpells.Link.classes = { ench: true };
NewPrerequisites.Link_requires_Delay = { target: 'Link', prereq: 'Delay' };
NewSpells.LoyalSword = new Skill( "Loyal Sword", 'IQ', 2, libAbrv+45 );
NewSpells.LoyalSword.classes = { ench: true };
NewSpells.LoyalSword.stats = { castcost: '750/lb' };
NewPrerequisites.LoyalSword_requires_Apportation = { target: 'LoyalSword', prereq: 'Apportation' };
NewSpells.Name = new Skill( "Name", 'IQ', 2, libAbrv+46 );
NewSpells.Name.classes = { ench: true };
NewSpells.Name.stats = { castcost: '400, or 200 if the name is written on the item.' };
NewPrerequisites.Name_requires_Enchant = { target: 'Name', prereq: 'Enchant' };
NewSpells.Password = new Skill( "Password", 'IQ', 2, libAbrv+46 );
NewSpells.Password.classes = { ench: true };
NewSpells.Password.stats = { castcost: '400, or 200 if the password is written on the item.' };
NewPrerequisites.Password_requires_Enchant = { target: 'Password', prereq: 'Enchant' };
NewSpells.Power = new Skill( "Power", 'IQ', 2, libAbrv+43 );
NewSpells.Power.classes = { ench: true };
NewSpells.Power.stats = { duration: 'permanent', castcost: 'See <i>Power</i> (Magic p43).' };
NewPrerequisites.Power_requires_RecoverStrength = { target: 'Power', prereq: 'RecoverStrength' };
NewSpells.Powerstone = new Skill( "Powerstone", 'IQ', 2, libAbrv+47 );
NewSpells.Powerstone.classes = { ench: true };
NewSpells.Powerstone.stats = { castcost: 20 };
NewPrerequisites.Powerstone_requires_Enchant = { target: 'Powerstone', prereq: 'Enchant' };
NewSpells.Puissance = new Skill( "Puissance", 'IQ', 2, libAbrv+44 );
NewSpells.Puissance.classes = { ench: true };
NewSpells.Puissance.stats = { duration: 'permanent', time: '&mdash;', notes: 'See <i>Puissance</i> (Magic 44).' };
NewPrerequisites.Puissance_requires_5Earth = { target: 'Puissance', number: 5, prereq: 'Earth' };
NewSpells.QuickDraw = new Skill( "Quick-Draw", 'IQ', 2, libAbrv+44 );
NewSpells.QuickDraw.classes = { ench: true };
NewSpells.QuickDraw.stats = { castcost: '300/lb, 2000 for quiver/bag' };
NewPrerequisites.QuickDraw_requires_Apportation = { target: 'QuickDraw', prereq: 'Apportation' };
NewSpells.RemoveEnchantment = new Skill( "Remove Enchantment", 'IQ', 2, libAbrv+43 );
NewSpells.RemoveEnchantment.classes = { ench: true };
NewSpells.RemoveEnchantment.stats = { duration: 'permanent', time: '&mdash;', castcost: '100 or 1/10 of the cost to place the enchantment originally, whichever is more.', notes: 'cumulative: -3 to remove unknown spell, -3 to remove unlearned spell, -3 for each other spell on item' };
NewPrerequisites.RemoveEnchantment_requires_Enchant = { target: 'RemoveEnchantment', prereq: 'Enchant' };
NewSpells.Scroll = new Skill( "Scroll", 'IQ', 2, libAbrv+42 );
NewSpells.Scroll.classes = { ench: true };
NewSpells.Scroll.stats = { duration: 'scroll lasts indefinitely', time: '&mdash;', notes: 'See <i>Scroll</i> (Magic p42).' };
NewPrerequisites.Scroll_requires_Literacy = { target: 'Scroll', category: 'ADS', prereq: 'Literacy' };
NewPrerequisites.Scroll_requires_Magery1  = { target: 'Scroll', category: 'ADS', prereq: 'Magery', level: 1 };
NewSpells.Speed = new Skill( "Speed", 'IQ', 2, libAbrv+43 );
NewSpells.Speed.classes = { ench: true };
NewSpells.Speed.stats = { duration: 'permanent', castcost: 'See <i>Speed</i> (Magic p43).' };
NewPrerequisites.Speed_requires_Haste = { target: 'Speed', prereq: 'Haste' };
NewSpells.StaffSpell = new Skill( "Staff", 'IQ', 2, libAbrv+47 );
NewSpells.StaffSpell.classes = { ench: true };
NewSpells.StaffSpell.stats = { castcost: 30, duration: 'permanent' };
NewPrerequisites.StaffSpell_requires_Enchant = { target: 'StaffSpell', prereq: 'Enchant' };
NewSpells.SuspendEnchantment = new Skill( "Suspend Enchantment", 'IQ', 2, libAbrv+43 );
NewSpells.SuspendEnchantment.classes = { ench: true };
NewSpells.SuspendEnchantment.stats = { duration: '1 hr', castcost: '25 or 1/100 of the cost to place the enchantment originally, whichever is more.', maintaincost: '½ C2C' };
NewPrerequisites.SuspendEnchantment_requires_Enchant = { target: 'SuspendEnchantment', prereq: 'Enchant' };
NewSpells.Wish = new Skill( "Wish", 'IQ', 3, libAbrv+43 );
NewSpells.Wish.classes = { ench: true };
NewSpells.Wish.stats = { castcost: 250 };
NewPrerequisites.Wish_requires_LesserWish = { target: 'Wish', prereq: 'LesserWish' };
NewPrerequisites.Wish_requires_15colleges = { target: 'Wish', number: 15, prereq: 'MagicColleges', meta: true };
addToGroup("WeaponEnchantment",
['Accuracy','Puissance','QuickDraw','DancingWeapon','LoyalSword','Power','Speed','Cornucopia','Bane']);

addToGroup("FoodSpells",
['TestFood','PreserveFood','SeekFood','Decay','PurifyFood','PoisonFood','Cook','CreateFood','Ferment',
'WatertoWine','Distill','Banquet','MonksBanquet']);
NewSpells.Banquet = new Skill( "Banquet", 'IQ', 2, libAbrv+49 );
NewSpells.Banquet.classes = { reg: true };
NewSpells.Banquet.stats = { duration: '1 day', castcost: "2/meal" };
NewPrerequisites.Banquet_requires_Magery1 = { target: 'Banquet', category: 'ADS', prereq: 'Magery', level: 1 };
NewPrerequisites.Banquet_requires_Cook = { target: 'Banquet', prereq: 'Cook' };
NewPrerequisites.Banquet_requires_Foolishness = { target: 'Banquet', prereq: 'Foolishness' };
NewSpells.Cook = new Skill( "Cook", 'IQ', 2, libAbrv+48 );
NewSpells.Cook.classes = { reg: true };
NewSpells.Cook.stats = { castcost: "1/meal", time: 5 };
NewPrerequisites.Cook_requires_TestFood = { target: 'Cook', prereq: 'TestFood' };
NewPrerequisites.Cook_requires_CreateFire = { target: 'Cook', prereq: 'CreateFire' };
NewSpells.CreateFood = new Skill( "Create Food", 'IQ', 2, libAbrv+48 );
NewSpells.CreateFood.classes = { reg: true };
NewSpells.CreateFood.stats = { duration: 'permanent', castcost: "2-3/meal", time: 30 };
NewPrerequisites.CreateFood_requires_Cook = { target: 'CreateFood', prereq: 'Cook' };
NewPrerequisites.CreateFood_requires_SeekFood = { target: 'CreateFood', prereq: 'SeekFood' };
NewSpells.Decay = new Skill( "Decay", 'IQ', 2, libAbrv+48 );
NewSpells.Decay.classes = { reg: true };
NewSpells.Decay.stats = { castcost: "1/meal" };
NewPrerequisites.Decay_requires_TestFood = { target: 'Decay', prereq: 'TestFood' };
NewSpells.Distill = new Skill( "Distill", 'IQ', 2, libAbrv+49 );
NewSpells.Distill.classes = { reg: true };
NewSpells.Distill.stats = { duration: 'permanent', castcost: "1/qt", time: 10 };
NewPrerequisites.Distill_requires_Ferment = { target: 'Distill', prereq: 'Ferment' };
NewPrerequisites.Distill_requires_DestroyWater = { target: 'Distill', prereq: 'DestroyWater' };
NewSpells.Ferment = new Skill( "Ferment", 'IQ', 2, libAbrv+48 );
NewSpells.Ferment.classes = { reg: true };
NewSpells.Ferment.stats = { duration: "1 hr (1 min for bread)", castcost: "1/pt or 1/loaf", time: 10 };
NewPrerequisites.Ferment_requires_Decay = { target: 'Ferment', prereq: 'Decay' };
NewSpells.MonksBanquet = new Skill( "Monk's Banquet", 'IQ', 2, libAbrv+49 );
NewSpells.MonksBanquet.classes = { reg: true };
NewSpells.MonksBanquet.stats = { duration: '24 hrs', castcost: 6 };
NewPrerequisites.MonksBanquet_requires_Banquet = { target: 'MonksBanquet', prereq: 'Banquet' };
NewPrerequisites.MonksBanquet_requires_ResistPain = { target: 'MonksBanquet', prereq: 'ResistPain' };
NewSpells.PoisonFood = new Skill( "Poison Food", 'IQ', 2, libAbrv+48 );
NewSpells.PoisonFood.classes = { reg: true };
NewSpells.PoisonFood.stats = { castcost: "3/meal" };
NewPrerequisites.PoisonFood_requires_PurifyFood = { target: 'PoisonFood', prereq: 'PurifyFood' };
NewPrerequisites.PoisonFood_requires_Decay = { target: 'PoisonFood', prereq: 'Decay' };
NewSpells.PreserveFood = new Skill( "Preserve Food", 'IQ', 2, libAbrv+48 );
NewSpells.PreserveFood.classes = { reg: true };
NewSpells.PreserveFood.stats = { duration: '1 wk', castcost: "2/lb", maintaincost: "1/lb" };
NewPrerequisites.PreserveFood_requires_Sterilize = { target: 'PreserveFood', prereq: 'Sterilize' };
NewPrerequisites.PreserveFood_requires_TestFood = { target: 'PreserveFood', prereq: 'TestFood' };
NewSpells.PurifyFood = new Skill( "Purify Food", 'IQ', 2, libAbrv+48 );
NewSpells.PurifyFood.classes = { reg: true };
NewSpells.PurifyFood.stats = { castcost: "1/lb" };
NewPrerequisites.PurifyFood_requires_PreserveFood_pgroup1 = { target: 'PurifyFood', prereq: 'PreserveFood', pgroup: 1 };
NewPrerequisites.PurifyFood_requires_Decay_pgroup1        = { target: 'PurifyFood', prereq: 'Decay', pgroup: 1 };
NewSpells.SeekFood = new Skill( "Seek Food", 'IQ', 2, libAbrv+48 );
NewSpells.SeekFood.classes = { info: true };
NewSpells.SeekFood.stats = { castcost: 2 };
NewSpells.TestFood = new Skill( "Test Food", 'IQ', 2, libAbrv+48 );
NewSpells.TestFood.classes = { info: true };
NewSpells.TestFood.stats = { castcost: "1/meal, or 3 for 1-yd radius area" };
NewSpells.WatertoWine = new Skill( "Water to Wine", 'IQ', 2, libAbrv+49 );
NewSpells.WatertoWine.classes = { reg: true };
NewSpells.WatertoWine.stats = { duration: 'permanent', castcost: "4/gal", time: 10, notes: "½ cost for beer, ×2 cost for spirits" };
NewPrerequisites.WatertoWine_requires_PurifyWater = { target: 'WatertoWine', prereq: 'PurifyWater' };
NewPrerequisites.WatertoWine_requires_Ferment = { target: 'WatertoWine', prereq: 'Ferment' };

addToGroup("HealingSpells",
['LendStrength','LendHealth','RecoverStrength','Awaken','ShareStrength','MinorHealing','MajorHealing',
'Sterilize','SuspendedAnimation','CureDisease','NeutralizePoison','Restoration','InstantRestoration',
'Regeneration','InstantRegeneration','HaltAging','Youth','Resurrection']);
NewSpells.Awaken = new Skill( "Awaken", 'IQ', 2, libAbrv+49 );
NewSpells.Awaken.classes = { area: true };
NewSpells.Awaken.stats = { castcost: 1 };
NewPrerequisites.Awaken_requires_LendHealth = { target: 'Awaken', prereq: 'LendHealth' };
NewSpells.CureDisease = new Skill( "Cure Disease", 'IQ', 2, libAbrv+50 );
NewSpells.CureDisease.classes = { reg: true };
NewSpells.CureDisease.stats = { castcost: 4, time: '10 min', notes: 'One try.' };
NewPrerequisites.CureDisease_requires_Sterilize = { target: 'CureDisease', prereq: 'Sterilize' };
NewPrerequisites.CureDisease_requires_MajorHealing = { target: 'CureDisease', prereq: 'MajorHealing' };
NewSpells.HaltAging = new Skill( "Halt Aging", 'IQ', 3, libAbrv+51 );
NewSpells.HaltAging.classes = { reg: true };
NewSpells.HaltAging.stats = { duration: '5d days', castcost: 20, notes: 'One try per week. Cannot be cast again until the first spell wears off.' };
NewPrerequisites.HaltAging_requires_Magery2 = { target: 'HaltAging', level: 2, category: 'ADS', prereq: 'Magery' };
NewPrerequisites.HaltAging_requires_6Healing = { target: 'HaltAging', number: 6, prereq: 'Healing' };
NewSpells.InstantRegeneration = new Skill( "Instant Regeneration", 'IQ', 3, libAbrv+51 );
NewSpells.InstantRegeneration.classes = { reg: true };
NewSpells.InstantRegeneration.stats = { duration: 'permanent', castcost: 80, time: '1 min', notes: 'One try.' };
NewPrerequisites.InstantRegeneration_requires_Magery3 = { target: 'InstantRegeneration', level: 3, category: 'ADS', prereq: 'Magery' };
NewPrerequisites.InstantRegeneration_requires_Regeneration = { target: 'InstantRegeneration', prereq: 'Regeneration' };
NewSpells.InstantRestoration = new Skill( "Instant Restoration", 'IQ', 3, libAbrv+51 );
NewSpells.InstantRestoration.classes = { reg: true };
NewSpells.InstantRestoration.stats = { duration: 'permanent', castcost: 50, time: '1 min', notes: 'One try.' };
NewPrerequisites.InstantRestoration_requires_Magery2 = { target: 'InstantRestoration', level: 2, category: 'ADS', prereq: 'Magery' };
NewPrerequisites.InstantRestoration_requires_Restoration = { target: 'InstantRestoration', prereq: 'Restoration' };
NewSpells.LendHealth = new Skill( "Lend Health", 'IQ', 2, libAbrv+53 );
NewSpells.LendHealth.classes = { reg: true };
NewSpells.LendHealth.stats = { duration: '1 hr', castcost: '1/HT loaned' };
NewPrerequisites.LendHealth_requires_LendStrength = { target: 'LendHealth', prereq: 'LendStrength' };
NewSpells.LendStrength = new Skill( "Lend Strength", 'IQ', 2, libAbrv+53 );
NewSpells.LendStrength.classes = { reg: true };
NewSpells.LendStrength.stats = { castcost: '1/FP restored' };
NewPrerequisites.LendStrength_requires_Magery_pgroup1  = { target: 'LendStrength', category: 'ADS', prereq: 'Magery',  pgroup: 1 };
NewPrerequisites.LendStrength_requires_Empathy_pgroup1 = { target: 'LendStrength', category: 'ADS', prereq: 'Empathy', pgroup: 1 };
NewSpells.MajorHealing = new Skill( "Major Healing", 'IQ', 3, libAbrv+50 );
NewSpells.MajorHealing.classes = { reg: true };
NewSpells.MajorHealing.stats = { castcost: '1-4', notes: 'restores 2 HT/pt spent' };
NewPrerequisites.MajorHealing_requires_Magery1 = { target: 'MajorHealing', category: 'ADS', prereq: 'Magery', level: 1 };
NewPrerequisites.MajorHealing_requires_MinorHealing = { target: 'MajorHealing', prereq: 'MinorHealing' };
NewSpells.MinorHealing = new Skill( "Minor Healing", 'IQ', 2, libAbrv+50 );
NewSpells.MinorHealing.classes = { reg: true };
NewSpells.MinorHealing.stats = { castcost: '1-3', notes: 'restores 1 HT/pt spent' };
NewPrerequisites.MinorHealing_requires_LendHealth = { target: 'MinorHealing', prereq: 'LendHealth' };
NewSpells.NeutralizePoison = new Skill( "Neutralize Poison", 'IQ', 2, libAbrv+50 );
NewSpells.NeutralizePoison.classes = { reg: true };
NewSpells.NeutralizePoison.stats = { castcost: 5, time: 30, notes: 'One try. -5 to cast unless successful Poisons roll made first.' };
NewPrerequisites.NeutralizePoison_requires_CureDisease_pgroup1 = { target: 'NeutralizePoison', prereq: 'CureDisease', pgroup: 1 };
NewPrerequisites.NeutralizePoison_requires_Magery3_pgroup1 = { target: 'NeutralizePoison', level: 3, category: ' ADS', prereq: 'Magery', pgroup: 1 };
NewPrerequisites.NeutralizePoison_requires_CureDisease_pgroup2 = { target: 'NeutralizePoison', prereq: 'CureDisease', pgroup: 2 };
NewPrerequisites.NeutralizePoison_requires_TestFood_pgroup2 = { target: 'NeutralizePoison', prereq: 'TestFood', pgroup: 2 };
NewSpells.RecoverStrength = new Skill( "Recover Strength", 'IQ', 2, libAbrv+53 );
NewSpells.RecoverStrength.classes = { spcl: true };
NewSpells.RecoverStrength.stats = { castcost: 0, duration: '&mdash;', notes: 'speeds Fatigue recovery; see B162' };
NewPrerequisites.RecoverStrength_requires_Magery1 = { target: 'RecoverStrength', category: 'ADS', prereq: 'Magery', level: 1 };
NewPrerequisites.RecoverStrength_requires_LendStrength = { target: 'RecoverStrength', prereq: 'LendStrength' };
NewSpells.Regeneration = new Skill( "Regeneration", 'IQ', 3, libAbrv+51 );
NewSpells.Regeneration.classes = { reg: true };
NewSpells.Regeneration.stats = { duration: 'permanent', castcost: 20, time: '1 min', notes: 'One try.  1 month before the process of regeneration is complete. The regenerating part may not be used at all until the month has passed.' };
NewPrerequisites.Regeneration_requires_Magery2 = { target: 'Regeneration', level: 2, category: 'ADS', prereq: 'Magery' };
NewPrerequisites.Regeneration_requires_Restoration = { target: 'Regeneration', prereq: 'Restoration' };
NewSpells.Restoration = new Skill( "Restoration", 'IQ', 3, libAbrv+51 );
NewSpells.Restoration.classes = { reg: true };
NewSpells.Restoration.stats = { duration: 'permanent', castcost: 15, time: '1 min', notes: 'One try.  1 month before the process of restoration is complete. The part may not be used at all until the month has passed; it simply won&rsquo;t work, even though it may appear to be healthy.' };
NewPrerequisites.Restoration_requires_MajorHealing = { target: 'Restoration', prereq: 'MajorHealing' };
NewSpells.Resurrection = new Skill( "Resurrection", 'IQ', 3, libAbrv+51 );
NewSpells.Resurrection.classes = { reg: true };
NewSpells.Resurrection.stats = { castcost: 300, time: '2 hrs', notes: 'One try.' };
NewPrerequisites.Resurrection_requires_InstantRegeneration = { target: 'Resurrection', prereq: 'InstantRegeneration' };
NewPrerequisites.Resurrection_requires_SummonSpirit        = { target: 'Resurrection', prereq: 'SummonSpirit' };
NewSpells.ShareStrength = new Skill( "Share Strength", 'IQ', 2, libAbrv+50 );
NewSpells.ShareStrength.classes = { reg: true };
NewSpells.ShareStrength.stats = { duration: 1, castcost: '2× ST shared' };
NewPrerequisites.ShareStrength_requires_LendStrength = { target: 'ShareStrength', prereq: 'LendStrength' };
NewSpells.Sterilize = new Skill( "Sterilize", 'IQ', 2, libAbrv+50 );
NewSpells.Sterilize.classes = { area: true };
NewSpells.Sterilize.stats = { castcost: 3, time: 2, notes: "2 for a fist-sized object or flat area up to 30 in²" };
NewPrerequisites.Sterilize_requires_Decay_pgroup1         = { target: 'Sterilize', prereq: 'Decay', pgroup: 1 };
NewPrerequisites.Sterilize_requires_InsectControl_pgroup1 = { target: 'Sterilize', prereq: 'InsectControl', pgroup: 1 };
NewSpells.SuspendedAnimation = new Skill( "Suspended Animation", 'IQ', 2, libAbrv+50 );
NewSpells.SuspendedAnimation.classes = { reg: true, rht: true };
NewSpells.SuspendedAnimation.stats = { castcost: 6, time: 30 };
NewPrerequisites.SuspendedAnimation_requires_Sleep = { target: 'SuspendedAnimation', prereq: 'Sleep' };
NewPrerequisites.SuspendedAnimation_requires_4Healing = { target: 'SuspendedAnimation', number: 4, prereq: 'Healing' };
NewSpells.Youth = new Skill( "Youth", 'IQ', 3, libAbrv+51 );
NewSpells.Youth.classes = { reg: true };
NewSpells.Youth.stats = { duration: 'Subject starts aging again immediately.', castcost: 100, notes: "One try per month. Removes 1d months from subject&rsquo;s age." };
NewPrerequisites.Youth_requires_Magery3 = { target: 'Youth', level: 3, category: 'ADS', prereq: 'Magery' };
NewPrerequisites.Youth_requires_HaltAging = { target: 'Youth', prereq: 'HaltAging' };

addToGroup("IllusionCreationSpells",
['SimpleIllusion','ComplexIllusion','PerfectIllusion','IllusionShell','IllusionDisguise','ControlIllusion',
'DispelIllusion','CreateObject','CreateAnimal','CreateServant','CreateWarrior','ControlCreation',
'DispelCreation','KnowIllusion','Independence']);
NewSpells.ComplexIllusion = new Skill( "Complex Illusion", 'IQ', 2, libAbrv+51 );
NewSpells.ComplexIllusion.classes = { area: true };
NewSpells.ComplexIllusion.stats = { castcost: 2, maintaincost: "½ C2C", duration: "1 min" };
NewPrerequisites.ComplexIllusion_requires_Sound = { target: 'ComplexIllusion', prereq: 'Sound' };
NewPrerequisites.ComplexIllusion_requires_SimpleIllusion = { target: 'ComplexIllusion', prereq: 'SimpleIllusion' };
NewSpells.ControlCreation = new Skill( "Control Creation", 'IQ', 2, libAbrv+52 );
NewSpells.ControlCreation.classes = { reg: true, rsp: true };
NewSpells.ControlCreation.stats = { castcost: 1, maintaincost: "as for controlled illusion", time: 2, notes: 'resisted by subject spell' };
NewPrerequisites.ControlCreation_requires_CreateAnimal_pgroup1  = { target: 'ControlCreation', prereq: 'CreateAnimal',  pgroup: 1 };
NewPrerequisites.ControlCreation_requires_CreateServant_pgroup1 = { target: 'ControlCreation', prereq: 'CreateServant', pgroup: 1 };
NewSpells.ControlIllusion = new Skill( "Control Illusion", 'IQ', 2, libAbrv+52 );
NewSpells.ControlIllusion.classes = { reg: true, rsp: true };
NewSpells.ControlIllusion.stats = { castcost: 1, maintaincost: "as for controlled illusion", time: 2, notes: 'resisted by subject spell' };
NewPrerequisites.ControlIllusion_requires_PerfectIllusion = { target: 'ControlIllusion', prereq: 'PerfectIllusion' };
NewSpells.CreateAnimal = new Skill( "Create Animal", 'IQ', 2, libAbrv+52 );
NewSpells.CreateAnimal.classes = { reg: true };
NewSpells.CreateAnimal.stats = { duration: "1 min", castcost: '2 per 100lbs', maintaincost: '½ C2C', time: 'same as cost' };
NewPrerequisites.CreateAnimal_requires_CreateWater = { target: 'CreateAnimal', prereq: 'CreateWater' };
NewPrerequisites.CreateAnimal_requires_CreateObject = { target: 'CreateAnimal', prereq: 'CreateObject' };
NewPrerequisites.CreateAnimal_requires_IQ = { target: 'CreateAnimal', category: 'stat', level: 13, prereq: 'IQ' };
NewSpells.CreateObject = new Skill( "Create Object", 'IQ', 3, libAbrv+52 );
NewSpells.CreateObject.classes = { reg: true };
NewSpells.CreateObject.stats = { duration: 'while (almost) touching sentient being', castcost: '2 per 5 lbs created', time: 'Equal to cost, in seconds.' };
NewPrerequisites.CreateObject_requires_Magery2 = { target: 'CreateObject', level: 2, category: 'ADS', prereq: 'Magery' };
NewPrerequisites.CreateObject_requires_CreateEarth = { target: 'CreateObject', prereq: 'CreateEarth' };
NewPrerequisites.CreateObject_requires_PerfectIllusion = { target: 'CreateObject', prereq: 'PerfectIllusion' };
NewSpells.CreateServant = new Skill( "Create Servant", 'IQ', 2, libAbrv+52 );
NewSpells.CreateServant.classes = { reg: true };
NewSpells.CreateServant.stats = { duration: "1 min", castcost: 3, maintaincost: 1, time: 3, notes: 'For a skilled servitor, 4 to cast; 2 to maintain. For a Brute, 6 to cast; 2 to maintain.' };
NewPrerequisites.CreateServant_requires_Magery3 = { target: 'CreateServant', level: 3, category: 'ADS', prereq: 'Magery' };
NewPrerequisites.CreateServant_requires_IQ = { target: 'CreateServant', category: 'stat', level: 13, prereq: 'IQ' };
NewPrerequisites.CreateServant_requires_CreateObject = { target: 'CreateServant', prereq: 'CreateObject' };
NewSpells.CreateWarrior = new Skill( "Create Warrior", 'IQ', 2, libAbrv+52 );
NewSpells.CreateWarrior.classes = { reg: true };
NewSpells.CreateWarrior.stats = { duration: "1 min", castcost: 4, maintaincost: 4, time: 4, notes: 'For a Brute Warrior (ST 16), 6 to cast; 6 to maintain.' };
NewPrerequisites.CreateWarrior_requires_CreateServant = { target: 'CreateWarrior', prereq: 'CreateServant' };
NewSpells.DispelCreation = new Skill( "Dispel Creation", 'IQ', 2, libAbrv+53 );
NewSpells.DispelCreation.classes = { reg: true };
NewSpells.DispelCreation.stats = { castcost: '1 to dispel a nonliving subject, or 3 to dispel a living creation.', notes: 'resisted by subject spell' };
NewPrerequisites.DispelCreation_requires_ControlCreation = { target: 'DispelCreation', prereq: 'ControlCreation' };
NewSpells.DispelIllusion = new Skill( "Dispel Illusion", 'IQ', 2, libAbrv+52 );
NewSpells.DispelIllusion.classes = { reg: true, rsp: true };
NewSpells.DispelIllusion.stats = { castcost: 1, notes: 'resisted by subject spell' };
NewPrerequisites.DispelIllusion_requires_ControlIllusion = { target: 'DispelIllusion', prereq: 'ControlIllusion' };
NewSpells.IllusionDisguise = new Skill( "Illusion Disguise", 'IQ', 2, libAbrv+52 );
NewSpells.IllusionDisguise.classes = { reg: true };
NewSpells.IllusionDisguise.stats = { castcost: 3, duration: "same as target illusion" };
NewPrerequisites.IllusionDisguise_requires_SimpleIllusion = { target: 'IllusionDisguise', prereq: 'SimpleIllusion' };
NewSpells.IllusionShell = new Skill( "Illusion Shell", 'IQ', 2, libAbrv+51 );
NewSpells.IllusionShell.classes = { reg: true };
NewSpells.IllusionShell.stats = { castcost: '1 for hand-held objects, 2/hex for larger', maintaincost: "½ C2C", duration: "1 min" };
NewPrerequisites.IllusionShell_requires_SimpleIllusion = { target: 'IllusionShell', prereq: 'SimpleIllusion' };
NewSpells.Independence = new Skill( "Independence", 'IQ', 2, libAbrv+53 );
NewSpells.Independence.classes = { area: true };
NewSpells.Independence.stats = { castcost: 2, duration: "same as target illusion/creation", time: 'at least 5 seconds; equal to time to give instructions' };
NewPrerequisites.Independence_requires_SimpleIllusion = { target: 'Independence', prereq: 'SimpleIllusion' };
NewSpells.KnowIllusion = new Skill( "Know Illusion", 'IQ', 2, libAbrv+53 );
NewSpells.KnowIllusion.classes = { info: true };
NewSpells.KnowIllusion.stats = { castcost: 2 };
NewPrerequisites.KnowIllusion_requires_SimpleIllusion = { target: 'KnowIllusion', prereq: 'SimpleIllusion' };
NewSpells.PerfectIllusion = new Skill( "Perfect Illusion", 'IQ', 2, libAbrv+51 );
NewSpells.PerfectIllusion.classes = { area: true };
NewSpells.PerfectIllusion.stats = { castcost: 3, maintaincost: "½ C2C", duration: "1 min", notes: 'Double cost to affect sense of touch as well.' };
NewPrerequisites.PerfectIllusion_requires_Magery1 = { target: 'PerfectIllusion', category: 'ADS', prereq: 'Magery', level: 1 };
NewPrerequisites.PerfectIllusion_requires_ComplexIllusion = { target: 'PerfectIllusion', prereq: 'ComplexIllusion' };
NewSpells.SimpleIllusion = new Skill( "Simple Illusion", 'IQ', 2, libAbrv+51 );
NewSpells.SimpleIllusion.classes = { area: true };
NewSpells.SimpleIllusion.stats = { castcost: 1, maintaincost: "½ C2C", duration: "1 min" };
NewPrerequisites.SimpleIllusion_requires_IQ = { target: 'SimpleIllusion', category: 'stat', level: 11, prereq: 'IQ' };

addToGroup("KnowledgeSpells",
['TellTime','Alarm','FindDirection','DetectMagic','Aura','Measurement','Seeker','Trace',
'Pathfinder','HistorySpell','AncientHistory','Divination','SeeSecrets','WizardEye','InvisibleWizardEye',
'MageSight','MageSense','IdentifySpell','AnalyzeMagic','EarthVision','WaterVision','IceVision',
'GlassWall','FarHearing']);
NewSpells.Alarm = new Skill( "Alarm", 'IQ', 2, libAbrv+53 );
NewSpells.Alarm.classes = { reg: true };
NewSpells.Alarm.stats = { duration: '1 week', castcost: 1 };
NewPrerequisites.Alarm_requires_TellTime = { target: 'Alarm', prereq: 'TellTime' };
NewSpells.AnalyzeMagic = new Skill( "Analyze Magic", 'IQ', 2, libAbrv+55 );
NewSpells.AnalyzeMagic.classes = { info: true, rsp: true };
NewSpells.AnalyzeMagic.stats = { castcost: 8, time: '1 hr', notes: 'resisted by spells that conceal magic' };
NewPrerequisites.AnalyzeMagic_requires_IdentifySpell = { target: 'AnalyzeMagic', prereq: 'IdentifySpell' };
NewSpells.AncientHistory = new Skill( "Ancient History", 'IQ', 2, libAbrv+54 );
NewSpells.AncientHistory.classes = { info: true };
NewSpells.AncientHistory.stats = { castcost: "5 for 10 years; 8 for 100 years; 10 for 1,000 years", time: "1 minute per energy to cast" };
NewPrerequisites.AncientHistory_requires_HistorySpell = { target: 'AncientHistory', targetCat: 'spell', prereq: 'HistorySpell' };
NewSpells.Aura = new Skill( "Aura", 'IQ', 2, libAbrv+53 );
NewSpells.Aura.classes = { info: true };
NewSpells.Aura.stats = { castcost: 3 };
NewPrerequisites.Aura_requires_DetectMagic = { target: 'Aura', prereq: 'DetectMagic' };
NewSpells.DetectMagic = new Skill( "Detect Magic", 'IQ', 2, libAbrv+53 );
NewSpells.DetectMagic.classes = { reg: true };
NewSpells.DetectMagic.stats = { castcost: 2, time: 5 };
NewPrerequisites.DetectMagic_requires_Magery1 = { target: 'DetectMagic', category: 'ADS', prereq: 'Magery', level: 1 };
NewSpells.Divination = new Skill( "Divination", 'IQ', 2, libAbrv+55 );
NewSpells.Divination.specRequiredList = [];
NewSpells.Divination.classes = { info: true };
NewSpells.Divination.stats = { castcost: 10, time: '1 hour, usually', notes: "See <i>Divination</i>, Magic p55. Long-distance and Time mods apply, also -4 for second attempt, -8 for third, <i>etc</i>." };
NewPrerequisites.Divination_requires_HistorySpell = { target: 'Divination', targetCat: 'spell', prereq: 'HistorySpell' };
NewPrerequisites.Divination_Astrology_requires_10Air = { target: 'Divination', targetSpec: 'Astrology', prereq: 'Air', number: 10 };
NewPrerequisites.Divination_Cartomancy_requires_3Air   = { target: 'Divination', targetSpec: 'Cartomancy', prereq: 'Air',   number: 3 };
NewPrerequisites.Divination_Cartomancy_requires_3Fire  = { target: 'Divination', targetSpec: 'Cartomancy', prereq: 'Fire',  number: 3 };
NewPrerequisites.Divination_Cartomancy_requires_3Earth = { target: 'Divination', targetSpec: 'Cartomancy', prereq: 'Earth', number: 3 };
NewPrerequisites.Divination_Cartomancy_requires_3Water = { target: 'Divination', targetSpec: 'Cartomancy', prereq: 'Water', number: 3 };
NewPrerequisites.Divination_Crystalgazing_requires_5Earth = { target: 'Divination', targetSpec: 'Crystalgazing', prereq: 'Earth', number: 5 };
NewPrerequisites.Divination_Crystalgazing_requires_5Water = { target: 'Divination', targetSpec: 'Crystalgazing', prereq: 'Water', number: 5 };
NewPrerequisites.Divination_Dactylomancy_requires_3Air   = { target: 'Divination', targetSpec: 'Dactylomancy', prereq: 'Air',   number: 3 };
NewPrerequisites.Divination_Dactylomancy_requires_3Fire  = { target: 'Divination', targetSpec: 'Dactylomancy', prereq: 'Fire',  number: 3 };
NewPrerequisites.Divination_Dactylomancy_requires_3Earth = { target: 'Divination', targetSpec: 'Dactylomancy', prereq: 'Earth', number: 3 };
NewPrerequisites.Divination_Dactylomancy_requires_3Water = { target: 'Divination', targetSpec: 'Dactylomancy', prereq: 'Water', number: 3 };
NewPrerequisites.Divination_Haruspication_requires_10Earth = { target: 'Divination', targetSpec: 'Haruspication', prereq: 'Earth', number: 10 };
NewPrerequisites.Divination_Molybdomancy_requires_5Fire  = { target: 'Divination', targetSpec: 'Molybdomancy', prereq: 'Fire',  number: 5 };
NewPrerequisites.Divination_Molybdomancy_requires_5Water = { target: 'Divination', targetSpec: 'Molybdomancy', prereq: 'Water', number: 5 };
NewPrerequisites.Divination_Oneiromancy_requires_5Air   = { target: 'Divination', targetSpec: 'Oneiromancy', prereq: 'Air',   number: 5 };
NewPrerequisites.Divination_Oneiromancy_requires_5Water = { target: 'Divination', targetSpec: 'Oneiromancy', prereq: 'Water', number: 5 };
NewPrerequisites.Divination_Pyromancy_requires_10Fire = { target: 'Divination', targetSpec: 'Pyromancy', prereq: 'Fire', number: 10 };
NewPrerequisites.Divination_Runecasting_requires_Magery1    = { target: 'Divination', targetSpec: 'Runecasting', prereq: 'Magery',   level: 1 };
NewPrerequisites.Divination_Runecasting_requires_RuneLore15 = { target: 'Divination', targetSpec: 'Runecasting', prereq: 'RuneLore', level: 15 };
NewPrerequisites.Divination_Arithmancy_requires_8Air_pgroup1                = { target: 'Divination', targetSpec: 'Arithmancy', prereq: 'Air', number: 8,       pgroup: 1 };
NewPrerequisites.Divination_Arithmancy_requires_MathematicalAbility_pgroup1 = { target: 'Divination', targetSpec: 'Arithmancy', prereq: 'Mathematical Ability', pgroup: 1 };
NewPrerequisites.Divination_Chiromancy_requires_4Air   = { target: 'Divination', targetSpec: 'Chiromancy', prereq: 'Air',   number: 4 };
NewPrerequisites.Divination_Chiromancy_requires_4Fire  = { target: 'Divination', targetSpec: 'Chiromancy', prereq: 'Fire',  number: 4 };
NewPrerequisites.Divination_Chiromancy_requires_4Earth = { target: 'Divination', targetSpec: 'Chiromancy', prereq: 'Earth', number: 4 };
NewPrerequisites.Divination_Chiromancy_requires_4Water = { target: 'Divination', targetSpec: 'Chiromancy', prereq: 'Water', number: 4 };
NewPrerequisites.Divination_Graphology_requires_6Air   = { target: 'Divination', targetSpec: 'Graphology', prereq: 'Air',   number: 6 };
NewPrerequisites.Divination_Graphology_requires_6Earth = { target: 'Divination', targetSpec: 'Graphology', prereq: 'Earth', number: 6 };
NewPrerequisites.Divination_Lunomancy_requires_5Air   = { target: 'Divination', targetSpec: 'Lunomancy', prereq: 'Air',   number: 5 };
NewPrerequisites.Divination_Lunomancy_requires_2Earth = { target: 'Divination', targetSpec: 'Lunomancy', prereq: 'Earth', number: 2 };
NewPrerequisites.Divination_Pedomancy_requires_4Earth = { target: 'Divination', targetSpec: 'Pedomancy', prereq: 'Earth', number: 4 };
NewPrerequisites.Divination_Pedomancy_requires_2Water = { target: 'Divination', targetSpec: 'Pedomancy', prereq: 'Water', number: 2 };
NewPrerequisites.Divination_Geomancy_requires_10Earth = { target: 'Divination', targetSpec: 'Geomancy', prereq: 'Earth', number: 10 };
NewPrerequisites.Divination_Aeromancy_requires_10Air = { target: 'Divination', targetSpec: 'Aeromancy', prereq: 'Air', number: 10 };
NewPrerequisites.Divination_Hydromancy_requires_10Water = { target: 'Divination', targetSpec: 'Hydromancy', prereq: 'Water', number: 10 };
NewPrerequisites.Divination_Astragyromancy_requires_6Air   = { target: 'Divination', targetSpec: 'Astragyromancy', prereq: 'Air',   number: 6 };
NewPrerequisites.Divination_Astragyromancy_requires_6Fire  = { target: 'Divination', targetSpec: 'Astragyromancy', prereq: 'Fire',  number: 6 };
NewPrerequisites.Divination_Astragyromancy_requires_6Earth = { target: 'Divination', targetSpec: 'Astragyromancy', prereq: 'Earth', number: 6 };
NewPrerequisites.Divination_Astragyromancy_requires_6Water = { target: 'Divination', targetSpec: 'Astragyromancy', prereq: 'Water', number: 6 };
NewPrerequisites.Divination_Belomancy_requires_Aeromancy = { target: 'Divination', targetSpec: 'Belomancy', prereq: 'Aeromancy' };
NewPrerequisites.Divination_Botanomancy_requires_4Fire  = { target: 'Divination', targetSpec: 'Botanomancy', prereq: 'Fire',  number: 4 };
NewPrerequisites.Divination_Botanomancy_requires_4Plant = { target: 'Divination', targetSpec: 'Botanomancy', prereq: 'Plant',  number: 4 };
NewPrerequisites.Divination_Gastromancy_requires_Hypnotism15 = { target: 'Divination', targetSpec: 'Gastromancy', prereq: 'Hypnotism', level: 15 };
NewPrerequisites.Divination_Gastromancy_requires_3Air        = { target: 'Divination', targetSpec: 'Gastromancy', prereq: 'Air',   number: 3 };
NewPrerequisites.Divination_Gastromancy_requires_3Fire       = { target: 'Divination', targetSpec: 'Gastromancy', prereq: 'Fire',  number: 3 };
NewPrerequisites.Divination_Gastromancy_requires_3Earth      = { target: 'Divination', targetSpec: 'Gastromancy', prereq: 'Earth', number: 3 };
NewPrerequisites.Divination_Gastromancy_requires_3Water      = { target: 'Divination', targetSpec: 'Gastromancy', prereq: 'Water', number: 3 };
NewPrerequisites.Divination_Lithomancy_requires_2Water = { target: 'Divination', targetSpec: 'Lithomancy', prereq: 'Water', number: 2 };
NewPrerequisites.Divination_Lithomancy_requires_5Earth = { target: 'Divination', targetSpec: 'Lithomancy', prereq: 'Earth', number: 5 };
// Libramancy prerequisites get complicated to express as groups of ORs (they are two groups of ANDs in the book)
// Earth Vision under Earth
// Far-Hearing under Sound
NewSpells.FindDirection = new Skill( "Find Direction", 'IQ', 2, libAbrv+53 );
NewSpells.FindDirection.classes = { info: true };
NewSpells.FindDirection.stats = { castcost: 2 };
NewPrerequisites.FindDirection_requires_Magery1 = { target: 'FindDirection', category: 'ADS', prereq: 'Magery', level: 1 };
NewSpells.GlassWall = new Skill( "Glass Wall", 'IQ', 2, libAbrv+55 );
NewSpells.GlassWall.classes = { reg: true };
NewSpells.GlassWall.stats = { duration: '1 min', castcost: 4, maintaincost: 2 };
NewPrerequisites.GlassWall_requires_EarthVision_pgroup1 = { target: 'GlassWall', prereq: 'EarthVision',          pgroup: 1 };
NewPrerequisites.GlassWall_requires_5Knowledge_pgroup1  = { target: 'GlassWall', prereq: 'Knowledge', number: 5, pgroup: 1 };
NewSpells.HistorySpell = new Skill( "History", 'IQ', 2, libAbrv+54 );
NewSpells.HistorySpell.classes = { info: true };
NewSpells.HistorySpell.stats = { castcost: "3 for a day; 5 for a week; 8 for a month; 10 for a year", time: "1 second per energy to cast" };
NewPrerequisites.HistorySpell_requires_Trace = { target: 'HistorySpell', targetCat: 'spell', prereq: 'Trace' };
// Ice Vision under Water
NewSpells.IdentifySpell = new Skill( "Identify Spell", 'IQ', 2, libAbrv+55 );
NewSpells.IdentifySpell.classes = { info: true };
NewSpells.IdentifySpell.stats = { castcost: 2 };
NewPrerequisites.IdentifySpell_requires_DetectMagic = { target: 'IdentifySpell', prereq: 'DetectMagic' };
NewSpells.InvisibleWizardEye = new Skill( "Invisible Wizard Eye", 'IQ', 2, libAbrv+54 );
NewSpells.InvisibleWizardEye.classes = { reg: true };
NewSpells.InvisibleWizardEye.stats = { duration: '1 min', castcost: 5, maintaincost: 3, time: 4 };
NewPrerequisites.InvisibleWizardEye_requires_WizardEye = { target: 'InvisibleWizardEye', prereq: 'WizardEye' };
NewPrerequisites.InvisibleWizardEye_requires_Invisibility = { target: 'InvisibleWizardEye', prereq: 'Invisibility' };
NewSpells.MageSense = new Skill( "Mage Sense", 'IQ', 2, libAbrv+55 );
NewSpells.MageSense.classes = { info: true };
NewSpells.MageSense.stats = { duration: '1 min', castcost: 3, maintaincost: 2, time: 5 };
NewPrerequisites.MageSense_requires_DetectMagic = { target: 'MageSense', prereq: 'DetectMagic' };
NewSpells.MageSight = new Skill( "Mage Sight", 'IQ', 2, libAbrv+54 );
NewSpells.MageSight.classes = { reg: true };
NewSpells.MageSight.stats = { duration: '1 min', castcost: 3, maintaincost: 2 };
NewPrerequisites.MageSight_requires_DetectMagic = { target: 'MageSight', prereq: 'DetectMagic' };
NewSpells.Measurement = new Skill( "Measurement", 'IQ', 2, libAbrv+54 );
NewSpells.Measurement.classes = { area: true, info: true };
NewSpells.Measurement.stats = { castcost: 1 };
NewSpells.Pathfinder = new Skill( "Pathfinder", 'IQ', 2, libAbrv+54 );
NewSpells.Pathfinder.classes = { info: true };
NewSpells.Pathfinder.stats = { castcost: 4, time: 10, notes: '1 try per day' };
NewPrerequisites.Pathfinder_requires_Magery1 = { target: 'Pathfinder', category: 'ADS', prereq: 'Magery', level: 1 };
NewPrerequisites.Pathfinder_requires_IQ12 = { target: 'Pathfinder', category: 'stat', level: 12, prereq: 'IQ' };
NewPrerequisites.Pathfinder_requires_SeekSpells = { target: 'Pathfinder', number: 2, prereq: 'SeekSpells' };
NewSpells.SeeSecrets = new Skill( "See Secrets", 'IQ', 2, libAbrv+54 );
NewSpells.SeeSecrets.classes = { reg: true };
NewSpells.SeeSecrets.stats = { duration: '1 min', castcost: 5, maintaincost: 2, time: 5 };
NewPrerequisites.SeeSecrets_requires_Seeker = { target: 'SeeSecrets', prereq: 'Seeker' };
NewPrerequisites.SeeSecrets_requires_Aura = { target: 'SeeSecrets', prereq: 'Aura' };
NewSpells.Seeker = new Skill( "Seeker", 'IQ', 2, libAbrv+54 );
NewSpells.Seeker.classes = { info: true };
NewSpells.Seeker.stats = { castcost: 3, notes: '1 try per week' };
NewPrerequisites.Seeker_requires_Magery1 = { target: 'Seeker', category: 'ADS', prereq: 'Magery', level: 1 };
NewPrerequisites.Seeker_requires_IQ12 = { target: 'Seeker', category: 'stat', level: 12, prereq: 'IQ' };
NewPrerequisites.Seeker_requires_SeekSpells = { target: 'Seeker', number: 2, prereq: 'SeekSpells' };
NewSpells.TellTime = new Skill( "Tell Time", 'IQ', 2, libAbrv+53 );
NewSpells.TellTime.classes = { info: true };
NewSpells.TellTime.stats = { castcost: 1 };
NewSpells.Trace = new Skill( "Trace", 'IQ', 2, libAbrv+54 );
NewSpells.Trace.classes = { reg: true };
NewSpells.Trace.stats = { castcost: 3, maintaincost: 1, duration: '1 hr', time: '1 min', notes: '1 try per day' };
NewPrerequisites.Trace_requires_Seeker = { target: 'Trace', prereq: 'Seeker' };
// Water Vision under Water
NewSpells.WizardEye = new Skill( "Wizard Eye", 'IQ', 2, libAbrv+54 );
NewSpells.WizardEye.classes = { reg: true };
NewSpells.WizardEye.stats = { duration: '1 min', castcost: 4, maintaincost: 2, time: 2 };
NewPrerequisites.WizardEye_requires_Magery1 = { target: 'WizardEye', category: 'ADS', prereq: 'Magery', level: 1 };
NewPrerequisites.WizardEye_requires_Apportation = { target: 'WizardEye', prereq: 'Apportation' };
NewPrerequisites.WizardEye_requires_KeenEyes = { target: 'WizardEye', prereq: 'KeenEyes' };

addToGroup("LightDarknessSpells",
['Light','ContinualLight','LightJet','Colors','Flash','Darkness','ShapeDarkness','Blur',
'Hide','Invisibility','Infravision','NightVision','DarkVision','HawkVision','SeeInvisible']);
NewSpells.Blur = new Skill( "Blur", 'IQ', 2, libAbrv+58 );
NewSpells.Blur.classes = { reg: true };
NewSpells.Blur.stats = { castcost: '1-5', maintaincost: 'same', time: 2, duration: '1 min', notes: '-1/pt to attack skill' };
NewPrerequisites.Blur_requires_Darkness = { target: 'Blur', prereq: 'Darkness' };
NewSpells.Colors = new Skill( "Colors", 'IQ', 2, libAbrv+57 );
NewSpells.Colors.classes = { reg: true };
NewSpells.Colors.stats = { castcost: 2, maintaincost: 1, duration: '1 min', notes: 'lasts indefinitely when cast on a Continual Light' };
NewPrerequisites.Colors_requires_Light = { target: 'Colors', prereq: 'Light' };
NewSpells.ContinualLight = new Skill( "Continual Light", 'IQ', 2, libAbrv+57 );
NewSpells.ContinualLight.classes = { reg: true };
NewSpells.ContinualLight.stats = { castcost: '2-6', duration: '2d days' };
NewPrerequisites.ContinualLight_requires_Light = { target: 'ContinualLight', prereq: 'Light' };
NewSpells.DarkVision = new Skill( "Dark Vision", 'IQ', 2, libAbrv+58 );
NewSpells.DarkVision.classes = { reg: true };
NewSpells.DarkVision.stats = { castcost: 5, maintaincost: 2, duration: '1 min' };
NewPrerequisites.DarkVision_requires_NightVision_pgroup1 = { target: 'DarkVision', prereq: 'NightVision', pgroup: 1 };
NewPrerequisites.DarkVision_requires_Infravision_pgroup1 = { target: 'DarkVision', prereq: 'Infravision', pgroup: 1 };
NewSpells.Darkness = new Skill( "Darkness", 'IQ', 2, libAbrv+58 );
NewSpells.Darkness.classes = { area: true };
NewSpells.Darkness.stats = { castcost: 2, maintaincost: 1, duration: '1 min' };
NewPrerequisites.Darkness_requires_ContinualLight = { target: 'Darkness', prereq: 'ContinualLight' };
NewSpells.Flash = new Skill( "Flash", 'IQ', 2, libAbrv+57 );
NewSpells.Flash.classes = { reg: true };
NewSpells.Flash.stats = { castcost: 4, time: 2, notes: '<table style="table-layout: fixed;"><tr><td><i>Distance</i></td><td><i>HT roll made</i></td><td><i>HT roll not made</i></td></tr><tr><td>&le;10 hexes</td><td>1m at -3 DX</td><td>3s blind,<br>1m at -3 DX</td></tr><tr><td>11-25 hexes</td><td>10s at -3 DX</td><td>1m at -3 DX</td></tr><tr><td>26+ hexes</td><td>no effect</td><td>3s at -3 DX</td></tr></table>' };
NewPrerequisites.Flash_requires_ContinualLight = { target: 'Flash', prereq: 'ContinualLight' };
NewSpells.HawkVision = new Skill( "Hawk Vision", 'IQ', 2, libAbrv+58 );
NewSpells.HawkVision.classes = { reg: true };
NewSpells.HawkVision.stats = { castcost: 4, maintaincost: 2, time: 2, duration: '1 min', notes: 'fails if cast on subjects with Blindness or Bad Sight' };
NewPrerequisites.HawkVision_requires_KeenEyes_pgroup1 = { target: 'HawkVision', prereq: 'KeenEyes',      pgroup: 1 };
NewPrerequisites.HawkVision_requires_5LD_pgroup1      = { target: 'HawkVision', prereq: 'LD', number: 5, pgroup: 1 };
NewSpells.Hide = new Skill( "Hide", 'IQ', 2, libAbrv+58 );
NewSpells.Hide.classes = { reg: true };
NewSpells.Hide.stats = { castcost: '1-5', maintaincost: 'same', time: 2, duration: '1 hr', notes: '-1/pt to sense rolls to find the subject' };
NewPrerequisites.Hide_requires_Blur_pgroup1          = { target: 'Hide', prereq: 'Blur',          pgroup: 1 };
NewPrerequisites.Hide_requires_Forgetfulness_pgroup1 = { target: 'Hide', prereq: 'Forgetfulness', pgroup: 1 };
NewSpells.Infravision = new Skill( "Infravision", 'IQ', 2, libAbrv+58 );
NewSpells.Infravision.classes = { reg: true };
NewSpells.Infravision.stats = { castcost: 3, maintaincost: 1, duration: '1 min' };
NewPrerequisites.Infravision_requires_KeenEyes_pgroup1 = { target: 'Infravision', prereq: 'KeenEyes',      pgroup: 1 };
NewPrerequisites.Infravision_requires_5LD_pgroup1      = { target: 'Infravision', prereq: 'LD', number: 5, pgroup: 1 };
NewSpells.Invisibility = new Skill( "Invisibility", 'IQ', 2, libAbrv+58 );
NewSpells.Invisibility.classes = { reg: true };
NewSpells.Invisibility.stats = { castcost: 5, maintaincost: 3, time: 3, duration: '1 min' };
NewPrerequisites.Invisibility_requires_6LD = { target: 'Invisibility', number: 6, prereq: 'LD' };
NewPrerequisites.Invisibility_requires_Blur = { target: 'Invisibility', prereq: 'Blur' };
NewSpells.Light = new Skill( "Light", 'IQ', 2, libAbrv+57 );
NewSpells.Light.classes = { reg: true };
NewSpells.Light.stats = { castcost: 1, maintaincost: 1, duration: '1 min' };
NewSpells.LightJet = new Skill( "Light Jet", 'IQ', 2, libAbrv+57 );
NewSpells.LightJet.classes = { reg: true };
NewSpells.LightJet.stats = { castcost: 2, maintaincost: 1, duration: '1 min' };
NewPrerequisites.LightJet_requires_ContinualLight = { target: 'LightJet', prereq: 'ContinualLight' };
NewSpells.NightVision = new Skill( "Night Vision", 'IQ', 2, libAbrv+58 );
NewSpells.NightVision.classes = { reg: true };
NewSpells.NightVision.stats = { castcost: 3, maintaincost: 1, duration: '1 min' };
NewPrerequisites.NightVision_requires_KeenEyes_pgroup1 = { target: 'NightVision', prereq: 'KeenEyes',      pgroup: 1 };
NewPrerequisites.NightVision_requires_5LD_pgroup1      = { target: 'NightVision', prereq: 'LD', number: 5, pgroup: 1 };
NewSpells.SeeInvisible = new Skill( "See Invisible", 'IQ', 2, libAbrv+58 );
NewSpells.SeeInvisible.classes = { reg: true };
NewSpells.SeeInvisible.stats = { castcost: 4, time: 2, duration: '1 min' };
NewPrerequisites.SeeInvisible_requires_Invisibility_pgroup1 = { target: 'SeeInvisible', prereq: 'Invisibility', pgroup: 1 };
NewPrerequisites.SeeInvisible_requires_DarkVision_pgroup1   = { target: 'SeeInvisible', prereq: 'DarkVision',   pgroup: 1 };
NewPrerequisites.SeeInvisible_requires_Invisibility_pgroup2 = { target: 'SeeInvisible', prereq: 'Invisibility', pgroup: 2 };
NewPrerequisites.SeeInvisible_requires_Infravision_pgroup2  = { target: 'SeeInvisible', prereq: 'Infravision',  pgroup: 2 };
NewSpells.ShapeDarkness = new Skill( "Shape Darkness", 'IQ', 2, libAbrv+58 );
NewSpells.ShapeDarkness.classes = { area: true };
NewSpells.ShapeDarkness.stats = { castcost: 2, maintaincost: 2, duration: '1 min', notes: 'halve cost to shape (2-D) shadows' };
NewPrerequisites.ShapeDarkness_requires_Darkness = { target: 'ShapeDarkness', prereq: 'Darkness' };

addToGroup("MakingBreakingSpells",
['FindWeakness','Weaken','Reshape','Shatter','Ruin','Disintegrate','Restore',
'Dye','Clean','Rejoin','Stiffen','Repair','RepairArrow','Shatterproof','Copy','Sharpen','Knots']);
NewSpells.Clean = new Skill( "Clean", 'IQ', 2, libAbrv+60 );
NewSpells.Clean.classes = { area: true };
NewSpells.Clean.stats = { castcost: 2, duration: 'permanent' };
NewPrerequisites.Clean_requires_Restore = { target: 'Clean', prereq: 'Restore' };
NewSpells.Copy = new Skill( "Copy", 'IQ', 2, libAbrv+60 );
NewSpells.Copy.classes = { reg: true };
NewSpells.Copy.stats = { castcost: '2+1/copy', duration: 'permanent', time: 5 };
NewPrerequisites.Copy_requires_Literacy = { target: 'Copy', category: 'ADS', prereq: 'Literacy' };
NewPrerequisites.Copy_requires_Dye = { target: 'Copy', prereq: 'Dye' };
NewSpells.Disintegrate = new Skill( "Disintegrate", 'IQ', 3, libAbrv+59 );
NewSpells.Disintegrate.classes = { reg: true };
NewSpells.Disintegrate.stats = { castcost: '1 per die damage, max 4d', duration: 'permanent' };
NewPrerequisites.Disintegrate_requires_Magery2 = { target: 'Disintegrate', level: 2, category: 'ADS', prereq: 'Magery' };
NewPrerequisites.Disintegrate_requires_Shatter = { target: 'Disintegrate', prereq: 'Shatter' };
NewPrerequisites.Disintegrate_requires_Ruin = { target: 'Disintegrate', prereq: 'Ruin' };
NewPrerequisites.Disintegrate_requires_EarthtoAir = { target: 'Disintegrate', prereq: 'EarthtoAir' };
NewPrerequisites.Disintegrate_requires_DestroyAir = { target: 'Disintegrate', prereq: 'DestroyAir' };
NewPrerequisites.Disintegrate_requires_DestroyWater = { target: 'Disintegrate', prereq: 'DestroyWater' };
NewSpells.Dye = new Skill( "Dye", 'IQ', 2, libAbrv+60 );
NewSpells.Dye.classes = { reg: true };
NewSpells.Dye.stats = { castcost: '1 to 5', duration: '2d days', time: 3, notes: '1 for up to palm-sized objects, 2 for up to a square foot, 5 for a person or 1-hex object.' };
NewPrerequisites.Dye_requires_Restore = { target: 'Dye', prereq: 'Restore' };
NewPrerequisites.Dye_requires_Colors = { target: 'Dye', prereq: 'Colors' };
NewSpells.FindWeakness = new Skill( "Find Weakness", 'IQ', 2, libAbrv+59 );
NewSpells.FindWeakness.classes = { info: true };
NewSpells.FindWeakness.stats = { castcost: 1, time: 2 };
NewPrerequisites.FindWeakness_requires_Earth = { target: 'FindWeakness', number: 1, prereq: 'Earth' };
NewPrerequisites.FindWeakness_requires_Air   = { target: 'FindWeakness', number: 1, prereq: 'Air' };
NewPrerequisites.FindWeakness_requires_Fire  = { target: 'FindWeakness', number: 1, prereq: 'Fire' };
NewPrerequisites.FindWeakness_requires_Water = { target: 'FindWeakness', number: 1, prereq: 'Water' };
NewSpells.Knots = new Skill( "Knots", 'IQ', 2, libAbrv+60 );
NewSpells.Knots.classes = { reg: true };
NewSpells.Knots.stats = { castcost: 2, time: 3, duration: "Until the password is spoken, or the rope is cut or broken!" };
NewPrerequisites.Knots_requires_Stiffen = { target: 'Knots', prereq: 'Stiffen' };
NewSpells.Rejoin = new Skill( "Rejoin", 'IQ', 2, libAbrv+60 );
NewSpells.Rejoin.classes = { reg: true };
NewSpells.Rejoin.stats = { castcost: "1 per 10 lb", maintaincost: "half", duration: "10 min", time: "4 per 10 lb" };
NewPrerequisites.Rejoin_requires_Weaken = { target: 'Rejoin', prereq: 'Weaken' };
NewPrerequisites.Rejoin_requires_Restore = { target: 'Rejoin', prereq: 'Restore' };
NewSpells.Repair = new Skill( "Repair", 'IQ', 2, libAbrv+60 );
NewSpells.Repair.classes = { reg: true };
NewSpells.Repair.stats = { castcost: "2 per 5 lb", duration: "permanent", time: "1 per 10 lb" };
NewPrerequisites.Repair_requires_Magery2 = { target: 'Repair', level: 2, category: 'ADS', prereq: 'Magery' };
NewPrerequisites.Repair_requires_Rejoin = { target: 'Repair', prereq: 'Rejoin' };
NewSpells.RepairArrow = new Skill( "Repair Arrow", 'IQ', 2, libAbrv+60 );
NewSpells.RepairArrow.classes = { reg: true };
NewSpells.RepairArrow.stats = { castcost: '2/arrow', duration: "permanent", time: '4/arrow' };
NewPrerequisites.RepairArrow_requires_Rejoin = { target: 'RepairArrow', prereq: 'Rejoin' };
NewSpells.Reshape = new Skill( "Reshape", 'IQ', 2, libAbrv+59 );
NewSpells.Reshape.classes = { reg: true };
NewSpells.Reshape.stats = { castcost: 6, maintaincost: 3, duration: '1 min', time: 10 };
NewPrerequisites.Reshape_requires_Magery1 = { target: 'Reshape', category: 'ADS', prereq: 'Magery', level: 1 };
NewPrerequisites.Reshape_requires_Weaken  = { target: 'Reshape', prereq: 'Weaken' };
NewPrerequisites.Reshape_requires_ShapeEarth_pgroup1 = { target: 'Reshape', prereq: 'ShapeEarth', pgroup: 1 };
NewPrerequisites.Reshape_requires_ShapePlant_pgroup1 = { target: 'Reshape', prereq: 'ShapePlant', pgroup: 1 };
NewSpells.Restore = new Skill( "Restore", 'IQ', 2, libAbrv+59 );
NewSpells.Restore.classes = { reg: true };
NewSpells.Restore.stats = { castcost: '2/hex, min 2', maintaincost: 'half', duration: '10 min', time: 3 };
NewPrerequisites.Restore_requires_Weaken_pgroup1         = { target: 'Restore', prereq: 'Weaken',         pgroup: 1 };
NewPrerequisites.Restore_requires_SimpleIllusion_pgroup1 = { target: 'Restore', prereq: 'SimpleIllusion', pgroup: 1 };
NewSpells.Ruin = new Skill( "Ruin", 'IQ', 2, libAbrv+59 );
NewSpells.Ruin.classes = { reg: true };
NewSpells.Ruin.stats = { castcost: '2 per lb', maintaincost: 'same', time: '5 per lb' };
NewPrerequisites.Ruin_requires_Magery1 = { target: 'Ruin', category: 'ADS', prereq: 'Magery', level: 1 };
NewPrerequisites.Ruin_requires_Weaken  = { target: 'Ruin', prereq: 'Weaken' };
NewPrerequisites.Ruin_requires_Decay   = { target: 'Ruin', prereq: 'Decay' };
NewSpells.Sharpen = new Skill( "Sharpen", 'IQ', 2, libAbrv+60 );
NewSpells.Sharpen.classes = { reg: true };
NewSpells.Sharpen.stats = { castcost: "1/6″ of edge", maintaincost: "½ C2C", duration: '1 min', time: 4, notes: "1 to cast on an arrow; 2 for a knife, spear or axe; 3 for a one-handed sword; 5 for a two-handed sword. Double these for +2 bonus, or triple for +3." };
NewPrerequisites.Sharpen_requires_Repair = { target: 'Sharpen', prereq: 'Repair' };
NewSpells.Shatter = new Skill( "Shatter", 'IQ', 3, libAbrv+59 );
NewSpells.Shatter.classes = { reg: true };
NewSpells.Shatter.stats = { castcost: '1 per die damage, max 3d' };
NewPrerequisites.Shatter_requires_Magery1 = { target: 'Shatter', category: 'ADS', prereq: 'Magery', level: 1 };
NewPrerequisites.Shatter_requires_Weaken  = { target: 'Shatter', prereq: 'Weaken' };
NewSpells.Shatterproof = new Skill( "Shatterproof", 'IQ', 2, libAbrv+60 );
NewSpells.Shatterproof.classes = { reg: true };
NewSpells.Shatterproof.stats = { castcost: 3, maintaincost: 3, duration: '1 hr' };
NewPrerequisites.Shatterproof_requires_Repair = { target: 'Shatterproof', prereq: 'Repair' };
NewPrerequisites.Shatterproof_requires_Shatter = { target: 'Shatterproof', prereq: 'Shatter' };
NewSpells.Stiffen = new Skill( "Stiffen", 'IQ', 2, libAbrv+60 );
NewSpells.Stiffen.classes = { reg: true };
NewSpells.Stiffen.stats = { castcost: '1 per lb, min 2', maintaincost: 'half', duration: '10 min', time: '2/lb' };
NewPrerequisites.Stiffen_requires_Rejoin = { target: 'Stiffen', prereq: 'Rejoin' };
NewSpells.Weaken = new Skill( "Weaken", 'IQ', 2, libAbrv+59 );
NewSpells.Weaken.classes = { reg: true };
NewSpells.Weaken.stats = { castcost: 2, duration: "permanent", time: 5 };
NewPrerequisites.Weaken_requires_FindWeakness = { target: 'Weaken', prereq: 'FindWeakness' };

addToGroup("MetaSpells",
['ActivateRunes','ConcealMagic','Scryguard','Scrywall','MagicResistance','SpellShield',
'Counterspell','DispelMagic','Ward','Reflect','GreatWard','Pentagram','Bless','Curse',
'RemoveCurse','DrainMana','RestoreMana','Delay','Link','Reflex']);
NewSpells.ActivateRunes = new Skill( "Activate Runes", 'IQ', 3, libAbrv+92 );
NewSpells.ActivateRunes.classes = { reg: true };
NewSpells.ActivateRunes.stats = { time: '1 for each rune' };
NewPrerequisites.ActivateRunes_requires_Magery1    = { target: 'ActivateRunes', category: 'AD', prereq: 'Magery', level: 1 };
NewPrerequisites.ActivateRunes_requires_RuneLore12 = { target: 'ActivateRunes', category: 'SK', prereq: 'RuneLore', level: 12 };
NewSpells.Bless = new Skill( "Bless", 'IQ', 2, libAbrv+62 );
NewSpells.Bless.classes = { reg: true };
NewSpells.Bless.stats = { castcost: "10, 50, or 500 for 1- to 3-point Blessing", time: 'energy cost in minutes', duration: 'lasting' };
NewPrerequisites.Bless_requires_Magery2 = { target: 'Bless', level: 2, category: 'ADS', prereq: 'Magery' };
NewPrerequisites.Bless_requires_2spellsfrom10colleges = { target: 'Bless', number: 10, prereq: 'MagicColleges', meta: true, mult: 2 };
NewSpells.ConcealMagic = new Skill( "Conceal Magic", 'IQ', 2, libAbrv+61 );
NewSpells.ConcealMagic.classes = { reg: true };
NewSpells.ConcealMagic.stats = { duration: '10 hrs', castcost: '1 to 5', maintaincost: 'same', time: 3 };
NewPrerequisites.ConcealMagic_requires_DetectMagic = { target: 'ConcealMagic', prereq: 'DetectMagic' };
NewSpells.Curse = new Skill( "Curse", 'IQ', 2, libAbrv+63 );
NewSpells.Curse.classes = { reg: true };
NewSpells.Curse.stats = { castcost: "3, 10, or 20 for 1- to 3-point Curse", time: '2× Curse level in seconds', duration: 'lasting' };
NewPrerequisites.Curse_requires_Magery2 = { target: 'Curse', level: 2, category: 'ADS', prereq: 'Magery' };
NewPrerequisites.Curse_requires_2spellsfrom10colleges = { target: 'Curse', number: 10, prereq: 'MagicColleges', meta: true, mult: 2 };
NewSpells.Counterspell = new Skill( "Counterspell", 'IQ', 2, libAbrv+61 );
NewSpells.Counterspell.classes = { reg: true, rsp: true };
NewSpells.Counterspell.stats = { castcost: '½ countered spell cost', time: 5 };
NewPrerequisites.Counterspell_requires_Magery1 = { target: 'Counterspell', category: 'ADS', prereq: 'Magery', level: 1 };
NewSpells.Delay = new Skill( "Delay", 'IQ', 2, libAbrv+63 );
NewSpells.Delay.classes = { reg: true };
NewSpells.Delay.stats = { duration: '2 hrs', castcost: 3, maintaincost: 3, time: 10 };
NewPrerequisites.Delay_requires_Magery3 = { target: 'Delay', level: 3, category: 'ADS', prereq: 'Magery' };
NewPrerequisites.Delay_requires_15Spells = { target: 'Delay', number: 15, prereq: 'Spells' };
NewSpells.DispelMagic = new Skill( "Dispel Magic", 'IQ', 2, libAbrv+62 );
NewSpells.DispelMagic.classes = { area: true };
NewSpells.DispelMagic.stats = { castcost: 3, time: '1/pt spent', duration: 'Dispelled magic is permanently gone.' };
NewPrerequisites.DispelMagic_requires_Counterspell = { target: 'DispelMagic', prereq: 'Counterspell' };
NewPrerequisites.DispelMagic_requires_12Spells = { target: 'DispelMagic', number: 12, prereq: 'Spells' };
NewSpells.DrainMana = new Skill( "Drain Mana", 'IQ', 3, libAbrv+63 );
NewSpells.DrainMana.classes = { area: true };
NewSpells.DrainMana.stats = { duration: 'permanent', castcost: 10, time: '1 hr', notes: "Critical failure costs caster 1 level of Magery." };
NewPrerequisites.DrainMana_requires_DispelMagic = { target: 'DrainMana', prereq: 'DispelMagic' };
NewPrerequisites.DrainMana_requires_10colleges = { target: 'DrainMana', number: 10, prereq: 'MagicColleges', meta: true };
NewSpells.GreatWard = new Skill( "Great Ward", 'IQ', 2, libAbrv+62 );
NewSpells.GreatWard.classes = { block: true, rsp: true };
NewSpells.GreatWard.stats = { castcost: '1/subject (min 4)' };
NewPrerequisites.GreatWard_requires_Magery2 = { target: 'GreatWard', level: 2, category: 'ADS', prereq: 'Magery' };
NewPrerequisites.GreatWard_requires_Ward = { target: 'GreatWard', prereq: 'Ward' };
NewSpells.Pentagram = new Skill( "Pentagram", 'IQ', 2, libAbrv+62 );
NewSpells.Pentagram.classes = { spcl: true };
NewSpells.Pentagram.stats = { castcost: "1/ft&sup2; protected (min 10)", duration: 'permanent unless broken', time: "1 sec/ft&sup2;" };
NewPrerequisites.Pentagram_requires_SpellShield = { target: 'Pentagram', prereq: 'SpellShield' };
NewSpells.Link = new Skill( "Link", 'IQ', 2, libAbrv+64 );
NewSpells.Link.classes = { area: true };
NewSpells.Link.stats = { duration: 'until triggered, and its linked spells expire', castcost: 8, time: '4 hrs' };
NewPrerequisites.Link_requires_Delay = { target: 'Link', prereq: 'Delay' };
NewSpells.MagicResistance = new Skill( "Magic Resistance", 'IQ', 2, libAbrv+61 );
NewSpells.MagicResistance.classes = { reg: true, riq: true };
NewSpells.MagicResistance.stats = { duration: '1 min', castcost: '1 to 5', maintaincost: 'same', time: 3 };
NewPrerequisites.MagicResistance_requires_Magery1 = { target: 'MagicResistance', category: 'ADS', prereq: 'Magery', level: 1 };
NewPrerequisites.MagicResistance_requires_7colleges = { target: 'MagicResistance', number: 7, prereq: 'MagicColleges', meta: true };
NewSpells.Reflect = new Skill( "Reflect", 'IQ', 2, libAbrv+62 );
NewSpells.Reflect.classes = { block: true, rsp: true };
NewSpells.Reflect.stats = { castcost: '4 (6 for another)' };
NewPrerequisites.Reflect_requires_Ward = { target: 'Reflect', prereq: 'Ward' };
NewSpells.Reflex = new Skill( "Reflex", 'IQ', 2, libAbrv+64 );
NewSpells.Reflex.classes = { spcl: true };
NewSpells.Reflex.stats = { duration: '1 hr', castcost: 'same as cost of subject spell (min 1)', maintaincost: 'same', time: 10 };
NewPrerequisites.Reflex_requires_Delay = { target: 'Reflex', prereq: 'Delay' };
NewPrerequisites.Reflex_requires_Ward = { target: 'Reflex', prereq: 'Ward' };
NewSpells.RemoveCurse = new Skill( "Remove Curse", 'IQ', 2, libAbrv+63 );
NewSpells.RemoveCurse.classes = { area: true, rsp: true };
NewSpells.RemoveCurse.stats = { castcost: 20, time: '1 hr' };
NewPrerequisites.RemoveCurse_requires_Magery2 = { target: 'RemoveCurse', level: 2, category: 'ADS', prereq: 'Magery' };
NewPrerequisites.RemoveCurse_requires_15colleges = { target: 'RemoveCurse', number: 15, prereq: 'MagicColleges', meta: true };
NewSpells.RestoreMana = new Skill( "Restore Mana", 'IQ', 3, libAbrv+63 );
NewSpells.RestoreMana.classes = { area: true };
NewSpells.RestoreMana.stats = { castcost: 10, time: '1 hr', duration: 'permanent' };
NewPrerequisites.RestoreMana_requires_DispelMagic = { target: 'RestoreMana', prereq: 'DispelMagic' };
NewPrerequisites.RestoreMana_requires_10colleges = { target: 'RestoreMana', number: 10, prereq: 'MagicColleges', meta: true };
NewSpells.Scryguard = new Skill( "Scryguard", 'IQ', 2, libAbrv+61 );
NewSpells.Scryguard.classes = { reg: true };
NewSpells.Scryguard.stats = { duration: '10 hrs', castcost: 3, maintaincost: 1, time: 5 };
NewPrerequisites.Scryguard_requires_Magery1 = { target: 'Scryguard', category: 'ADS', prereq: 'Magery', level: 1 };
NewSpells.Scrywall = new Skill( "Scrywall", 'IQ', 2, libAbrv+61 );
NewSpells.Scrywall.classes = { area: true, rsp: true };
NewSpells.Scrywall.stats = { duration: '10 hrs', castcost: 3, maintaincost: 2, time: 'energy cost in seconds' };
NewPrerequisites.Scrywall_requires_Scryguard = { target: 'Scrywall', prereq: 'Scryguard' };
NewSpells.SpellShield = new Skill( "Spell Shield", 'IQ', 2, libAbrv+61 );
NewSpells.SpellShield.classes = { area: true, rsp: true };
NewSpells.SpellShield.stats = { duration: '1 min', castcost: 3, maintaincost: 2 };
NewPrerequisites.SpellShield_requires_Magery2 = { target: 'SpellShield', level: 2, category: 'ADS', prereq: 'Magery' };
NewPrerequisites.SpellShield_requires_Scryguard = { target: 'SpellShield', prereq: 'Scryguard' };
NewPrerequisites.SpellShield_requires_MagicResistance = { target: 'SpellShield', prereq: 'MagicResistance' };
NewSpells.Ward = new Skill( "Ward", 'IQ', 2, libAbrv+62 );
NewSpells.Ward.classes = { block: true, rsp: true };
NewSpells.Ward.stats = { castcost: '2 (3 for another)' };
NewPrerequisites.Ward_requires_Magery1 = { target: 'Ward', category: 'ADS', prereq: 'Magery', level: 1 };

addToGroup("MindControlSpells",
['Fear','Panic','Terror','Bravery','Berserker','Foolishness','Drunkenness','Sickness',
'Forgetfulness','PermanentForgetfulness','Daze','MassDaze','MentalStun','Sleep','MassSleep',
'PeacefulSleep','Madness','PermanentMadness','Mindlessness','FalseMemory','Nightmare','Avoid',
'Loyalty','Charm','Enslave','Wisdom','EmotionControl','Suggestion','MassSuggestion',
'LesserGeas','GreatGeas','KeenEyes','KeenEars','KeenNose','Alertness','RearVision']);
addToGroup("KeenSense",['KeenEyes','KeenEars','KeenNose']);
NewSpells.Alertness = new Skill( "Alertness", 'IQ', 3, libAbrv+69 );
NewSpells.Alertness.classes = { reg: true };
NewSpells.Alertness.stats = { duration: '10 min', castcost: '2/+1; max 5', maintaincost: '½ C2C' };
NewPrerequisites.Alertness_requires_2KeenSense = { target: 'Alertness', prereq: 'KeenSense', number: 2 };
NewSpells.Avoid = new Skill( "Avoid", 'IQ', 2, libAbrv+67 );
NewSpells.Avoid.classes = { area: true };
NewSpells.Avoid.stats = { duration: '1 hr', castcost: 3, maintaincost: 3, time: "1 min" };
NewPrerequisites.Avoid_requires_Hide = { target: 'Avoid', prereq: 'Hide' };
NewPrerequisites.Avoid_requires_Fear = { target: 'Avoid', prereq: 'Fear' };
NewPrerequisites.Avoid_requires_Forgetfulness = { target: 'Avoid', prereq: 'Forgetfulness' };
NewSpells.Berserker = new Skill( "Berserker", 'IQ', 2, libAbrv+65 );
NewSpells.Berserker.classes = { reg: true, riq: true };
NewSpells.Berserker.stats = { castcost: 3, maintaincost: 2, time: 4, duration: '10 min' };
NewPrerequisites.Berserker_requires_Bravery = { target: 'Berserker', prereq: 'Bravery' };
NewSpells.Bravery = new Skill( "Bravery", 'IQ', 2, libAbrv+65 );
NewSpells.Bravery.classes = { area: true, riq: true };
NewSpells.Bravery.stats = { castcost: 2, duration: '1 hr', notes: 'Resisted by IQ-1' };
NewPrerequisites.Bravery_requires_Fear = { target: 'Bravery', prereq: 'Fear' };
NewSpells.Charm = new Skill( "Charm", 'IQ', 2, libAbrv+68 );
NewSpells.Charm.classes = { reg: true, riq: true };
NewSpells.Charm.stats   = { duration: '1 min', castcost: 6, maintaincost: 3, time: 3 };
NewPrerequisites.Charm_requires_Magery1 = { target: 'Charm', category: 'ADS', prereq: 'Magery', level: 1 };
NewPrerequisites.Charm_requires_Loyalty = { target: 'Charm', prereq: 'Loyalty' };
NewPrerequisites.Charm_requires_7MC = { target: 'Charm', number: 7, prereq: 'MC' };
NewSpells.Daze = new Skill( "Daze", 'IQ', 2, libAbrv+66 );
NewSpells.Daze.classes = { reg: true, rht: true };
NewSpells.Daze.stats = { duration: '1 min', castcost: 3, maintaincost: 2, time: 2 };
NewPrerequisites.Daze_requires_Foolishness = { target: 'Daze', prereq: 'Foolishness' };
NewSpells.Drunkenness = new Skill( "Drunkenness", 'IQ', 2, libAbrv+66 );
NewSpells.Drunkenness.classes = { reg: true, riq: true };
NewSpells.Drunkenness.stats = { duration: '1 min', castcost: '1/stats-1; max -5', maintaincost: '½ C2C', time: 2 };
NewPrerequisites.Drunkenness_requires_Foolishness = { target: 'Drunkenness', prereq: 'Foolishness' };
NewPrerequisites.Drunkenness_requires_Clumsiness  = { target: 'Drunkenness', prereq: 'Clumsiness' };
NewSpells.EmotionControl = new Skill( "Emotion Control", 'IQ', 2, libAbrv+68 );
NewSpells.EmotionControl.classes = { area: true, riq: true };
NewSpells.EmotionControl.stats = { duration: '1 hr', castcost: 2 };
NewPrerequisites.EmotionControl_requires_Loyalty = { target: 'EmotionControl', prereq: 'Loyalty' };
NewSpells.Enslave = new Skill( "Enslave", 'IQ', 3, libAbrv+68 );
NewSpells.Enslave.classes = { reg: true, riq: true };
NewSpells.Enslave.stats   = { duration: 'permanent', castcost: 30 };
NewPrerequisites.Enslave_requires_Charm = { target: 'Enslave', prereq: 'Charm' };
NewPrerequisites.Enslave_requires_TelepathySpell = { target: 'Enslave', prereq: 'TelepathySpell' };
NewSpells.FalseMemory = new Skill( "False Memory", 'IQ', 2, libAbrv+67 );
NewSpells.FalseMemory.classes = { reg: true, riq: true };
NewSpells.FalseMemory.stats = { duration: 'variable', castcost: '3/hr, 8/day', maintaincost: '3/hr, 4/day', time: 5, notes: 'Resisted by IQ-2' };
NewPrerequisites.FalseMemory_requires_Forgetfulness = { target: 'FalseMemory', prereq: 'Forgetfulness' };
NewPrerequisites.FalseMemory_requires_6MC = { target: 'FalseMemory', number: 6, prereq: 'MC' };
NewSpells.Fear = new Skill( "Fear", 'IQ', 2, libAbrv+65 );
NewSpells.Fear.classes = { area: true, riq: true };
NewSpells.Fear.stats = { castcost: 1, duration: '10 min' };
NewPrerequisites.Fear_requires_SenseEmotion = { target: 'Fear', prereq: 'SenseEmotion' };
NewSpells.Foolishness = new Skill( "Foolishness", 'IQ', 2, libAbrv+66 );
NewSpells.Foolishness.classes = { reg: true, riq: true };
NewSpells.Foolishness.stats = { castcost: '1-5', maintaincost: '½ cast cost', duration: '1 min' };
NewPrerequisites.Foolishness_requires_IQ = { target: 'Foolishness', category: 'stat', level: 12, prereq: 'IQ' };
NewSpells.Forgetfulness = new Skill( "Forgetfulness", 'IQ', 2, libAbrv+66 );
NewSpells.Forgetfulness.classes = { reg: true, riq: true };
NewSpells.Forgetfulness.stats = { castcost: 3, maintaincost: 3, duration: '1 hr', time: 10, notes: 'Resisted by IQ or target skill' };
NewPrerequisites.Forgetfulness_requires_Magery1 = { target: 'Forgetfulness', category: 'ADS', prereq: 'Magery', level: 1 };
NewPrerequisites.Forgetfulness_requires_IQ = { target: 'Forgetfulness', category: 'stat', level: 12, prereq: 'IQ' };
NewPrerequisites.Forgetfulness_requires_Foolishness = { target: 'Forgetfulness', prereq: 'Foolishness' };
NewSpells.GreatGeas = new Skill( "Great Geas", 'IQ', 3, libAbrv+68 );
NewSpells.GreatGeas.classes = { reg: true, riq: true };
NewSpells.GreatGeas.stats = { duration: 'permanent', castcost: 30, time: "1 min" };
NewPrerequisites.GreatGeas_requires_Magery3 = { target: 'GreatGeas', level: 3, category: 'ADS', prereq: 'Magery' };
NewPrerequisites.GreatGeas_requires_15MC = { target: 'GreatGeas', number: 15, prereq: 'MC' };
NewPrerequisites.GreatGeas_requires_LesserGeas = { target: 'GreatGeas', prereq: 'LesserGeas' };
NewSpells.KeenEars = new Skill( "Keen Ears", 'IQ', 2, libAbrv+69 );
NewSpells.KeenEars.classes = { reg: true };
NewSpells.KeenEars.stats = { duration: '30 min', castcost: '1/+1; max 5', maintaincost: '½ C2C' };
NewSpells.KeenEyes = new Skill( "Keen Eyes", 'IQ', 2, libAbrv+69 );
NewSpells.KeenEyes.classes = { reg: true };
NewSpells.KeenEyes.stats = { duration: '30 min', castcost: '1/+1; max 5', maintaincost: '½ C2C' };
NewSpells.KeenNose = new Skill( "Keen Nose", 'IQ', 2, libAbrv+69 );
NewSpells.KeenNose.classes = { reg: true };
NewSpells.KeenNose.stats = { duration: '30 min', castcost: '1/+1; max 5', maintaincost: '½ C2C' };
NewSpells.LesserGeas = new Skill( "Lesser Geas", 'IQ', 3, libAbrv+68 );
NewSpells.LesserGeas.classes = { reg: true, riq: true };
NewSpells.LesserGeas.stats = { duration: 'until fulfilled', castcost: 12, time: 30 };
NewPrerequisites.LesserGeas_requires_Magery2 = { target: 'LesserGeas', level: 2, category: 'ADS', prereq: 'Magery' };
NewPrerequisites.LesserGeas_requires_10MC = { target: 'LesserGeas', number: 10, prereq: 'MC' };
NewSpells.Loyalty = new Skill( "Loyalty", 'IQ', 2, libAbrv+68 );
NewSpells.Loyalty.classes = { reg: true, riq: true };
NewSpells.Loyalty.stats = { duration: '1 hr', castcost: 2, maintaincost: 2, time: 2, notes: '×2 cost if target does not know caster, ×3 if foe' };
NewPrerequisites.Loyalty_requires_Bravery = { target: 'Loyalty', prereq: 'Bravery' };
NewPrerequisites.Loyalty_requires_4MC = { target: 'Loyalty', number: 4, prereq: 'MC' };
NewSpells.MassDaze = new Skill( "Mass Daze", 'IQ', 2, libAbrv+66 );
NewSpells.MassDaze.classes = { reg: true, rht: true };
NewSpells.MassDaze.stats = { duration: '1 min', castcost: 2, maintaincost: 1, time: '1/energy spent', notes: 'min radius 2 yds' };
NewPrerequisites.MassDaze_requires_Daze = { target: 'MassDaze', prereq: 'Daze' };
NewPrerequisites.MassDaze_requires_IQ = { target: 'MassDaze', category: 'stat', level: 13, prereq: 'IQ' };
NewSpells.MassSleep = new Skill( "Mass Sleep", 'IQ', 2, libAbrv+67 );
NewSpells.MassSleep.classes = { area: true, rht: true };
NewSpells.MassSleep.stats = { castcost: 3, time: '1/pt spent', notes: 'Min radius 2 yds.' };
NewPrerequisites.MassSleep_requires_Sleep = { target: 'MassSleep', prereq: 'Sleep' };
NewPrerequisites.MassSleep_requires_IQ = { target: 'MassSleep', category: 'stat', level: 13, prereq: 'IQ' };
NewSpells.MassSuggestion = new Skill( "Mass Suggestion", 'IQ', 2, libAbrv+68 );
NewSpells.MassSuggestion.classes = { area: true, riq: true };
NewSpells.MassSuggestion.stats = { duration: '10 min', castcost: 4, maintaincost: 2, time: '1/energy spent', notes: "min radius 2" };
NewPrerequisites.MassSuggestion_requires_Suggestion = { target: 'MassSuggestion', prereq: 'Suggestion' };
NewSpells.MentalStun = new Skill( "Mental Stun", 'IQ', 2, libAbrv+66 );
NewSpells.MentalStun.classes = { reg: true, riq: true };
NewSpells.MentalStun.stats = { castcost: 2 };
NewPrerequisites.MentalStun_requires_Daze_pgroup1 = { target: 'MentalStun', prereq: 'Daze', pgroup: 1 };
NewPrerequisites.MentalStun_requires_Stun_pgroup1 = { target: 'MentalStun', prereq: 'Stun', pgroup: 1 };
NewSpells.Mindlessness = new Skill( "Mindlessness", 'IQ', 3, libAbrv+67 );
NewSpells.Mindlessness.classes = { reg: true, riq: true };
NewSpells.Mindlessness.stats = { castcost: 8, maintaincost: 4, duration: '1 min', time: 5 };
NewPrerequisites.Mindlessness_requires_Magery2 = { target: 'Mindlessness', level: 2, category: 'ADS', prereq: 'Magery' };
NewPrerequisites.Mindlessness_requires_Forgetfulness = { target: 'Mindlessness', prereq: 'Forgetfulness' };
NewSpells.PeacefulSleep = new Skill( "Peaceful Sleep", 'IQ', 2, libAbrv+67 );
NewSpells.PeacefulSleep.classes = { reg: true };
NewSpells.PeacefulSleep.stats = { duration: '8 hrs', castcost: 4, time: 30, notes: 'requires willing subject' };
NewPrerequisites.PeacefulSleep_requires_Sleep = { target: 'PeacefulSleep', prereq: 'Sleep' };
NewPrerequisites.PeacefulSleep_requires_Silence = { target: 'PeacefulSleep', prereq: 'Silence' };
NewSpells.PermanentForgetfulness = new Skill( "Permanent Forgetfulness", 'IQ', 3, libAbrv+66 );
NewSpells.PermanentForgetfulness.classes = { reg: true, riq: true };
NewSpells.PermanentForgetfulness.stats = { duration: 'permanent', castcost: 15, time: '1 hr', notes: 'Resisted by IQ or target skill' };
NewPrerequisites.PermanentForgetfulness_requires_Magery2 = { target: 'PermanentForgetfulness', level: 2, category: 'ADS', prereq: 'Magery' };
NewPrerequisites.PermanentForgetfulness_requires_IQ = { target: 'PermanentForgetfulness', category: 'stat', level: 13, prereq: 'IQ' };
NewPrerequisites.PermanentForgetfulness_requires_Forgetfulness = { target: 'PermanentForgetfulness', prereq: 'Forgetfulness' };
NewSpells.Madness = new Skill( "Madness", 'IQ', 2, libAbrv+67 );
NewSpells.Madness.classes = { reg: true, riq: true };
NewSpells.Madness.stats = { castcost: 4, maintaincost: 2, duration: '1 min', time: 2, notes: 'Resisted by IQ-2; see Magic3e p67 for effects.' };
NewPrerequisites.Madness_requires_Forgetfulness_pgroup1 = { target: 'Madness', prereq: 'Forgetfulness', pgroup: 1 };
NewPrerequisites.Madness_requires_Drunkenness_pgroup1   = { target: 'Madness', prereq: 'Drunkenness',   pgroup: 1 };
NewSpells.Nightmare = new Skill( "Nightmare", 'IQ', 2, libAbrv+67 );
NewSpells.Nightmare.classes = { reg: true, riq: true };
NewSpells.Nightmare.stats = { duration: '1 hr', castcost: 6, time: "1 min" };
NewPrerequisites.Nightmare_requires_Magery2 = { target: 'Nightmare', level: 2, category: 'ADS', prereq: 'Magery' };
NewPrerequisites.Nightmare_requires_DeathVision = { target: 'Nightmare', prereq: 'DeathVision' };
NewPrerequisites.Nightmare_requires_Fear = { target: 'Nightmare', prereq: 'Fear' };
NewPrerequisites.Nightmare_requires_Sleep = { target: 'Nightmare', prereq: 'Sleep' };
NewSpells.Panic = new Skill( "Panic", 'IQ', 2, libAbrv+65 );
NewSpells.Panic.classes = { area: true, riq: true };
NewSpells.Panic.stats = { castcost: 4, maintaincost: 2, duration: '1 min' };
NewPrerequisites.Panic_requires_Fear = { target: 'Panic', prereq: 'Fear' };
NewSpells.PermanentMadness = new Skill( "Permanent Madness", 'IQ', 3, libAbrv+67 );
NewSpells.PermanentMadness.classes = { reg: true, riq: true };
NewSpells.PermanentMadness.stats = { duration: 'permanent', castcost: 20, time: '10 min', notes: 'Resisted by IQ-2' };
NewPrerequisites.PermanentMadness_requires_Magery2 = { target: 'PermanentMadness', level: 2, category: 'ADS', prereq: 'Magery' };
NewPrerequisites.PermanentMadness_requires_IQ = { target: 'PermanentMadness', category: 'stat', level: 13, prereq: 'IQ' };
NewPrerequisites.PermanentMadness_requires_Madness = { target: 'PermanentMadness', prereq: 'Madness' };
NewSpells.RearVision = new Skill( "Rear Vision", 'IQ', 2, libAbrv+69 );
NewSpells.RearVision.classes = { reg: true };
NewSpells.RearVision.stats = { castcost: 3, maintaincost: 1, duration: '1 min' };
NewPrerequisites.RearVision_requires_Alertness = { target: 'RearVision', prereq: 'Alertness' };
NewSpells.Sickness = new Skill( "Sickness", 'IQ', 2, libAbrv+66 );
NewSpells.Sickness.classes = { reg: true, rht: true };
NewSpells.Sickness.stats = { duration: '1 min', castcost: 3, maintaincost: 3, time: 4 };
NewPrerequisites.Sickness_requires_Drunkenness_pgroup1 = { target: 'Sickness', prereq: 'Drunkenness', pgroup: 1 };
NewPrerequisites.Sickness_requires_Pestilence_pgroup1  = { target: 'Sickness', prereq: 'Pestilence',  pgroup: 1 };
NewSpells.Sleep = new Skill( "Sleep", 'IQ', 2, libAbrv+66 );
NewSpells.Sleep.classes = { reg: true, rht: true };
NewSpells.Sleep.stats = { castcost: 4, time: 3 };
NewPrerequisites.Sleep_requires_Daze = { target: 'Sleep', prereq: 'Daze' };
NewSpells.Suggestion = new Skill( "Suggestion", 'IQ', 2, libAbrv+68 );
NewSpells.Suggestion.classes = { reg: true, riq: true };
NewSpells.Suggestion.stats = { duration: '10 min', castcost: 4, maintaincost: 3, time: 10 };
NewPrerequisites.Suggestion_requires_EmotionControl = { target: 'Suggestion', prereq: 'EmotionControl' };
NewPrerequisites.Suggestion_requires_Forgetfulness = { target: 'Suggestion', prereq: 'Forgetfulness' };
NewSpells.Terror = new Skill( "Terror", 'IQ', 2, libAbrv+65 );
NewSpells.Terror.classes = { area: true, riq: true };
NewSpells.Terror.stats = { castcost: 1 };
NewPrerequisites.Terror_requires_Fear = { target: 'Terror', prereq: 'Fear' };
NewSpells.Wisdom = new Skill( "Wisdom", 'IQ', 2, libAbrv+68 );
NewSpells.Wisdom.classes = { reg: true };
NewSpells.Wisdom.stats = { duration: '1 min', castcost: '2/IQ+; max +5', maintaincost: 'same' };
NewPrerequisites.Wisdom_requires_6MC = { target: 'Wisdom', number: 6, prereq: 'MC' };

/* all spells below have been updated; should be final */
addToGroup("MovementSpells",
['Haste','QuickMarch','GreatHaste','Glue','Apportation','LightenBurden','SlowFall','Wallwalker',
'Poltergeist','Locksmith','Lockmaster','Manipulate','Undo','AirGolem','Levitation','Swim',
'Flight','HawkFlight','Teleport','Blink','TeleportOther','WingedKnife','EtherealBody']);
NewSpells.AirGolem = new Skill( "Air-Golem", 'IQ', 2, libAbrv+70 );
NewSpells.AirGolem.classes = { reg: true };
NewSpells.AirGolem.stats = { duration: "1 hr", castcost: 4, maintaincost: 2, time: 10 };
NewPrerequisites.AirGolem_requires_Magery2 = { target: 'AirGolem', prereq: 'Magery', level: 2, category: 'ADS' };
NewPrerequisites.AirGolem_requires_Apportation = { target: 'AirGolem', prereq: 'Apportation' };
NewSpells.Apportation = new Skill( "Apportation", 'IQ', 2, libAbrv+69 );
NewSpells.Apportation.classes = { reg: true, riq: true };
NewSpells.Apportation.stats = { duration: '1 min', castcost: "see Magic3e, p69", notes: "subject moves 1 yd/s" };
NewPrerequisites.Apportation_requires_Magery1 = { target: 'Apportation', category: 'ADS', prereq: 'Magery', level: 1 };
NewSpells.Blink = new Skill( "Blink", 'IQ', 2, libAbrv+71 );
NewSpells.Blink.classes = { block: true };
NewSpells.Blink.stats = { castcost: 2 };
NewPrerequisites.Blink_requires_Teleport = { target: 'Blink', prereq: 'Teleport' };
NewSpells.EtherealBody = new Skill( "Ethereal Body", 'IQ', 3, libAbrv+72 );
NewSpells.EtherealBody.classes = { reg: true };
NewSpells.EtherealBody.stats = { duration: "10 sec", castcost: 8, maintaincost: 4, time: 30 };
NewPrerequisites.EtherealBody_requires_Magery3_pgroup1   = { target: 'EtherealBody', prereq: 'Magery', level: 3, category: 'ADS', pgroup: 1 };
NewPrerequisites.EtherealBody_requires_6Movement_pgroup1 = { target: 'EtherealBody', prereq: 'Movement', number: 6,               pgroup: 1 };
NewPrerequisites.EtherealBody_requires_BodyofAir_pgroup2 = { target: 'EtherealBody', prereq: 'BodyofAir',                         pgroup: 2 };
NewPrerequisites.EtherealBody_requires_6Movement_pgroup2 = { target: 'EtherealBody', prereq: 'Movement', number: 6,               pgroup: 2 };
NewSpells.Flight = new Skill( "Flight", 'IQ', 3, libAbrv+71 );
NewSpells.Flight.classes = { reg: true };
NewSpells.Flight.stats = { duration: "1 min", castcost: 5, maintaincost: 3, time: 2 };
NewPrerequisites.Flight_requires_Magery2 = { target: 'Flight', level: 2, category: 'ADS', prereq: 'Magery' };
NewPrerequisites.Flight_requires_Levitation = { target: 'Flight', prereq: 'Levitation' };
NewSpells.Glue = new Skill( "Glue", 'IQ', 2, libAbrv+69 );
NewSpells.Glue.classes = { area: true };
NewSpells.Glue.stats = { duration: '10 min', castcost: 3, maintaincost: 3 };
NewPrerequisites.Glue_requires_Haste = { target: 'Glue', prereq: 'Haste' };
NewSpells.GreatHaste = new Skill( "Great Haste", 'IQ', 3, libAbrv+69 );
NewSpells.GreatHaste.classes = { reg: true };
NewSpells.GreatHaste.stats = { duration: "10 sec", castcost: 5, time: 3, notes: "at spell’s <i>end</i>, the <i>subject</i> also loses 5 FP (unless the caster was the subject)" };
NewPrerequisites.GreatHaste_requires_Magery1 = { target: 'GreatHaste', prereq: 'Magery', category: 'ADS',  level: 1 };
NewPrerequisites.GreatHaste_requires_Haste   = { target: 'GreatHaste', prereq: 'Haste' };
NewPrerequisites.GreatHaste_requires_IQ      = { target: 'GreatHaste', prereq: 'IQ',     category: 'stat', level: 12 };
NewSpells.Haste = new Skill( "Haste", 'IQ', 2, libAbrv+69 );
NewSpells.Haste.classes = { reg: true };
NewSpells.Haste.stats = { duration: '1 min', castcost: "2/Move+", maintaincost: '½ C2C', time: 2 };
NewSpells.HawkFlight = new Skill( "Hawk Flight", 'IQ', 3, libAbrv+71 );
NewSpells.HawkFlight.classes = { reg: true };
NewSpells.HawkFlight.stats = { duration: "1 min", castcost: 8, maintaincost: 4, time: 3 };
NewPrerequisites.HawkFlight_requires_Flight = { target: 'HawkFlight', prereq: 'Flight', category: 'spells' };
NewSpells.Levitation = new Skill( "Levitation", 'IQ', 2, libAbrv+70 );
NewSpells.Levitation.classes = { reg: true, riq: true };
NewSpells.Levitation.stats = { duration: "1 min", castcost: "1/80lbs; min 2", maintaincost: '½ C2C', time: 2, notes: "subject moves 3 yd/s" };
NewPrerequisites.Levitation_requires_Apportation = { target: 'Levitation', prereq: 'Apportation' };
NewSpells.LightenBurden = new Skill( "Lighten Burden", 'IQ', 2, libAbrv+69 );
NewSpells.LightenBurden.classes = { reg: true };
NewSpells.LightenBurden.stats = { duration: "10 min", castcost: "3: -25%, 5: -50% wt", maintaincost: '½ C2C', time: 3 };
NewPrerequisites.LightenBurden_requires_Apportation = { target: 'LightenBurden', prereq: 'Apportation' };
NewSpells.Lockmaster = new Skill( "Lockmaster", 'IQ', 2, libAbrv+70 );
NewSpells.Lockmaster.classes = { reg: true, rsp: true };
NewSpells.Lockmaster.stats = { castcost: 3, time: 10, notes: "resisted by Magelock" };
NewPrerequisites.Lockmaster_requires_Locksmith_pgroup1   = { target: 'Lockmaster', prereq: 'Locksmith',   pgroup: 1 };
NewPrerequisites.Lockmaster_requires_Magery2_pgroup1     = { target: 'Lockmaster', prereq: 'Magery',      pgroup: 1, level: 2, category: 'ADS' };
NewPrerequisites.Lockmaster_requires_Locksmith_pgroup2   = { target: 'Lockmaster', prereq: 'Locksmith',   pgroup: 2 };
NewPrerequisites.Lockmaster_requires_Apportation_pgroup2 = { target: 'Lockmaster', prereq: 'Apportation', pgroup: 2 };
NewSpells.Locksmith = new Skill( "Locksmith", 'IQ', 2, libAbrv+70 );
NewSpells.Locksmith.classes = { reg: true };
NewSpells.Locksmith.stats = { duration: "1 min", castcost: 2, maintaincost: 2, notes: "Allows manipulation of small parts for 1 minute.  Open locks at Lockpicking+5 with tools, or Lockpicking without.  Same bonus for Mechanic, <i>etc.</i>" };
NewPrerequisites.Locksmith_requires_Apportation = { target: 'Locksmith', prereq: 'Apportation' };
NewSpells.Manipulate = new Skill( "Manipulate", 'IQ', 2, libAbrv+70 );
NewSpells.Manipulate.classes = { reg: true };
NewSpells.Manipulate.stats = { duration: "1 min", castcost: "4/10lbs", maintaincost: "3/10lbs", time: 3 };
NewPrerequisites.Manipulate_requires_Locksmith = { target: 'Manipulate', prereq: 'Locksmith' };
NewSpells.Poltergeist = new Skill( "Poltergeist", 'IQ', 2, libAbrv+70 );
NewSpells.Poltergeist.classes = { msl: true, rht: true };
NewSpells.Poltergeist.stats = { castcost: "1: ≤10lbs (1d), 2: ≤25lbs (1d+1)" };
NewPrerequisites.Poltergeist_requires_Apportation = { target: 'Poltergeist', prereq: 'Apportation' };
NewSpells.QuickMarch = new Skill( "Quick March", 'IQ', 2, libAbrv+69 );
NewSpells.QuickMarch.classes = { reg: true };
NewSpells.QuickMarch.stats = { duration: "1 day's march", castcost: 4, time: "1 min", notes: "At the end of the day’s travel, the subject loses 10 FP and must sleep." };
NewPrerequisites.QuickMarch_requires_Magery1 = { target: 'QuickMarch', category: 'ADS', prereq: 'Magery', level: 1 };
NewPrerequisites.QuickMarch_requires_Haste   = { target: 'QuickMarch', prereq: 'Haste' };
NewSpells.SlowFall = new Skill( "Slow Fall", 'IQ', 2, libAbrv+69 );
NewSpells.SlowFall.classes = { reg: true };
NewSpells.SlowFall.stats = { duration: "1 min", castcost: "1/50 lbs", maintaincost: '½ C2C' };
NewPrerequisites.SlowFall_requires_Apportation = { target: 'SlowFall', prereq: 'Apportation' };
NewSpells.Swim = new Skill( "Swim", 'IQ', 2, libAbrv+70 );
NewSpells.Swim.classes = { reg: true };
NewSpells.Swim.stats = { duration: "1 min", castcost: 6, maintaincost: 3, time: 3 };
NewPrerequisites.Swim_requires_ShapeWater = { target: 'Swim', prereq: 'ShapeWater' };
NewPrerequisites.Swim_requires_Levitation = { target: 'Swim', prereq: 'Levitation' };
NewSpells.Teleport = new Skill( "Teleport", 'IQ', 3, libAbrv+71 );
NewSpells.Teleport.classes = { spcl: true };
NewSpells.Teleport.stats = { castcost: "3+", notes: "See Magic3e p71 for costs, distances, and skill penalties.  Body Sense roll to act on same turn." };
NewPrerequisites.Teleport_requires_HawkFlight_pgroup1 = { target: 'Teleport', prereq: 'HawkFlight',                       pgroup: 1 };
NewPrerequisites.Teleport_requires_IQ_pgroup1         = { target: 'Teleport', prereq: 'IQ', category: 'stat', level: 15,  pgroup: 1 };
NewPrerequisites.Teleport_requires_HawkFlight_pgroup2 = { target: 'Teleport', prereq: 'HawkFlight',                       pgroup: 2 };
NewPrerequisites.Teleport_requires_10colleges_pgroup2 = { target: 'Teleport', prereq: 'MagicColleges', number: 10, meta: true, pgroup: 2 };
NewSpells.TeleportOther = new Skill( "Teleport Other", 'IQ', 3, libAbrv+71 );
NewSpells.TeleportOther.classes = { reg: true, riq: true };
NewSpells.TeleportOther.stats = { castcost: "as Teleport, plus weight mods", notes: "resisted by IQ+1; see Magic3e p71 for costs, distances, weight multipliers, and skill penalties" };
NewPrerequisites.TeleportOther_requires_Magery3 = { target: 'TeleportOther', level: 3, category: 'ADS', prereq: 'Magery' };
NewPrerequisites.TeleportOther_requires_Teleport = { target: 'TeleportOther', prereq: 'Teleport' };
NewSpells.Undo = new Skill( "Undo", 'IQ', 2, libAbrv+70 );
NewSpells.Undo.classes = { reg: true, riq: true };
NewSpells.Undo.stats = { castcost: "2+1/fastening; 6 to Undo everything in a hex" };
NewPrerequisites.Undo_requires_Locksmith = { target: 'Undo', prereq: 'Locksmith' };
NewSpells.Wallwalker = new Skill( "Wallwalker", 'IQ', 2, libAbrv+70 );
NewSpells.Wallwalker.classes = { reg: true };
NewSpells.Wallwalker.stats = { duration: "1 min", castcost: "1/50 lbs; min 2", maintaincost: '½ C2C' };
NewPrerequisites.Wallwalker_requires_Apportation = { target: 'Wallwalker', prereq: 'Apportation' };
NewSpells.WingedKnife = new Skill( "Winged Knife", 'IQ', 2, libAbrv+72 );
NewSpells.WingedKnife.classes = { msl: true };
NewSpells.WingedKnife.stats = { castcost: "1/lb, min 2", notes: "1d+1, SS 13, Acc +1, ½D 20, Max 40; cost×2 for non-throwing weapon" };
NewPrerequisites.WingedKnife_requires_Poltergeist = { target: 'WingedKnife', prereq: 'Poltergeist' };

addToGroup("NecromanticSpells",
['DeathVision','SenseSpirit','SummonSpirit','SummonShade','Zombie','ControlZombie','TurnZombie',
'Resurrection','Animation','SkullSpirit','SoulJar','StealStrength','StealHealth','Age','StealYouth',
'Pestilence','PlanarSummons','SummonDemon','Banish']);
NewSpells.Age = new Skill( "Age", 'IQ', 3, libAbrv+74 );
NewSpells.Age.classes = { reg: true, rht: true };
NewSpells.Age.stats = { duration: "permanent", castcost: "5-50", time: "1 min" };
NewPrerequisites.Age_requires_6Ne_pgroup1   = { target: 'Age', prereq: 'Necromantic', number: 6, pgroup: 1 };
NewPrerequisites.Age_requires_Youth_pgroup1 = { target: 'Age', prereq: 'Youth',                  pgroup: 1 };
NewSpells.Animation = new Skill( "Animation", 'IQ', 3, libAbrv+73 );
NewSpells.Animation.classes = { reg: true };
NewSpells.Animation.stats = { castcost: 3, maintaincost: '½ cast cost', time: 5, notes: "Cost for larger creatures is in proportion to size. Double cost to animate stone; triple to animate metal." };
NewPrerequisites.Animation_requires_SummonSpirit = { target: 'Animation', prereq: 'SummonSpirit' };
NewSpells.Banish = new Skill( "Banish", 'IQ', 2, libAbrv+75 );
NewSpells.Banish.classes = { spcl: true };
NewSpells.Banish.stats = { castcost: "subject&rsqou;s (ST + IQ)/2.", time: 5, notes: "The caster will not know in advance how much energy the spell will require, and may fall unconscious or even wound himself in casting the Banish." };
NewPrerequisites.Banish_requires_Magery1    = { target: 'Banish', prereq: 'Magery', level: 1, category: 'ADS' };
NewPrerequisites.Banish_requires_10colleges = { target: 'Banish', number: 10, prereq: 'MagicColleges', meta: true };
NewSpells.ControlZombie = new Skill( "Control Zombie", 'IQ', 2, libAbrv+73 );
NewSpells.ControlZombie.classes = { reg: true };
NewSpells.ControlZombie.stats = { duration: "permanent", castcost: 3, notes: "Resisted by Zombie spell." };
NewPrerequisites.ControlZombie_requires_Zombie = { target: 'ControlZombie', prereq: 'Zombie' };
NewSpells.DeathVision = new Skill( "Death Vision", 'IQ', 2, libAbrv+72 );
NewSpells.DeathVision.classes = { reg: true };
NewSpells.DeathVision.stats = { duration: 7, castcost: 2, time: 3 };
NewPrerequisites.DeathVision_requires_Magery1 = { target: 'DeathVision', prereq: 'Magery', level: 1, category: 'ADS' };
NewSpells.Pestilence = new Skill( "Pestilence", 'IQ', 2, libAbrv+74 );
NewSpells.Pestilence.classes = { reg: true };
NewSpells.Pestilence.stats = { duration: "permanent", castcost: 6, time: 30 };
NewPrerequisites.Pestilence_requires_Magery1 = { target: 'Pestilence', prereq: 'Magery', level: 1, category: 'ADS' };
NewPrerequisites.Pestilence_requires_StealHealth = { target: 'Pestilence', prereq: 'StealHealth' };
NewPrerequisites.Pestilence_requires_Decay = { target: 'Pestilence', prereq: 'Decay' };
NewSpells.PlanarSummons = new Skill( "Planar Summons", 'IQ', 2, libAbrv+74 );
NewSpells.PlanarSummons.specRequiredList = [];
NewSpells.PlanarSummons.classes = { spcl: true };
NewSpells.PlanarSummons.stats = { duration: 'Varies according to the plane and the creature; only the GM knows. Many extra-planar creatures can stay indefinitely once summoned.', castcost: "Generally 20, but varies widely.", time: '5 min', notes: 'Each plane requires a different Summon spell.' };
NewPrerequisites.PlanarSummons_requires_Magery1 = { target: 'PlanarSummons', category: 'ADS', prereq: 'Magery', level: 1 };
NewPrerequisites.PlanarSummons_requires_10colleges = { target: 'PlanarSummons', number: 10, prereq: 'MagicColleges', meta: true };
// Resurrection under Healing spells
NewSpells.SenseSpirit = new Skill( "Sense Spirit", 'IQ', 2, libAbrv+72 );
NewSpells.SenseSpirit.classes = { info: true, area: true };
NewSpells.SenseSpirit.stats = { castcost: "½" };
NewPrerequisites.SenseSpirit_requires_DeathVision_pgroup1 = { target: 'SenseSpirit', prereq: 'DeathVision', pgroup: 1 };
NewPrerequisites.SenseSpirit_requires_SenseLife_pgroup1   = { target: 'SenseSpirit', prereq: 'SenseLife',   pgroup: 1 };
NewPrerequisites.SenseSpirit_requires_DeathVision_pgroup2 = { target: 'SenseSpirit', prereq: 'DeathVision', pgroup: 2 };
NewPrerequisites.SenseSpirit_requires_Magery1_pgroup2     = { target: 'SenseSpirit', prereq: 'Magery',      pgroup: 2, level: 1, category: 'ADS' };
NewSpells.SkullSpirit = new Skill( "Skull-Spirit", 'IQ', 2, libAbrv+73 );
NewSpells.SkullSpirit.classes = { reg: true };
NewSpells.SkullSpirit.stats = { duration: "24 hrs", castcost: 20 };
NewPrerequisites.SkullSpirit_requires_4Ne = { target: 'SkullSpirit', prereq: 'Necromantic', number: 4 };
NewSpells.SoulJar = new Skill( "Soul Jar", 'IQ', 3, libAbrv+73 );
NewSpells.SoulJar.classes = { reg: true };
NewSpells.SoulJar.stats = { duration: "permanent", castcost: 8, time: "1 min" };
NewPrerequisites.SoulJar_requires_Magery1 = { target: 'SoulJar', prereq: 'Magery', level: 1, category: 'ADS' };
NewPrerequisites.SoulJar_requires_6Ne = { target: 'SoulJar', number: 6, prereq: 'Necromantic' };
NewPrerequisites.SoulJar_requires_StealHealth = { target: 'SoulJar', prereq: 'StealHealth' };
NewSpells.StealHealth = new Skill( "Steal Health", 'IQ', 2, libAbrv+74 );
NewSpells.StealHealth.classes = { reg: true };
NewSpells.StealHealth.stats = { castcost: 0, time: "1 min / 3 HT drained", notes: "For every 3 HT taken from the subject, the caster regains 1 HT. The subject must either be willing or totally helpless (e.g., bound or unconscious). The caster must touch the subject." };
NewPrerequisites.StealHealth_requires_StealStrength = { target: 'StealHealth', prereq: 'StealStrength' };
NewSpells.StealStrength = new Skill( "Steal Strength", 'IQ', 2, libAbrv+73 );
NewSpells.StealStrength.classes = { reg: true };
NewSpells.StealStrength.stats = { castcost: 0, time: "1 min / 3 ST drained", notes: "For every 3 ST taken from the subject, the caster regains 1 ST. The subject must either be willing or totally helpless (e.g., bound or unconscious). The caster must touch the subject." };
NewPrerequisites.StealStrength_requires_MinorHealing = { target: 'StealStrength', prereq: 'MinorHealing' };
NewSpells.StealYouth = new Skill( "Steal Youth", 'IQ', 3, libAbrv+74 );
NewSpells.StealYouth.classes = { reg: true, rht: true };
NewSpells.StealYouth.stats = { duration: "permanent", castcost: "10-30", time: "1 hr" };
NewPrerequisites.StealYouth_requires_Youth = { target: 'StealYouth', prereq: 'Youth' };
NewPrerequisites.StealYouth_requires_Age = { target: 'StealYouth', prereq: 'Age' };
NewPrerequisites.StealYouth_requires_StealHealth = { target: 'StealYouth', prereq: 'StealHealth' };
NewSpells.SummonDemon = new Skill( "Summon Demon", 'IQ', 2, libAbrv+74 );
NewSpells.SummonDemon.classes = { spcl: true };
NewSpells.SummonDemon.stats = { duration: "varies", castcost: "Generally 20, but varies widely.", time: "5 min" };
NewPrerequisites.SummonDemon_requires_Magery1    = { target: 'SummonDemon', prereq: 'Magery', level: 1, category: 'ADS' };
NewPrerequisites.SummonDemon_requires_10colleges = { target: 'SummonDemon', number: 10, prereq: 'MagicColleges', meta: true };
NewSpells.SummonShade = new Skill( "Summon Shade", 'IQ', 3, libAbrv+72 );
NewSpells.SummonShade.classes = { info: true, riq: true };
NewSpells.SummonShade.stats = { duration: '1 min', castcost: 50, maintaincost: 20, time: '10 min', notes: 'One try per year.' };
NewPrerequisites.SummonShade_requires_SummonSpirit = { target: 'SummonShade', prereq: 'SummonSpirit' };
NewSpells.SummonSpirit = new Skill( "Summon Spirit", 'IQ', 2, libAbrv+72 );
NewSpells.SummonSpirit.classes = { info: true, riq: true };
NewSpells.SummonSpirit.stats = { duration: "1 min", castcost: 20, maintaincost: 10, time: "5 min", notes: "Halve these costs if the spell is cast at the site of death." };
NewPrerequisites.SummonSpirit_requires_Magery2 = { target: 'SummonSpirit', prereq: 'Magery', level: 2, category: 'ADS' };
NewPrerequisites.SummonSpirit_requires_DeathVision = { target: 'SummonSpirit', prereq: 'DeathVision' };
NewSpells.TurnZombie = new Skill( "Turn Zombie", 'IQ', 2, libAbrv+73 );
NewSpells.TurnZombie.classes = { area: true };
NewSpells.TurnZombie.stats = { duration: "turning lasts 1 day", castcost: 2, time: 4 };
NewPrerequisites.TurnZombie_requires_Zombie_pgroup1     = { target: 'TurnZombie', prereq: 'Zombie',     pgroup: 1 };
//NewPrerequisites.TurnZombie_requires_Holystatus_pgroup1 = { target: 'TurnZombie', prereq: 'Holystatus', pgroup: 1 };
NewSpells.Zombie = new Skill( "Zombie", 'IQ', 2, libAbrv+73 );
NewSpells.Zombie.classes = { reg: true };
NewSpells.Zombie.stats = { duration: "permanent", castcost: 8, time: "1 min", notes: "Cost for larger creatures is in proportion to size." };
NewPrerequisites.Zombie_requires_SummonSpirit = { target: 'Zombie', prereq: 'SummonSpirit' };
NewPrerequisites.Zombie_requires_LendHealth   = { target: 'Zombie', prereq: 'LendHealth' };

addToGroup("PlantSpells",
['SeekPlant','IdentifyPlant','HealPlant','ShapePlant','PlantGrowth','BlessPlants','CreatePlant',
'WitherPlant','ForestWarning','TangleGrowth','HidePath','PlantSense','AnimatePlant','PlantForm']);
NewSpells.AnimatePlant = new Skill( "Animate Plant", 'IQ', 2, libAbrv+76 );
NewSpells.AnimatePlant.classes = { reg: true };
NewSpells.AnimatePlant.stats = { duration: "1 min", castcost: 3, maintaincost: "½ cast cost", time: 5, notes: "Cost is in proportion to size. A large tree would require 12 or more points to animate. Double cost if the plant is to pull itself up and walk (Move 4) on its roots!" };
NewPrerequisites.AnimatePlant_requires_7Plant = { target: 'AnimatePlant', number: 7, prereq: 'Plant' };
NewSpells.BlessPlants = new Skill( "Bless Plants", 'IQ', 2, libAbrv+75 );
NewSpells.BlessPlants.classes = { area: true };
NewSpells.BlessPlants.stats = { duration: "1 crop or growing season", castcost: 3, maintaincost: 2, time: 10 };
NewPrerequisites.BlessPlants_requires_HealPlant = { target: 'BlessPlants', prereq: 'HealPlant' };
NewSpells.CreatePlant = new Skill( "Create Plant", 'IQ', 2, libAbrv+75 );
NewSpells.CreatePlant.classes = { area: true };
NewSpells.CreatePlant.stats = { duration: "permanent", castcost: "4: grasses, 8: bushes, 15: trees", time: "1 sec for each energy spent" };
NewPrerequisites.CreatePlant_requires_Magery1     = { target: 'CreatePlant', prereq: 'Magery', level: 1, category: 'ADS' };
NewPrerequisites.CreatePlant_requires_PlantGrowth = { target: 'CreatePlant', prereq: 'PlantGrowth' };
NewSpells.ForestWarning = new Skill( "Forest Warning", 'IQ', 2, libAbrv+76 );
NewSpells.ForestWarning.classes = { area: true };
NewSpells.ForestWarning.stats = { duration: "10 hrs", castcost: "½ (min 2)", maintaincost: "same" };
NewPrerequisites.ForestWarning_requires_SenseDanger_pgroup1 = { target: 'ForestWarning', prereq: 'SenseDanger',      pgroup: 1 };
NewPrerequisites.ForestWarning_requires_4Plant_pgroup1      = { target: 'ForestWarning', prereq: 'Plant', number: 4, pgroup: 1 };
NewSpells.HealPlant = new Skill( "Heal Plant", 'IQ', 2, libAbrv+75 );
NewSpells.HealPlant.classes = { area: true };
NewSpells.HealPlant.stats = { castcost: 3, time: "1 min" };
NewPrerequisites.HealPlant_requires_IdentifyPlant = { target: 'HealPlant', prereq: 'IdentifyPlant' };
NewSpells.HidePath = new Skill( "Hide Path", 'IQ', 2, libAbrv+76 );
NewSpells.HidePath.classes = { reg: true };
NewSpells.HidePath.stats = { duration: "1 min", castcost: 2, maintaincost: 1 };
NewPrerequisites.HidePath_requires_HealPlant = { target: 'HidePath', prereq: 'HealPlant' };
NewSpells.IdentifyPlant = new Skill( "Identify Plant", 'IQ', 2, libAbrv+75 );
NewSpells.IdentifyPlant.classes = { info: true };
NewSpells.IdentifyPlant.stats = { castcost: 2 };
NewPrerequisites.IdentifyPlant_requires_SeekPlant = { target: 'IdentifyPlant', prereq: 'SeekPlant' };
NewSpells.PlantForm = new Skill( "Plant Form", 'IQ', 2, libAbrv+76 );
NewSpells.PlantForm.classes = { spcl: true };
NewSpells.PlantForm.stats = { duration: "1 hr", castcost: 5, maintaincost: 2, time: 2 };
NewPrerequisites.PlantForm_requires_Magery1 = { target: 'PlantForm', prereq: 'Magery', level: 1, category: 'ADS' };
NewPrerequisites.PlantForm_requires_6Plant  = { target: 'PlantForm', prereq: 'Plant', number: 6 };
NewSpells.PlantGrowth = new Skill( "Plant Growth", 'IQ', 2, libAbrv+75 );
NewSpells.PlantGrowth.classes = { area: true };
NewSpells.PlantGrowth.stats = { duration: "1 min", castcost: 3, maintaincost: 2, time: 10 };
NewPrerequisites.PlantGrowth_requires_HealPlant = { target: 'PlantGrowth', prereq: 'HealPlant' };
NewSpells.PlantSense = new Skill( "Plant Sense", 'IQ', 2, libAbrv+76 );
NewSpells.PlantSense.classes = { reg: true };
NewSpells.PlantSense.stats = { duration: "1 min", castcost: 3, maintaincost: 2, notes: "Resisted by Hide Path" };
NewPrerequisites.PlantSense_requires_ForestWarning = { target: 'PlantSense', prereq: 'ForestWarning' };
NewPrerequisites.PlantSense_requires_HidePath      = { target: 'PlantSense', prereq: 'HidePath' };
NewSpells.SeekPlant = new Skill( "Seek Plant", 'IQ', 2, libAbrv+75 );
NewSpells.SeekPlant.classes = { info: true };
NewSpells.SeekPlant.stats = { castcost: 2 };
NewSpells.ShapePlant = new Skill( "Shape Plant", 'IQ', 2, libAbrv+75 );
NewSpells.ShapePlant.classes = { reg: true };
NewSpells.ShapePlant.stats = { duration: "1 min", castcost: 3, maintaincost: 1, time: 10, notes: "Double cost if the material is no longer living." };
NewPrerequisites.ShapePlant_requires_IdentifyPlant = { target: 'ShapePlant', prereq: 'IdentifyPlant' };
NewSpells.TangleGrowth = new Skill( "Tangle Growth", 'IQ', 2, libAbrv+76 );
NewSpells.TangleGrowth.classes = { area: true };
NewSpells.TangleGrowth.stats = { duration: "1 min", castcost: "1 for grass, 2 for bushes or trees", maintaincost: "½ cast cost", time: 2 };
NewPrerequisites.TangleGrowth_requires_PlantGrowth = { target: 'TangleGrowth', prereq: 'PlantGrowth' };
NewSpells.WitherPlant = new Skill( "Wither Plant", 'IQ', 2, libAbrv+76 );
NewSpells.WitherPlant.classes = { area: true, rht: true };
NewSpells.WitherPlant.stats = { duration: "permanent", castcost: 2, time: 10 };
NewPrerequisites.WitherPlant_requires_PlantGrowth = { target: 'WitherPlant', prereq: 'PlantGrowth' };

addToGroup("ProtectionWarningSpells",
['ShieldSpell','Armor','SenseDanger','Watchdog','Nightingale','MysticMist','MissileShield','ReverseMissiles',
'IronArm','Magelock','TeleportShield','WeatherDome','ForceDome','UtterDome','Umbrella']);
NewSpells.Armor = new Skill( "Armor", 'IQ', 2, libAbrv+76 );
NewSpells.Armor.classes = { reg: true };
NewSpells.Armor.stats = { duration: "1 min", castcost: "2/DR+; max +5", maintaincost: "½ cast cost" };
NewPrerequisites.Armor_requires_Magery2 = { target: 'Armor', prereq: 'Magery', level: 2, category: 'ADS' };
NewPrerequisites.Armor_requires_Repair  = { target: 'Armor', prereq: 'Repair' };
NewSpells.ForceDome = new Skill( "Force Dome", 'IQ', 2, libAbrv+78 );
NewSpells.ForceDome.classes = { area: true };
NewSpells.ForceDome.stats = { duration: "10 min", castcost: 3, maintaincost: 2 };
NewPrerequisites.ForceDome_requires_Magery1     = { target: 'ForceDome', prereq: 'Magery', level: 1, category: 'ADS' };
NewPrerequisites.ForceDome_requires_WeatherDome = { target: 'ForceDome', prereq: 'WeatherDome' };
NewPrerequisites.ForceDome_requires_Apportation = { target: 'ForceDome', prereq: 'Apportation' };
NewSpells.IronArm = new Skill( "Iron Arm", 'IQ', 2, libAbrv+77 );
NewSpells.IronArm.classes = { block: true };
NewSpells.IronArm.stats = { castcost: 1 };
NewPrerequisites.IronArm_requires_ResistPain = { target: 'IronArm', prereq: 'ResistPain' };
NewPrerequisites.IronArm_requires_DX12       = { target: 'IronArm', prereq: 'DX', level: 12, category: 'stat' };
NewSpells.Nightingale = new Skill( "Nightingale", 'IQ', 2, libAbrv+77 );
NewSpells.Nightingale.classes = { area: true };
NewSpells.Nightingale.stats = { duration: "10 hr", castcost: 2, maintaincost: 2 };
NewPrerequisites.Nightingale_requires_SenseDanger = { target: 'Nightingale', prereq: 'SenseDanger' };
NewSpells.Magelock = new Skill( "Magelock", 'IQ', 2, libAbrv+77 );
NewSpells.Magelock.classes = { reg: true };
NewSpells.Magelock.stats = { duration: "6 hr", castcost: 3, maintaincost: 2, time: 4, notes: "resists Lockmaster spell" };
NewPrerequisites.Magelock_requires_Magery1 = { target: 'Magelock', prereq: 'Magery', level: 1, category: 'ADS' };
NewSpells.MissileShield = new Skill( "Missile Shield", 'IQ', 2, libAbrv+77 );
NewSpells.MissileShield.classes = { reg: true },
NewSpells.MissileShield.stats = { duration: "1 min", castcost: 5, maintaincost: 2 };
NewPrerequisites.MissileShield_requires_Apportation_pgroup1 = { target: 'MissileShield', prereq: 'Apportation', pgroup: 1 };
NewPrerequisites.MissileShield_requires_ShieldSpell_pgroup1 = { target: 'MissileShield', prereq: 'ShieldSpell', pgroup: 1 };
NewSpells.MysticMist = new Skill( "Mystic Mist", 'IQ', 2, libAbrv+77 );
NewSpells.MysticMist.classes = { area: true };
NewSpells.MysticMist.stats = { duration: "10 hr", castcost: 1, maintaincost: "same", time: "5 min" };
NewPrerequisites.MysticMist_requires_Magery1             = { target: 'MysticMist', prereq: 'Magery', level: 1, category: 'ADS' };
NewPrerequisites.MysticMist_requires_Watchdog_pgroup1    = { target: 'MysticMist', prereq: 'Watchdog',    pgroup: 1 };
NewPrerequisites.MysticMist_requires_ShieldSpell_pgroup1 = { target: 'MysticMist', prereq: 'ShieldSpell', pgroup: 1 };
NewSpells.ReverseMissiles = new Skill( "Reverse Missiles", 'IQ', 2, libAbrv+77 );
NewSpells.ReverseMissiles.classes = { reg: true };
NewSpells.ReverseMissiles.stats = { duration: "1 min", castcost: 7, maintaincost: 3 };
NewPrerequisites.ReverseMissiles_requires_MissileShield_pgroup1 = { target: 'ReverseMissiles', prereq: 'MissileShield', pgroup: 1 };
NewPrerequisites.ReverseMissiles_requires_ForceDome_pgroup1     = { target: 'ReverseMissiles', prereq: 'ForceDome',     pgroup: 1 };
NewSpells.SenseDanger = new Skill( "Sense Danger", 'IQ', 2, libAbrv+76 );
NewSpells.SenseDanger.classes = { info: true };
NewSpells.SenseDanger.stats = { castcost: 3 };
NewPrerequisites.SenseDanger_requires_SenseFoes_pgroup1   = { target: 'SenseDanger', prereq: 'SenseFoes',   pgroup: 1 };
NewPrerequisites.SenseDanger_requires_DangerSense_pgroup1 = { target: 'SenseDanger', prereq: 'DangerSense', pgroup: 1, category: 'AD' };
NewSpells.ShieldSpell = new Skill( "Shield", 'IQ', 2, libAbrv+76 );
NewSpells.ShieldSpell.stats = { time: 1, duration: "1 min", castcost: "2/PD+; max +5", maintaincost: "½ cast cost" },
NewSpells.ShieldSpell.classes = { reg: true },
NewPrerequisites.ShieldSpell_requires_Magery2 = { target: 'ShieldSpell', prereq: 'Magery', level: 2, category: 'ADS' };
NewSpells.TeleportShield = new Skill( "Teleport Shield", 'IQ', 2, libAbrv+78 );
NewSpells.TeleportShield.classes = { area: true };
NewSpells.TeleportShield.stats = { duration: "1 hr", castcost: "⅓; min 3 yds", maintaincost: "same", time: 10, notes: "Any attempt to Teleport (or Blink) into or out of the area of effect is at -5 to skill. Doubling the energy cost increases the penalty to -10; tripling it increases the penalty to -15!" };
NewPrerequisites.TeleportShield_requires_Watchdog            = { target: 'TeleportShield', prereq: 'Watchdog' };
NewPrerequisites.TeleportShield_requires_SpellShield_pgroup1 = { target: 'TeleportShield', prereq: 'SpellShield', pgroup: 1 };
NewPrerequisites.TeleportShield_requires_Teleport_pgroup1    = { target: 'TeleportShield', prereq: 'Teleport',    pgroup: 1 };
NewSpells.UtterDome = new Skill( "Utter Dome", 'IQ', 2, libAbrv+78 );
NewSpells.UtterDome.classes = { area: true };
NewSpells.UtterDome.stats = { duration: "1 min", castcost: 6, maintaincost: 4 };
NewPrerequisites.UtterDome_requires_Magery2     = { target: 'UtterDome', prereq: 'Magery', level: 2, category: 'ADS' };
NewPrerequisites.UtterDome_requires_ForceDome   = { target: 'UtterDome', prereq: 'ForceDome' };
NewPrerequisites.UtterDome_requires_SpellShield = { target: 'UtterDome', prereq: 'SpellShield' };
NewSpells.Watchdog = new Skill( "Watchdog", 'IQ', 2, libAbrv+77 );
NewSpells.Watchdog.classes = { area: true };
NewSpells.Watchdog.stats = { duration: "10 hr", castcost: 1, maintaincost: 1, time: 10 };
NewPrerequisites.Watchdog_requires_SenseDanger = { target: 'Watchdog', prereq: 'SenseDanger' };
NewSpells.WeatherDome = new Skill( "Weather Dome", 'IQ', 2, libAbrv+78 );
NewSpells.WeatherDome.classes = { area: true };
NewSpells.WeatherDome.stats = { duration: "6 hr", castcost: 3, maintaincost: 2 };
NewPrerequisites.WeatherDome_requires_2Air   = { target: 'WeatherDome', prereq: 'Air',   number: 2 };
NewPrerequisites.WeatherDome_requires_2Earth = { target: 'WeatherDome', prereq: 'Earth', number: 2 };
NewPrerequisites.WeatherDome_requires_2Fire  = { target: 'WeatherDome', prereq: 'Fire',  number: 2 };
NewPrerequisites.WeatherDome_requires_2Water = { target: 'WeatherDome', prereq: 'Water', number: 2 };
// Umbrella under Water spells

addToGroup("SeekSpells",['SeekEarth','SeekFood','SeekPlant','SeekWater']);
addToGroup("SoundSpells",
['Sound','Voices','Thunderclap','GreatVoice','SoundJet','Silence','WallofSilence','Noise','Hush',
'MageStealth','FarHearing','KeenEars','SoundVision','Scribe','WizardEar','InvisibleWizardEar','DelayedMessage']);
NewSpells.DelayedMessage = new Skill( "Delayed Message", 'IQ', 2, libAbrv+79 );
NewSpells.DelayedMessage.classes = { area: true };
NewSpells.DelayedMessage.stats = { duration: "until the specified person arrives", castcost: "3/sentence-idea", time: 4 };
NewPrerequisites.DelayedMessage_requires_Magery1   = { target: 'DelayedMessage', prereq: 'Magery', level: 1, category: 'ADS' };
NewPrerequisites.DelayedMessage_requires_Voices    = { target: 'DelayedMessage', prereq: 'Voices' };
NewPrerequisites.DelayedMessage_requires_SenseLife = { target: 'DelayedMessage', prereq: 'SenseLife' };
NewSpells.FarHearing = new Skill( "Far-Hearing", 'IQ', 2, libAbrv+79 );
NewSpells.FarHearing.classes = { info: true };
NewSpells.FarHearing.stats = { duration: "1 min", castcost: 4, maintaincost: 2, time: 3, notes: "caster must NOT be Deaf or Hard Of Hearing" };
NewPrerequisites.FarHearing_requires_Magery1 = { target: 'FarHearing', prereq: 'Magery', level: 1, category: 'ADS' };
NewPrerequisites.FarHearing_requires_4Sound  = { target: 'FarHearing', prereq: 'Sound', number: 4 };
NewSpells.GreatVoice = new Skill( "Great Voice", 'IQ', 2, libAbrv+78 );
NewSpells.GreatVoice.classes = { reg: true };
NewSpells.GreatVoice.stats = { duration: "1 min", castcost: 3, maintaincost: 1, time: 2 };
NewPrerequisites.GreatVoice_requires_Voices      = { target: 'GreatVoice', prereq: 'Voices' };
NewPrerequisites.GreatVoice_requires_Thunderclap = { target: 'GreatVoice', prereq: 'Thunderclap' };
NewSpells.Hush = new Skill( "Hush", 'IQ', 2, libAbrv+79 );
NewSpells.Hush.classes = { reg: true, riq: true };
NewSpells.Hush.stats = { duration: "1 min (10 sec if resistance tried)", castcost: 2, maintaincost: 1, time: 2 };
NewPrerequisites.Hush_requires_Silence = { target: 'Hush', prereq: 'Silence' };
NewSpells.InvisibleWizardEar = new Skill( "Invisible Wizard Ear", 'IQ', 2, libAbrv+79 );
NewSpells.InvisibleWizardEar.classes = { reg: true };
NewSpells.InvisibleWizardEar.stats = { duration: "1 min", castcost: 5, maintaincost: 3, time: 4 };
NewPrerequisites.InvisibleWizardEar_requires_WizardEar    = { target: 'InvisibleWizardEar', prereq: 'WizardEar' };
NewPrerequisites.InvisibleWizardEar_requires_Invisibility = { target: 'InvisibleWizardEar', prereq: 'Invisibility' };
// KeenEars under Water spells
NewSpells.MageStealth = new Skill( "Mage-Stealth", 'IQ', 2, libAbrv+79 );
NewSpells.MageStealth.classes = { reg: true };
NewSpells.MageStealth.stats = { duration: "1 min", castcost: 3, maintaincost: 2, time: 3 };
NewPrerequisites.MageStealth_requires_Hush = { target: 'MageStealth', prereq: 'Hush' };
NewSpells.Noise = new Skill( "Noise", 'IQ', 2, libAbrv+79 );
NewSpells.Noise.classes = { area: true };
NewSpells.Noise.stats = { duration: "5 sec", castcost: 4, maintaincost: 2 };
NewPrerequisites.Noise_requires_WallofSilence = { target: 'Noise', prereq: 'WallofSilence' };
NewSpells.Scribe = new Skill( "Scribe", 'IQ', 2, libAbrv+79 );
NewSpells.Scribe.classes = { reg: true };
NewSpells.Scribe.stats = { duration: "1 min", castcost: 3, maintaincost: 1 };
NewPrerequisites.Scribe_requires_Voices   = { target: 'Scribe', prereq: 'Voices' };
NewPrerequisites.Scribe_requires_AirGolem = { target: 'Scribe', prereq: 'AirGolem' };
NewPrerequisites.Scribe_requires_Literacy = { target: 'Scribe', prereq: 'Literacy', category: 'ADS' };
NewSpells.Silence = new Skill( "Silence", 'IQ', 2, libAbrv+78 );
NewSpells.Silence.classes = { area: true };
NewSpells.Silence.stats = { duration: "1 min", castcost: 2, maintaincost: 1 };
NewPrerequisites.Silence_requires_Sound = { target: 'Silence', prereq: 'Sound' };
NewSpells.Sound = new Skill( "Sound", 'IQ', 2, libAbrv+78 );
NewSpells.Sound.classes = { reg: true };
NewSpells.Sound.stats = { duration: "5 sec or 1 min", castcost: "2 (1 for 5 sec)", maintaincost: "1/min" };
NewSpells.SoundJet = new Skill( "Sound Jet", 'IQ', 2, libAbrv+78 );
NewSpells.SoundJet.classes = { reg: true };
NewSpells.SoundJet.stats = { duration: "1 sec", castcost: "1-4", maintaincost: "same", notes: "Range in yards is equal to energy cost." };
NewPrerequisites.SoundJet_requires_GreatVoice = { target: 'SoundJet', prereq: 'GreatVoice' };
NewSpells.SoundVision = new Skill( "Sound Vision", 'IQ', 2, libAbrv+79 );
NewSpells.SoundVision.classes = { reg: true };
NewSpells.SoundVision.stats = { duration: "1 min", castcost: 5, maintaincost: 2 };
NewPrerequisites.SoundVision_requires_AcuteHearing_pgroup1 = { target: 'SoundVision', prereq: 'AcuteHearing', category: ' ADS', pgroup: 1 };
NewPrerequisites.SoundVision_requires_KeenEars_pgroup1     = { target: 'SoundVision', prereq: 'KeenEars',                       pgroup: 1 };
NewSpells.Thunderclap = new Skill( "Thunderclap", 'IQ', 2, libAbrv+78 );
NewSpells.Thunderclap.classes = { reg: true };
NewSpells.Thunderclap.stats = { castcost: 2 };
NewPrerequisites.Thunderclap_requires_Sound = { target: 'Thunderclap', prereq: 'Sound' };
NewSpells.Voices = new Skill( "Voices", 'IQ', 2, libAbrv+78 );
NewSpells.Voices.classes = { reg: true };
NewSpells.Voices.stats = { duration: "1 min", castcost: 3, maintaincost: 2 };
NewPrerequisites.Voices_requires_Sound = { target: 'Voices', prereq: 'Sound' };
NewSpells.WallofSilence = new Skill( "Wall of Silence", 'IQ', 2, libAbrv+79 );
NewSpells.WallofSilence.classes = { area: true };
NewSpells.WallofSilence.stats = { duration: "1 min", castcost: 2, maintaincost: 1 };
NewPrerequisites.WallofSilence_requires_Silence = { target: 'WallofSilence', prereq: 'Silence' };
NewSpells.WizardEar = new Skill( "Wizard Ear", 'IQ', 2, libAbrv+79 );
NewSpells.WizardEar.classes = { reg: true };
NewSpells.WizardEar.stats = { duration: "1 min", castcost: 4, maintaincost: 3, time: 2 };
NewPrerequisites.WizardEar_requires_Apportation = { target: 'WizardEar', prereq: 'Apportation' };
NewPrerequisites.WizardEar_requires_FarHearing  = { target: 'WizardEar', prereq: 'FarHearing' };
NewPrerequisites.WizardEar_requires_SoundVision = { target: 'WizardEar', prereq: 'SoundVision' };



NewAdjustments.PlantSpells_from_TreeKin = { from: 'TreeKin', fromCategory: 'AD', amount: 1, targetCategory: 'GR', target: 'PlantSpells' };



addToGroup("MagicalSkills",['Alchemy','BodySense','MagicBreath','MagicJet','RuneLore','SpellThrowing']);

NewSkills.RuneLore = new Skill( "Rune-Lore", 'IQ', 3, libAbrv+90 );
NewSkills.RuneLore.specRequiredList = [];
// Rune skills
NewSkills.RuneVerbCreate = new Skill( "Rune: Create", 'IQ', 2, libAbrv+91 );
NewSkills.RuneVerbCreate.specRequiredList = [];
NewSkills.RuneVerbControl = new Skill( "Rune: Control", 'IQ', 2, libAbrv+91 );
NewSkills.RuneVerbControl.specRequiredList = [];
NewSkills.RuneVerbHeal = new Skill( "Rune: Heal", 'IQ', 2, libAbrv+91 );
NewSkills.RuneVerbHeal.specRequiredList = [];
NewSkills.RuneVerbTransform = new Skill( "Rune: Transform", 'IQ', 2, libAbrv+91 );
NewSkills.RuneVerbTransform.specRequiredList = [];
NewSkills.RuneVerbSense = new Skill( "Rune: Sense", 'IQ', 2, libAbrv+91 );
NewSkills.RuneVerbSense.specRequiredList = [];
NewSkills.RuneVerbCommunicate = new Skill( "Rune: Communicate", 'IQ', 1, libAbrv+91 );
NewSkills.RuneVerbCommunicate.specRequiredList = [];
NewSkills.RuneVerbWeaken = new Skill( "Rune: Weaken", 'IQ', 1, libAbrv+91 );
NewSkills.RuneVerbWeaken.specRequiredList = [];
NewSkills.RuneVerbStrengthen = new Skill( "Rune: Strengthen", 'IQ', 1, libAbrv+91 );
NewSkills.RuneVerbStrengthen.specRequiredList = [];
NewSkills.RuneVerbMove = new Skill( "Rune: Move", 'IQ', 1, libAbrv+91 );
NewSkills.RuneVerbMove.specRequiredList = [];
NewSkills.RuneVerbProtect = new Skill( "Rune: Protect", 'IQ', 1, libAbrv+91 );
NewSkills.RuneVerbProtect.specRequiredList = [];
NewSkills.RuneVerbWarn = new Skill( "Rune: Warn", 'IQ', 1, libAbrv+91 );
NewSkills.RuneVerbWarn.specRequiredList = [];
NewSkills.RuneNounEarth = new Skill( "Rune: Earth", 'IQ', 2, libAbrv+91 );
NewSkills.RuneNounEarth.specRequiredList = [];
NewSkills.RuneNounAnimal = new Skill( "Rune: Animal", 'IQ', 2, libAbrv+91 );
NewSkills.RuneNounAnimal.specRequiredList = [];
NewSkills.RuneNounMagic = new Skill( "Rune: Magic", 'IQ', 2, libAbrv+91 );
NewSkills.RuneNounMagic.specRequiredList = [];
NewSkills.RuneNounBodyMan = new Skill( "Rune: Body", 'IQ', 2, libAbrv+91 );
NewSkills.RuneNounBodyMan.specRequiredList = [];
NewSkills.RuneNounMind = new Skill( "Rune: Mind", 'IQ', 2, libAbrv+91 );
NewSkills.RuneNounMind.specRequiredList = [];
NewSkills.RuneNounUndead = new Skill( "Rune: Undead", 'IQ', 2, libAbrv+91 );
NewSkills.RuneNounUndead.specRequiredList = [];
NewSkills.RuneNounAir = new Skill( "Rune: Air", 'IQ', 1, libAbrv+91 );
NewSkills.RuneNounAir.specRequiredList = [];
NewSkills.RuneNounFire = new Skill( "Rune: Fire", 'IQ', 1, libAbrv+91 );
NewSkills.RuneNounFire.specRequiredList = [];
NewSkills.RuneNounWater = new Skill( "Rune: Water", 'IQ', 1, libAbrv+91 );
NewSkills.RuneNounWater.specRequiredList = [];
NewSkills.RuneNounPlant = new Skill( "Rune: Plant", 'IQ', 1, libAbrv+91 );
NewSkills.RuneNounPlant.specRequiredList = [];
NewSkills.RuneNounIllusion = new Skill( "Rune: Illusion", 'IQ', 1, libAbrv+91 );
NewSkills.RuneNounIllusion.specRequiredList = [];
NewSkills.RuneNounLightDark = new Skill( "Rune: Light/Dark", 'IQ', 1, libAbrv+91 );
NewSkills.RuneNounLightDark.specRequiredList = [];
NewSkills.RuneNounFood = new Skill( "Rune: Food", 'IQ', 0, libAbrv+91 );
NewSkills.RuneNounFood.specRequiredList = [];
NewSkills.RuneNounSound = new Skill( "Rune: Sound", 'IQ', 0, libAbrv+91 );
NewSkills.RuneNounSound.specRequiredList = [];

NewSkills.Alchemy = new Skill( "Alchemy", 'IQ', 3, libAbrv+98 );
NewDefaults.Alchemy_no_stat_default = { target: 'Alchemy', penalty: false, category: 'stat' };
NewSkills.BodySense = new Skill( "Body Sense", 'DX', 2, libAbrv+105 );
NewDefaults.BodySense_from_Acrobatics = { target: 'BodySense', penalty: -3, category: 'SK', from: 'Acrobatics' };
NewAdjustments.BodySense_from_AbsoluteDirection = { from: 'AbsoluteDirection', fromCategory: 'AD', amount: 3, targetCategory: 'SK', target: 'BodySense' };
NewSkills.MagicBreath = new Skill( "Magic Breath", 'DX', 0, libAbrv+105 );
NewDefaults.MagicBreath_from_DX = { target: 'MagicBreath', penalty: -2, from: 'DX' };
NewSkills.MagicJet = new Skill( "Magic Jet", 'DX', 0, libAbrv+105 );
NewSkills.SpellThrowing = new Skill( "Spell Throwing", 'DX', 0, libAbrv+105 );
NewSkills.SpellThrowing.specRequiredList = ['Fireball','Curse-Missile','Ice Dagger','Ice Sphere/Stone Missile','Lightning','Poltergeist','Winged Knife'];
NewDefaults.SpellThrowing_from_DX       = { target: 'SpellThrowing', penalty: -3, from: 'DX' };
NewDefaults.SpellThrowing_from_Throwing = { target: 'SpellThrowing', penalty: 0, category: 'SK', from: 'Throwing' };
NewDefaults.SpellThrowing_from_SpellThrowing = { target: 'SpellThrowing', penalty: -3, from: 'SpellThrowing', fromSpec: 'other' };


NewTraits.MagicResistance     = new Trait( "Magic Resistance", 'A', 'M', 2, true, libAbrv+103 );
NewTraits.MagicResistance.exoticSprntl = 'Supernatural'
NewTraits.MagicResistance.group = 'magery';
NewTraits.BlessedDivination = new Trait( "Blessed, Divination", 'A', 'M', 10, true, libAbrv+96 );
NewTraits.BlessedDivination.highestLevel = 2;
NewTraits.BlessedDivination.description = [];
NewTraits.BlessedDivination.exoticSprntl = 'Supernatural';
NewTraits.DivinationTalent = new Trait( "Divination Talent", 'A', 'M', 5, true, libAbrv+105 );
NewTraits.DivinationTalent.description = [];
NewTraits.DivinationTalent.instructions = 'specify one divination spell';


NewEquipment.Achilles    = new Equipment( 'Achilles',        0, 2100,  null, null, libAbrv+"100" ); NewEquipment.Achilles.description = 'Elixer of Invulnerability';
NewEquipment.Aesculapius = new Equipment( 'Aesculapius',     0, 750,   null, null, libAbrv+"101" ); NewEquipment.Aesculapius.description = 'Elixer of Health';
NewEquipment.Agni        = new Equipment( 'Agni',            0, 500,   null, null, libAbrv+"101" ); NewEquipment.Agni.description = 'Elixer of Fire Resistance';
NewEquipment.Antaeus     = new Equipment( 'Antaeus',         0, 1400,  null, null, libAbrv+"100" ); NewEquipment.Antaeus.description = 'Elixer of Endurance';
NewEquipment.Apollo      = new Equipment( 'Apollo',          0, 2000,  null, null, libAbrv+"102" ); NewEquipment.Apollo.description = 'Elixer of Foreknowledge';
NewEquipment.Ares        = new Equipment( 'Ares',            0, 350,   null, null, libAbrv+"100" ); NewEquipment.Ares.description = 'Elixer of the Warrior';
NewEquipment.Argus       = new Equipment( 'Argus',           0, 400,   null, null, libAbrv+"102" ); NewEquipment.Argus.description = 'Elixer of Vision';
NewEquipment.Atalanta    = new Equipment( 'Atalanta',        0, 550,   null, null, libAbrv+"100" ); NewEquipment.Atalanta.description = 'Elixer of Speed';
NewEquipment.Bellerophon = new Equipment( 'Bellerophon',     0, 1000,  null, null, libAbrv+"100" ); NewEquipment.Bellerophon.description = 'Elixer of Odiousness';
NewEquipment.Cadmus      = new Equipment( 'Cadmus pastille', 0, 1300,  null, null, libAbrv+"100" ); NewEquipment.Cadmus.description = 'Elixer of Dragonslaying';
NewEquipment.Ceres       = new Equipment( 'Ceres',           0, 6000,  null, null, libAbrv+"101" ); NewEquipment.Ceres.description = 'Elixer of Fertility';
NewEquipment.Chiron      = new Equipment( 'Chiron',          0, 120,   null, null, libAbrv+"101" ); NewEquipment.Chiron.description = 'Elixer of Healing';
NewEquipment.Circe       = new Equipment( 'Circe',           0, 3000,  null, null, libAbrv+"101" ); NewEquipment.Circe.description = 'Elixer of Transformation';
NewEquipment.Daedalus    = new Equipment( 'Daedalus',        0, 3000,  null, null, libAbrv+"101" ); NewEquipment.Daedalus.description = 'Elixer of Flight';
NewEquipment.Delphi      = new Equipment( 'Delphi',          0, 550,   null, null, libAbrv+"101" ); NewEquipment.Delphi.description = 'Elixer of True Sight';
NewEquipment.Ephialtes   = new Equipment( 'Ephialtes',       0, 700,   null, null, libAbrv+"101" ); NewEquipment.Ephialtes.description = 'Elixer of Water-Walking';
NewEquipment.Epimenides  = new Equipment( 'Epimenides',      0, 1000,  null, null, libAbrv+"101" ); NewEquipment.Epimenides.description = 'Elixer of Long Slumber';
NewEquipment.Epimetheus  = new Equipment( 'Epimetheus',      0, 1500,  null, null, libAbrv+"102" ); NewEquipment.Epimetheus.description = 'Elixer of Memory';
NewEquipment.Eris        = new Equipment( 'Eris',            0, 200,   null, null, libAbrv+"100" ); NewEquipment.Eris.description = 'Elixer of Madness';
NewEquipment.Eros        = new Equipment( 'Eros',            0, 900,   null, null, libAbrv+"102" ); NewEquipment.Eros.description = 'Elixer of Love, or "Love Potion"';
NewEquipment.Hebe        = new Equipment( 'Hebe',            0, 25000, null, null, libAbrv+"101" ); NewEquipment.Hebe.description = 'Elixer of Youth';
NewEquipment.Heracles    = new Equipment( 'Heracles',        0, 250,   null, null, libAbrv+"100" ); NewEquipment.Heracles.description = 'Elixer of Strength';
NewEquipment.Hermes      = new Equipment( 'Hermes',          0, 500,   null, null, libAbrv+"100" ); NewEquipment.Hermes.description = 'Elixer of Stealth';
NewEquipment.Hydra       = new Equipment( 'Hydra',           0, 5000,  null, null, libAbrv+"101" ); NewEquipment.Hydra.description = 'Elixer of Regeneration';
NewEquipment.Janus       = new Equipment( 'Janus',           0, 400,   null, null, libAbrv+"101" ); NewEquipment.Janus.description = 'Antidote Elixer';
NewEquipment.Juno        = new Equipment( 'Juno',            0, 400,   null, null, libAbrv+"100" ); NewEquipment.Juno.description = 'Elixer of Jealousy';
NewEquipment.Ibycus      = new Equipment( 'Ibycus',          0, 550,   null, null, libAbrv+"100" ); NewEquipment.Ibycus.description = 'Elixer of Bird Control';
NewEquipment.Marsyas     = new Equipment( 'Marsyas',         0, 300,   null, null, libAbrv+"102" ); NewEquipment.Marsyas.description = 'Elixer of Music';
NewEquipment.Melampus    = new Equipment( 'Melampus',        0, 850,   null, null, libAbrv+"100" ); NewEquipment.Melampus.description = 'Elixer of Beast-Speech';
NewEquipment.Morpheus    = new Equipment( 'Morpheus',        0, 120,   null, null, libAbrv+"102" ); NewEquipment.Morpheus.description = 'Elixer of Sleep';
NewEquipment.Narcissus   = new Equipment( 'Narcissus',       0, 750,   null, null, libAbrv+"101" ); NewEquipment.Narcissus.description = 'Elixer of Self-Love';
NewEquipment.Nemesis     = new Equipment( 'Nemesis',         0, 300,   null, null, libAbrv+"101" ); NewEquipment.Nemesis.description = 'Elixer of Hatred';
NewEquipment.Odysseus    = new Equipment( 'Odysseus',        0, 3000,  null, null, libAbrv+"101" ); NewEquipment.Odysseus.description = 'Elixer of Invisibility';
NewEquipment.Orion       = new Equipment( 'Orion',           0, 300,   null, null, libAbrv+"100" ); NewEquipment.Orion.description = 'Elixer of the Huntsman';
NewEquipment.Orpheus     = new Equipment( 'Orpheus',         0, 350,   null, null, libAbrv+"102" ); NewEquipment.Orpheus.description = 'Elixer of Charisma';
NewEquipment.Pan         = new Equipment( 'Pan',             0, 130,   null, null, libAbrv+"102" ); NewEquipment.Pan.description = 'Elixer of Drunkenness';
NewEquipment.Persephone  = new Equipment( 'Persephone',      0, 25000, null, null, libAbrv+"102" ); NewEquipment.Persephone.description = 'Elixer of Resurrection';
NewEquipment.Philemon    = new Equipment( 'Philemon',        0, 550,   null, null, libAbrv+"102" ); NewEquipment.Philemon.description = 'Elixer of Friendship';
NewEquipment.Philoctetes = new Equipment( 'Philoctetes',     0, 400,   null, null, libAbrv+"101" ); NewEquipment.Philoctetes.description = 'Elixer of Weakness';
NewEquipment.Phobos      = new Equipment( 'Phobos',          0, 225,   null, null, libAbrv+"101" ); NewEquipment.Phobos.description = 'Elixer of Fear';
NewEquipment.Pluto       = new Equipment( 'Pluto unguent',   0, 4100,  null, null, libAbrv+"102" ); NewEquipment.Pluto.description = 'Elixer of Reanimation';
NewEquipment.Poseidon    = new Equipment( 'Poseidon',        0, 600,   null, null, libAbrv+"101" ); NewEquipment.Poseidon.description = 'Elixer of Water-Breathing';
NewEquipment.Priapus     = new Equipment( 'Priapus',         0, 500,   null, null, libAbrv+"101" ); NewEquipment.Priapus.description = 'Elixer of Lecherousness';
NewEquipment.Prometheus  = new Equipment( 'Prometheus',      0, 1500,  null, null, libAbrv+"102" ); NewEquipment.Prometheus.description = 'Elixer of Wisdom';
NewEquipment.Sisyphus    = new Equipment( 'Sisyphus',        0, 650,   null, null, libAbrv+"101" ); NewEquipment.Sisyphus.description = 'Elixer of Frustration';
NewEquipment.Syrinx      = new Equipment( 'Syrinx',          0, 300,   null, null, libAbrv+"102" ); NewEquipment.Syrinx.description = 'Elixer of Hearing';
NewEquipment.Tantalus    = new Equipment( 'Tantalus',        0, 500,   null, null, libAbrv+"101" ); NewEquipment.Tantalus.description = 'Elixer of Foolishness';
NewEquipment.Thanatos    = new Equipment( 'Thanatos',        0, 500,   null, null, libAbrv+"101" ); NewEquipment.Thanatos.description = 'Elixer of Death';
NewEquipment.Theseus     = new Equipment( 'Theseus',         0, 1650,  null, null, libAbrv+"100" ); NewEquipment.Theseus.description = 'Elixer of Leadership';
NewEquipment.Tithonus    = new Equipment( 'Tithonus',        0, 825,   null, null, libAbrv+"101" ); NewEquipment.Tithonus.description = 'Elixer of Aging';
NewEquipment.Tyche       = new Equipment( 'Tyche',           0, 1300,  null, null, libAbrv+"101" ); NewEquipment.Tyche.description = 'Elixer of Luck';
NewEquipment.Vulcan      = new Equipment( 'Vulcan',          0, 1100,  null, null, libAbrv+"102" ); NewEquipment.Vulcan.description = 'Elixer of Craftsmanship';


/* Here's an attempt to enhance objects existing in Basic Set libraries */
if( CharacterTypes ) {
    CharacterTypes.watermage.skills      = removeDups( CharacterTypes.watermage.skills.concat( Groups.Water ) );
    CharacterTypes.stormmage.skills      = removeDups( CharacterTypes.stormmage.skills.concat( Groups.Water, Groups.Air ) );
    CharacterTypes.airmage.skills        = removeDups( CharacterTypes.airmage.skills.concat( Groups.Air ) );
    CharacterTypes.firestormmage.skills  = removeDups( CharacterTypes.firestormmage.skills.concat( Groups.Air, Groups.Fire ) );
    CharacterTypes.firemage.skills       = removeDups( CharacterTypes.firemage.skills.concat( Groups.Fire ) );
    CharacterTypes.lavamage.skills       = removeDups( CharacterTypes.lavamage.skills.concat( Groups.Fire, Groups.Earth ) );
    CharacterTypes.earthmage.skills      = removeDups( CharacterTypes.earthmage.skills.concat( Groups.Earth ) );
}


NewTemplates.Werewolf = {
  name : 'Werewolf',
  value : 15,
  ref : libAbrv+110,
  traits : [
    // full moon transformation, involuntary (+5 if voluntary change is possible) (that's incredibly cheap; Full Moon Only really knocks like 160 points off of this template cost)
    // the Transformation ad is only applicable for voluntary changing
    // otherwise this is Accessibility (only during full moon, -40%) and Always On (-40%) instead (B3E/CI caps limitations at 75% total, B4E at 80%)
    // B4E84 makes this a Trigger limitation (-40%)
    // how do I apply this to the entire Template?

    // these apply all the time, for both human and were-form
    Traits.Regeneration.clone(),
    new Trait( "Vulnerability to silver", 'D', 'P', -10 ),

    new Trait( "Full Moon Only", 'D', 'P', -160 ),			// simulates a -75% or so Limitation

    Traits.RacialDXModifier.clone(),
    Traits.RacialHTModifier.clone(),
    Traits.PD.clone(),
    Traits.DR.clone(),
    Traits.IncreasedSpeed.clone(),
    Traits.Teeth.clone(),

    /* Not sure this is the way to do these, since they are real alternate forms, which should require alternate character sheets. */

  ],
  skills : [],
  spells : [],
  adjustments : []
};
NewTemplates.Werewolf.traits[0].ConstantModsArray = [{text:"Slow (1 HP / 12 hrs)",value:10}];     // Slow Regeneration
NewTemplates.Werewolf.traits[1].description = 'negates Regeneration, weapons do double damage';   // Vulnerability to silver
NewTemplates.Werewolf.traits[1].key = 'VulnerabilityToSilver';                                    // Vulnerability to silver
NewTemplates.Werewolf.traits[2].description = "Only during full moon, involuntary";								// limitation
NewTemplates.Werewolf.traits[2].key = 'FullMoonOnly';																							// limitation
NewTemplates.Werewolf.traits[3].levels = 4;  // DX 14 (+/-1)
NewTemplates.Werewolf.traits[4].levels = 2;  // HT+2
NewTemplates.Werewolf.traits[5].levels = 1;  // PD 1
NewTemplates.Werewolf.traits[6].levels = 1;  // DR 3
NewTemplates.Werewolf.traits[7].levels = 4;  // Speed 9
NewTemplates.Werewolf.traits[8].levels = 1;  // Sharp Teeth


for ( var t in NewTemplates ) {
    if( !NewTemplates[t].hasOwnProperty('key') ) NewTemplates[t].key = t;
};


















// importLibrarySettings();

if(window.console) console.log(newLibrary+" library file load finished");
